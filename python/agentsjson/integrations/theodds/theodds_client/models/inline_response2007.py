# coding: utf-8

"""
    The Odds API

    To access the API, get a free API key from https://the-odds-api.com  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2007(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'str',
        'previous_timestamp': 'str',
        'next_timestamp': 'str',
        'data': 'list[InlineResponse2003]'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'previous_timestamp': 'previous_timestamp',
        'next_timestamp': 'next_timestamp',
        'data': 'data'
    }

    def __init__(self, timestamp=None, previous_timestamp=None, next_timestamp=None, data=None):  # noqa: E501
        """InlineResponse2007 - a model defined in Swagger"""  # noqa: E501
        self._timestamp = None
        self._previous_timestamp = None
        self._next_timestamp = None
        self._data = None
        self.discriminator = None
        if timestamp is not None:
            self.timestamp = timestamp
        if previous_timestamp is not None:
            self.previous_timestamp = previous_timestamp
        if next_timestamp is not None:
            self.next_timestamp = next_timestamp
        if data is not None:
            self.data = data

    @property
    def timestamp(self):
        """Gets the timestamp of this InlineResponse2007.  # noqa: E501

        The timestamp of the snapshot. This will be the closest available timestamp equal to or earlier than the provided date parameter.  # noqa: E501

        :return: The timestamp of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this InlineResponse2007.

        The timestamp of the snapshot. This will be the closest available timestamp equal to or earlier than the provided date parameter.  # noqa: E501

        :param timestamp: The timestamp of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def previous_timestamp(self):
        """Gets the previous_timestamp of this InlineResponse2007.  # noqa: E501

        The preceding available timestamp. This can be used as the date parameter in a new request to move back in time.  # noqa: E501

        :return: The previous_timestamp of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._previous_timestamp

    @previous_timestamp.setter
    def previous_timestamp(self, previous_timestamp):
        """Sets the previous_timestamp of this InlineResponse2007.

        The preceding available timestamp. This can be used as the date parameter in a new request to move back in time.  # noqa: E501

        :param previous_timestamp: The previous_timestamp of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._previous_timestamp = previous_timestamp

    @property
    def next_timestamp(self):
        """Gets the next_timestamp of this InlineResponse2007.  # noqa: E501

        The next available timestamp. This can be used as the date parameter in a new request to move forward in time.  # noqa: E501

        :return: The next_timestamp of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._next_timestamp

    @next_timestamp.setter
    def next_timestamp(self, next_timestamp):
        """Sets the next_timestamp of this InlineResponse2007.

        The next available timestamp. This can be used as the date parameter in a new request to move forward in time.  # noqa: E501

        :param next_timestamp: The next_timestamp of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._next_timestamp = next_timestamp

    @property
    def data(self):
        """Gets the data of this InlineResponse2007.  # noqa: E501

        A list of live and upcoming events  # noqa: E501

        :return: The data of this InlineResponse2007.  # noqa: E501
        :rtype: list[InlineResponse2003]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this InlineResponse2007.

        A list of live and upcoming events  # noqa: E501

        :param data: The data of this InlineResponse2007.  # noqa: E501
        :type: list[InlineResponse2003]
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2007, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2007):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
