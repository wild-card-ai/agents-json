# coding: utf-8

"""
    The Odds API

    To access the API, get a free API key from https://the-odds-api.com  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2006Markets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'last_update': 'datetime',
        'outcomes': 'list[V4sportssportoddsOutcomes]'
    }

    attribute_map = {
        'key': 'key',
        'last_update': 'last_update',
        'outcomes': 'outcomes'
    }

    def __init__(self, key=None, last_update=None, outcomes=None):  # noqa: E501
        """InlineResponse2006Markets - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._last_update = None
        self._outcomes = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if last_update is not None:
            self.last_update = last_update
        if outcomes is not None:
            self.outcomes = outcomes

    @property
    def key(self):
        """Gets the key of this InlineResponse2006Markets.  # noqa: E501

        The name of the odds market  # noqa: E501

        :return: The key of this InlineResponse2006Markets.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this InlineResponse2006Markets.

        The name of the odds market  # noqa: E501

        :param key: The key of this InlineResponse2006Markets.  # noqa: E501
        :type: str
        """
        allowed_values = ["h2h", "spreads", "totals", "outrights"]  # noqa: E501
        if key not in allowed_values:
            raise ValueError(
                "Invalid value for `key` ({0}), must be one of {1}"  # noqa: E501
                .format(key, allowed_values)
            )

        self._key = key

    @property
    def last_update(self):
        """Gets the last_update of this InlineResponse2006Markets.  # noqa: E501

        A timestamp of when the markets's odds were last read. Will be an integer if dateFormat=unix, otherwise it will be a string. To check recency of odds, we recommend using this field instead of the \"last_update\" field at the bookmaker level.  # noqa: E501

        :return: The last_update of this InlineResponse2006Markets.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this InlineResponse2006Markets.

        A timestamp of when the markets's odds were last read. Will be an integer if dateFormat=unix, otherwise it will be a string. To check recency of odds, we recommend using this field instead of the \"last_update\" field at the bookmaker level.  # noqa: E501

        :param last_update: The last_update of this InlineResponse2006Markets.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def outcomes(self):
        """Gets the outcomes of this InlineResponse2006Markets.  # noqa: E501


        :return: The outcomes of this InlineResponse2006Markets.  # noqa: E501
        :rtype: list[V4sportssportoddsOutcomes]
        """
        return self._outcomes

    @outcomes.setter
    def outcomes(self, outcomes):
        """Sets the outcomes of this InlineResponse2006Markets.


        :param outcomes: The outcomes of this InlineResponse2006Markets.  # noqa: E501
        :type: list[V4sportssportoddsOutcomes]
        """

        self._outcomes = outcomes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2006Markets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2006Markets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
