# coding: utf-8

"""
    The Odds API

    To access the API, get a free API key from https://the-odds-api.com  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2003(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'sport_key': 'str',
        'sport_title': 'str',
        'commence_time': 'datetime',
        'home_team': 'str',
        'away_team': 'str'
    }

    attribute_map = {
        'id': 'id',
        'sport_key': 'sport_key',
        'sport_title': 'sport_title',
        'commence_time': 'commence_time',
        'home_team': 'home_team',
        'away_team': 'away_team'
    }

    def __init__(self, id=None, sport_key=None, sport_title=None, commence_time=None, home_team=None, away_team=None):  # noqa: E501
        """InlineResponse2003 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._sport_key = None
        self._sport_title = None
        self._commence_time = None
        self._home_team = None
        self._away_team = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if sport_key is not None:
            self.sport_key = sport_key
        if sport_title is not None:
            self.sport_title = sport_title
        if commence_time is not None:
            self.commence_time = commence_time
        if home_team is not None:
            self.home_team = home_team
        if away_team is not None:
            self.away_team = away_team

    @property
    def id(self):
        """Gets the id of this InlineResponse2003.  # noqa: E501

        A unique 32 character identifier for the event.  # noqa: E501

        :return: The id of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2003.

        A unique 32 character identifier for the event.  # noqa: E501

        :param id: The id of this InlineResponse2003.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def sport_key(self):
        """Gets the sport_key of this InlineResponse2003.  # noqa: E501

        A unique slug for the sport. Use this as the \"sport\" param in /odds requests  # noqa: E501

        :return: The sport_key of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._sport_key

    @sport_key.setter
    def sport_key(self, sport_key):
        """Sets the sport_key of this InlineResponse2003.

        A unique slug for the sport. Use this as the \"sport\" param in /odds requests  # noqa: E501

        :param sport_key: The sport_key of this InlineResponse2003.  # noqa: E501
        :type: str
        """

        self._sport_key = sport_key

    @property
    def sport_title(self):
        """Gets the sport_title of this InlineResponse2003.  # noqa: E501

        A presentable title of the sport. Occassionally this value can change, for example if a league undergoes a name change or change in sponsorship.  # noqa: E501

        :return: The sport_title of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._sport_title

    @sport_title.setter
    def sport_title(self, sport_title):
        """Sets the sport_title of this InlineResponse2003.

        A presentable title of the sport. Occassionally this value can change, for example if a league undergoes a name change or change in sponsorship.  # noqa: E501

        :param sport_title: The sport_title of this InlineResponse2003.  # noqa: E501
        :type: str
        """

        self._sport_title = sport_title

    @property
    def commence_time(self):
        """Gets the commence_time of this InlineResponse2003.  # noqa: E501

        The match start time (ISO 8601 formatted). This will be unix timestamp integer if the dateFormat query param is set to dateFormat=unix.  # noqa: E501

        :return: The commence_time of this InlineResponse2003.  # noqa: E501
        :rtype: datetime
        """
        return self._commence_time

    @commence_time.setter
    def commence_time(self, commence_time):
        """Sets the commence_time of this InlineResponse2003.

        The match start time (ISO 8601 formatted). This will be unix timestamp integer if the dateFormat query param is set to dateFormat=unix.  # noqa: E501

        :param commence_time: The commence_time of this InlineResponse2003.  # noqa: E501
        :type: datetime
        """

        self._commence_time = commence_time

    @property
    def home_team(self):
        """Gets the home_team of this InlineResponse2003.  # noqa: E501

        The home team. If home/away is not applicable for the sport (such as MMA and Tennis), it will be one of the participants. Null for outrights (futures) events.  # noqa: E501

        :return: The home_team of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._home_team

    @home_team.setter
    def home_team(self, home_team):
        """Sets the home_team of this InlineResponse2003.

        The home team. If home/away is not applicable for the sport (such as MMA and Tennis), it will be one of the participants. Null for outrights (futures) events.  # noqa: E501

        :param home_team: The home_team of this InlineResponse2003.  # noqa: E501
        :type: str
        """

        self._home_team = home_team

    @property
    def away_team(self):
        """Gets the away_team of this InlineResponse2003.  # noqa: E501

        The away team. If home/away is not applicable for the sport (such as MMA and Tennis), it will be one of the participants. Null for outrights (futures) events.  # noqa: E501

        :return: The away_team of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._away_team

    @away_team.setter
    def away_team(self, away_team):
        """Sets the away_team of this InlineResponse2003.

        The away team. If home/away is not applicable for the sport (such as MMA and Tennis), it will be one of the participants. Null for outrights (futures) events.  # noqa: E501

        :param away_team: The away_team of this InlineResponse2003.  # noqa: E501
        :type: str
        """

        self._away_team = away_team

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
