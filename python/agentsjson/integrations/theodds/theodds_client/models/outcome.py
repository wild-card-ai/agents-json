# coding: utf-8

"""
    The Odds API

    To access the API, get a free API key from https://the-odds-api.com  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Outcome(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'price': 'float',
        'point': 'float',
        'description': 'str',
        'link': 'str',
        'sid': 'str',
        'bet_limit': 'float'
    }

    attribute_map = {
        'name': 'name',
        'price': 'price',
        'point': 'point',
        'description': 'description',
        'link': 'link',
        'sid': 'sid',
        'bet_limit': 'bet_limit'
    }

    def __init__(self, name=None, price=None, point=None, description=None, link=None, sid=None, bet_limit=None):  # noqa: E501
        """Outcome - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._price = None
        self._point = None
        self._description = None
        self._link = None
        self._sid = None
        self._bet_limit = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if price is not None:
            self.price = price
        if point is not None:
            self.point = point
        if description is not None:
            self.description = description
        if link is not None:
            self.link = link
        if sid is not None:
            self.sid = sid
        if bet_limit is not None:
            self.bet_limit = bet_limit

    @property
    def name(self):
        """Gets the name of this Outcome.  # noqa: E501

        The outcome label. The value will depend on the market. For totals markets, this will be 'Over' or 'Under'. For team markets, it will be the name of the team or participant, or 'Draw'  # noqa: E501

        :return: The name of this Outcome.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Outcome.

        The outcome label. The value will depend on the market. For totals markets, this will be 'Over' or 'Under'. For team markets, it will be the name of the team or participant, or 'Draw'  # noqa: E501

        :param name: The name of this Outcome.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this Outcome.  # noqa: E501

        The odds of the outcome. The format is determined by the oddsFormat query param. The format is decimal by default.  # noqa: E501

        :return: The price of this Outcome.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Outcome.

        The odds of the outcome. The format is determined by the oddsFormat query param. The format is decimal by default.  # noqa: E501

        :param price: The price of this Outcome.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def point(self):
        """Gets the point of this Outcome.  # noqa: E501

        The handicap or points of the outcome, only applicable to spreads and totals markets (this property will be missing for h2h and outrights markets)  # noqa: E501

        :return: The point of this Outcome.  # noqa: E501
        :rtype: float
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this Outcome.

        The handicap or points of the outcome, only applicable to spreads and totals markets (this property will be missing for h2h and outrights markets)  # noqa: E501

        :param point: The point of this Outcome.  # noqa: E501
        :type: float
        """

        self._point = point

    @property
    def description(self):
        """Gets the description of this Outcome.  # noqa: E501

        This field is only relevant for certain markets. It contains more information about the outcome (for example, for player prop markets, it includes the player's name)  # noqa: E501

        :return: The description of this Outcome.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Outcome.

        This field is only relevant for certain markets. It contains more information about the outcome (for example, for player prop markets, it includes the player's name)  # noqa: E501

        :param description: The description of this Outcome.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def link(self):
        """Gets the link of this Outcome.  # noqa: E501

        If available, link to the bookmaker's website and populate the betslip. This field is included when providing the query parameter includeLinks=true  # noqa: E501

        :return: The link of this Outcome.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Outcome.

        If available, link to the bookmaker's website and populate the betslip. This field is included when providing the query parameter includeLinks=true  # noqa: E501

        :param link: The link of this Outcome.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def sid(self):
        """Gets the sid of this Outcome.  # noqa: E501

        The bookmaker's id for the bet selection, if available. This field is included when providing the query parameter includeSids=true  # noqa: E501

        :return: The sid of this Outcome.  # noqa: E501
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this Outcome.

        The bookmaker's id for the bet selection, if available. This field is included when providing the query parameter includeSids=true  # noqa: E501

        :param sid: The sid of this Outcome.  # noqa: E501
        :type: str
        """

        self._sid = sid

    @property
    def bet_limit(self):
        """Gets the bet_limit of this Outcome.  # noqa: E501

        The bookmaker's or exchange's monetary limit on the betting selection. The currency will depend on the bookmaker/exchange. This field is included when providing the query parameter includeBetLimits=true, and is mainly populated for betting exchanges.  # noqa: E501

        :return: The bet_limit of this Outcome.  # noqa: E501
        :rtype: float
        """
        return self._bet_limit

    @bet_limit.setter
    def bet_limit(self, bet_limit):
        """Sets the bet_limit of this Outcome.

        The bookmaker's or exchange's monetary limit on the betting selection. The currency will depend on the bookmaker/exchange. This field is included when providing the query parameter includeBetLimits=true, and is mainly populated for betting exchanges.  # noqa: E501

        :param bet_limit: The bet_limit of this Outcome.  # noqa: E501
        :type: float
        """

        self._bet_limit = bet_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Outcome, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Outcome):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
