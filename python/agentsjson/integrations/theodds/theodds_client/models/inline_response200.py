# coding: utf-8

"""
    The Odds API

    To access the API, get a free API key from https://the-odds-api.com  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'active': 'bool',
        'group': 'str',
        'description': 'str',
        'title': 'str',
        'has_outrights': 'bool'
    }

    attribute_map = {
        'key': 'key',
        'active': 'active',
        'group': 'group',
        'description': 'description',
        'title': 'title',
        'has_outrights': 'has_outrights'
    }

    def __init__(self, key=None, active=None, group=None, description=None, title=None, has_outrights=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._active = None
        self._group = None
        self._description = None
        self._title = None
        self._has_outrights = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if active is not None:
            self.active = active
        if group is not None:
            self.group = group
        if description is not None:
            self.description = description
        if title is not None:
            self.title = title
        if has_outrights is not None:
            self.has_outrights = has_outrights

    @property
    def key(self):
        """Gets the key of this InlineResponse200.  # noqa: E501

        A unique slug for the sport. Use this as the \"sport\" param in /odds requests  # noqa: E501

        :return: The key of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this InlineResponse200.

        A unique slug for the sport. Use this as the \"sport\" param in /odds requests  # noqa: E501

        :param key: The key of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def active(self):
        """Gets the active of this InlineResponse200.  # noqa: E501

        Indicates if the sport is in season  # noqa: E501

        :return: The active of this InlineResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this InlineResponse200.

        Indicates if the sport is in season  # noqa: E501

        :param active: The active of this InlineResponse200.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def group(self):
        """Gets the group of this InlineResponse200.  # noqa: E501

        A broader grouping  # noqa: E501

        :return: The group of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this InlineResponse200.

        A broader grouping  # noqa: E501

        :param group: The group of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def description(self):
        """Gets the description of this InlineResponse200.  # noqa: E501

        A brief description of the sport. Subject to change (for example, if sponsors change)  # noqa: E501

        :return: The description of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse200.

        A brief description of the sport. Subject to change (for example, if sponsors change)  # noqa: E501

        :param description: The description of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def title(self):
        """Gets the title of this InlineResponse200.  # noqa: E501

        A presentable title of the sport. Occassionally this value can change, for example if a league undergoes a name change or change in sponsorship.  # noqa: E501

        :return: The title of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse200.

        A presentable title of the sport. Occassionally this value can change, for example if a league undergoes a name change or change in sponsorship.  # noqa: E501

        :param title: The title of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def has_outrights(self):
        """Gets the has_outrights of this InlineResponse200.  # noqa: E501

        Indicates if the sport has outrights markets.  # noqa: E501

        :return: The has_outrights of this InlineResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._has_outrights

    @has_outrights.setter
    def has_outrights(self, has_outrights):
        """Sets the has_outrights of this InlineResponse200.

        Indicates if the sport has outrights markets.  # noqa: E501

        :param has_outrights: The has_outrights of this InlineResponse200.  # noqa: E501
        :type: bool
        """

        self._has_outrights = has_outrights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
