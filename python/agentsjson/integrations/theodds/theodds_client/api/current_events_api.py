# coding: utf-8

"""
    The Odds API

    To access the API, get a free API key from https://the-odds-api.com  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class CurrentEventsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def theodds_get_v4_sports_events_by_sport(self, sport, api_key, **kwargs):  # noqa: E501
        """theodds_get_v4_sports_events_by_sport  # noqa: E501

        Returns a list of in-play and pre-match events for a specified sport or league. Odds are not included in the response. This endpoint does not count against the usage quota.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.theodds_get_v4_sports_events_by_sport(sport, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :param str api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :param str date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :param str event_ids: Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired
        :param str commence_time_from: Filters the response to show events that commence on and after this parameter. Values are in ISO8601 format
        :param str commence_time_to: Filters the response to show events that commence on and before this parameter. Values are in ISO8601 format
        :return: list[InlineResponse2003]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.theodds_get_v4_sports_events_by_sport_with_http_info(sport, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.theodds_get_v4_sports_events_by_sport_with_http_info(sport, api_key, **kwargs)  # noqa: E501
            return data

    def theodds_get_v4_sports_events_by_sport_with_http_info(self, sport, api_key, **kwargs):  # noqa: E501
        """theodds_get_v4_sports_events_by_sport  # noqa: E501

        Returns a list of in-play and pre-match events for a specified sport or league. Odds are not included in the response. This endpoint does not count against the usage quota.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.theodds_get_v4_sports_events_by_sport_with_http_info(sport, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :param str api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :param str date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :param str event_ids: Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired
        :param str commence_time_from: Filters the response to show events that commence on and after this parameter. Values are in ISO8601 format
        :param str commence_time_to: Filters the response to show events that commence on and before this parameter. Values are in ISO8601 format
        :return: list[InlineResponse2003]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sport', 'api_key', 'date_format', 'event_ids', 'commence_time_from', 'commence_time_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method theodds_get_v4_sports_events_by_sport" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sport' is set
        if ('sport' not in params or
                params['sport'] is None):
            raise ValueError("Missing the required parameter `sport` when calling `theodds_get_v4_sports_events_by_sport`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `theodds_get_v4_sports_events_by_sport`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sport' in params:
            path_params['sport'] = params['sport']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'date_format' in params:
            query_params.append(('dateFormat', params['date_format']))  # noqa: E501
        if 'event_ids' in params:
            query_params.append(('eventIds', params['event_ids']))  # noqa: E501
        if 'commence_time_from' in params:
            query_params.append(('commenceTimeFrom', params['commence_time_from']))  # noqa: E501
        if 'commence_time_to' in params:
            query_params.append(('commenceTimeTo', params['commence_time_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v4/sports/{sport}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse2003]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def theodds_get_v4_sports_events_odds_by_sport_and_event_id(self, sport, event_id, api_key, regions, **kwargs):  # noqa: E501
        """theodds_get_v4_sports_events_odds_by_sport_and_event_id  # noqa: E501

        Returns bookmaker odds for a single event as long as the event is still valid (live or upcoming). Accepts any available market keys using the `markets` parameter. Use this endpoint to access any available markets for an event. For the most popular featured markets, use the `/v4/sports/{sport}/odds` endpoint (see above). The API is gradually expanding coverage to more betting markets. [See the full list here](https://the-odds-api.com/sports-odds-data/betting-markets.html)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.theodds_get_v4_sports_events_odds_by_sport_and_event_id(sport, event_id, api_key, regions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :param str event_id: Event ids can be found in the `id` field in the response of the `/events` endpoint (see `/v4/sports/{sports}/events`). If the event has expired (not receiving updates due to completion or cancellation), a HTTP 404 status code will be returned. (required)
        :param str api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :param str regions: Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Each region will count as 1 request against the usage quota for each market. Most use cases will only need to specify one region. See [the full list of bookmakers by region](https://the-odds-api.com/sports-odds-data/bookmaker-apis.html) (required)
        :param str markets: The odds markets to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights only avaialable for select sports. See [the full list of supported market keys](https://the-odds-api.com/sports-odds-data/betting-markets.html)
        :param str date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :param str odds_format: Format of returned odds
        :param str bookmakers: Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers counts as 1 request. Specifying between 11 and 20 bookmakers counts as 2 requests
        :param bool include_links: The response will include bookmaker links to events, markets, and betslips if available.
        :param bool include_sids: The response will include source ids (bookmaker ids) for events, markets, and outcomes if available.
        :param bool include_bet_limits: The response will include the bet limit of each betting option, mainly available for betting exchanges.
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.theodds_get_v4_sports_events_odds_by_sport_and_event_id_with_http_info(sport, event_id, api_key, regions, **kwargs)  # noqa: E501
        else:
            (data) = self.theodds_get_v4_sports_events_odds_by_sport_and_event_id_with_http_info(sport, event_id, api_key, regions, **kwargs)  # noqa: E501
            return data

    def theodds_get_v4_sports_events_odds_by_sport_and_event_id_with_http_info(self, sport, event_id, api_key, regions, **kwargs):  # noqa: E501
        """theodds_get_v4_sports_events_odds_by_sport_and_event_id  # noqa: E501

        Returns bookmaker odds for a single event as long as the event is still valid (live or upcoming). Accepts any available market keys using the `markets` parameter. Use this endpoint to access any available markets for an event. For the most popular featured markets, use the `/v4/sports/{sport}/odds` endpoint (see above). The API is gradually expanding coverage to more betting markets. [See the full list here](https://the-odds-api.com/sports-odds-data/betting-markets.html)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.theodds_get_v4_sports_events_odds_by_sport_and_event_id_with_http_info(sport, event_id, api_key, regions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :param str event_id: Event ids can be found in the `id` field in the response of the `/events` endpoint (see `/v4/sports/{sports}/events`). If the event has expired (not receiving updates due to completion or cancellation), a HTTP 404 status code will be returned. (required)
        :param str api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :param str regions: Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Each region will count as 1 request against the usage quota for each market. Most use cases will only need to specify one region. See [the full list of bookmakers by region](https://the-odds-api.com/sports-odds-data/bookmaker-apis.html) (required)
        :param str markets: The odds markets to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights only avaialable for select sports. See [the full list of supported market keys](https://the-odds-api.com/sports-odds-data/betting-markets.html)
        :param str date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :param str odds_format: Format of returned odds
        :param str bookmakers: Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers counts as 1 request. Specifying between 11 and 20 bookmakers counts as 2 requests
        :param bool include_links: The response will include bookmaker links to events, markets, and betslips if available.
        :param bool include_sids: The response will include source ids (bookmaker ids) for events, markets, and outcomes if available.
        :param bool include_bet_limits: The response will include the bet limit of each betting option, mainly available for betting exchanges.
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sport', 'event_id', 'api_key', 'regions', 'markets', 'date_format', 'odds_format', 'bookmakers', 'include_links', 'include_sids', 'include_bet_limits']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method theodds_get_v4_sports_events_odds_by_sport_and_event_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sport' is set
        if ('sport' not in params or
                params['sport'] is None):
            raise ValueError("Missing the required parameter `sport` when calling `theodds_get_v4_sports_events_odds_by_sport_and_event_id`")  # noqa: E501
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params or
                params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `theodds_get_v4_sports_events_odds_by_sport_and_event_id`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `theodds_get_v4_sports_events_odds_by_sport_and_event_id`")  # noqa: E501
        # verify the required parameter 'regions' is set
        if ('regions' not in params or
                params['regions'] is None):
            raise ValueError("Missing the required parameter `regions` when calling `theodds_get_v4_sports_events_odds_by_sport_and_event_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sport' in params:
            path_params['sport'] = params['sport']  # noqa: E501
        if 'event_id' in params:
            path_params['eventId'] = params['event_id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'regions' in params:
            query_params.append(('regions', params['regions']))  # noqa: E501
        if 'markets' in params:
            query_params.append(('markets', params['markets']))  # noqa: E501
        if 'date_format' in params:
            query_params.append(('dateFormat', params['date_format']))  # noqa: E501
        if 'odds_format' in params:
            query_params.append(('oddsFormat', params['odds_format']))  # noqa: E501
        if 'bookmakers' in params:
            query_params.append(('bookmakers', params['bookmakers']))  # noqa: E501
        if 'include_links' in params:
            query_params.append(('includeLinks', params['include_links']))  # noqa: E501
        if 'include_sids' in params:
            query_params.append(('includeSids', params['include_sids']))  # noqa: E501
        if 'include_bet_limits' in params:
            query_params.append(('includeBetLimits', params['include_bet_limits']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v4/sports/{sport}/events/{eventId}/odds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def theodds_get_v4_sports_odds_by_sport(self, sport, api_key, regions, **kwargs):  # noqa: E501
        """theodds_get_v4_sports_odds_by_sport  # noqa: E501

        Returns list of live and upcoming events for a given sport, showing bookmaker odds for the specified region and markets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.theodds_get_v4_sports_odds_by_sport(sport, api_key, regions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :param str api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :param str regions: Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Each region will count as 1 request against the usage quota for each market. Most use cases will only need to specify one region. For a list of bookmakers by region, see https://the-odds-api.com/sports-odds-data/bookmaker-apis.html (required)
        :param str markets: The odds market to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights are only avaialable for select sports, such as golf.
        :param str date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :param str odds_format: Format of returned odds
        :param str event_ids: Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired
        :param str bookmakers: Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers is the equivalent of 1 region. Specifying between 11 and 20 bookmakers is the equivalent of 2 regions
        :param str commence_time_from: Filters the response to show events that commence on and after this parameter. Values are in ISO8601 format
        :param str commence_time_to: Filters the response to show events that commence on and before this parameter. Values are in ISO8601 format
        :param bool include_links: The response will include bookmaker links to events, markets, and betslips if available.
        :param bool include_sids: The response will include source ids (bookmaker ids) for events, markets, and outcomes if available.
        :param bool include_bet_limits: The response will include the bet limit of each betting option, mainly available for betting exchanges.
        :return: list[InlineResponse2001]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.theodds_get_v4_sports_odds_by_sport_with_http_info(sport, api_key, regions, **kwargs)  # noqa: E501
        else:
            (data) = self.theodds_get_v4_sports_odds_by_sport_with_http_info(sport, api_key, regions, **kwargs)  # noqa: E501
            return data

    def theodds_get_v4_sports_odds_by_sport_with_http_info(self, sport, api_key, regions, **kwargs):  # noqa: E501
        """theodds_get_v4_sports_odds_by_sport  # noqa: E501

        Returns list of live and upcoming events for a given sport, showing bookmaker odds for the specified region and markets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.theodds_get_v4_sports_odds_by_sport_with_http_info(sport, api_key, regions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :param str api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :param str regions: Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Each region will count as 1 request against the usage quota for each market. Most use cases will only need to specify one region. For a list of bookmakers by region, see https://the-odds-api.com/sports-odds-data/bookmaker-apis.html (required)
        :param str markets: The odds market to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights are only avaialable for select sports, such as golf.
        :param str date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :param str odds_format: Format of returned odds
        :param str event_ids: Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired
        :param str bookmakers: Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers is the equivalent of 1 region. Specifying between 11 and 20 bookmakers is the equivalent of 2 regions
        :param str commence_time_from: Filters the response to show events that commence on and after this parameter. Values are in ISO8601 format
        :param str commence_time_to: Filters the response to show events that commence on and before this parameter. Values are in ISO8601 format
        :param bool include_links: The response will include bookmaker links to events, markets, and betslips if available.
        :param bool include_sids: The response will include source ids (bookmaker ids) for events, markets, and outcomes if available.
        :param bool include_bet_limits: The response will include the bet limit of each betting option, mainly available for betting exchanges.
        :return: list[InlineResponse2001]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sport', 'api_key', 'regions', 'markets', 'date_format', 'odds_format', 'event_ids', 'bookmakers', 'commence_time_from', 'commence_time_to', 'include_links', 'include_sids', 'include_bet_limits']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method theodds_get_v4_sports_odds_by_sport" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sport' is set
        if ('sport' not in params or
                params['sport'] is None):
            raise ValueError("Missing the required parameter `sport` when calling `theodds_get_v4_sports_odds_by_sport`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `theodds_get_v4_sports_odds_by_sport`")  # noqa: E501
        # verify the required parameter 'regions' is set
        if ('regions' not in params or
                params['regions'] is None):
            raise ValueError("Missing the required parameter `regions` when calling `theodds_get_v4_sports_odds_by_sport`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sport' in params:
            path_params['sport'] = params['sport']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'regions' in params:
            query_params.append(('regions', params['regions']))  # noqa: E501
        if 'markets' in params:
            query_params.append(('markets', params['markets']))  # noqa: E501
        if 'date_format' in params:
            query_params.append(('dateFormat', params['date_format']))  # noqa: E501
        if 'odds_format' in params:
            query_params.append(('oddsFormat', params['odds_format']))  # noqa: E501
        if 'event_ids' in params:
            query_params.append(('eventIds', params['event_ids']))  # noqa: E501
        if 'bookmakers' in params:
            query_params.append(('bookmakers', params['bookmakers']))  # noqa: E501
        if 'commence_time_from' in params:
            query_params.append(('commenceTimeFrom', params['commence_time_from']))  # noqa: E501
        if 'commence_time_to' in params:
            query_params.append(('commenceTimeTo', params['commence_time_to']))  # noqa: E501
        if 'include_links' in params:
            query_params.append(('includeLinks', params['include_links']))  # noqa: E501
        if 'include_sids' in params:
            query_params.append(('includeSids', params['include_sids']))  # noqa: E501
        if 'include_bet_limits' in params:
            query_params.append(('includeBetLimits', params['include_bet_limits']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v4/sports/{sport}/odds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse2001]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def theodds_get_v4_sports_scores_by_sport(self, sport, api_key, **kwargs):  # noqa: E501
        """theodds_get_v4_sports_scores_by_sport  # noqa: E501

        Returns list of live and upcoming events for a given sport, and optionally recently completed events. Live and completed events will contain scores  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.theodds_get_v4_sports_scores_by_sport(sport, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sport: sport key for which to return events and odds (required)
        :param str api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :param int days_from: The number of days in the past from which to return completed events. Valid values are integers from `1` to `3`. If this field is missing, only live and upcoming events are returned.
        :param str date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :param str event_ids: Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired
        :return: list[InlineResponse2002]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.theodds_get_v4_sports_scores_by_sport_with_http_info(sport, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.theodds_get_v4_sports_scores_by_sport_with_http_info(sport, api_key, **kwargs)  # noqa: E501
            return data

    def theodds_get_v4_sports_scores_by_sport_with_http_info(self, sport, api_key, **kwargs):  # noqa: E501
        """theodds_get_v4_sports_scores_by_sport  # noqa: E501

        Returns list of live and upcoming events for a given sport, and optionally recently completed events. Live and completed events will contain scores  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.theodds_get_v4_sports_scores_by_sport_with_http_info(sport, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sport: sport key for which to return events and odds (required)
        :param str api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :param int days_from: The number of days in the past from which to return completed events. Valid values are integers from `1` to `3`. If this field is missing, only live and upcoming events are returned.
        :param str date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :param str event_ids: Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired
        :return: list[InlineResponse2002]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sport', 'api_key', 'days_from', 'date_format', 'event_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method theodds_get_v4_sports_scores_by_sport" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sport' is set
        if ('sport' not in params or
                params['sport'] is None):
            raise ValueError("Missing the required parameter `sport` when calling `theodds_get_v4_sports_scores_by_sport`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `theodds_get_v4_sports_scores_by_sport`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sport' in params:
            path_params['sport'] = params['sport']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'days_from' in params:
            query_params.append(('daysFrom', params['days_from']))  # noqa: E501
        if 'date_format' in params:
            query_params.append(('dateFormat', params['date_format']))  # noqa: E501
        if 'event_ids' in params:
            query_params.append(('eventIds', params['event_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v4/sports/{sport}/scores', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse2002]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
