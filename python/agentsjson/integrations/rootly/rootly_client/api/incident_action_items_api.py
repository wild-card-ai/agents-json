# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class IncidentActionItemsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_incident_action_item(self, body, incident_id, **kwargs):  # noqa: E501
        """Creates a incident action item  # noqa: E501

        Creates a new action item from provided data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_incident_action_item(body, incident_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewIncidentActionItem body: (required)
        :param str incident_id: (required)
        :return: IncidentActionItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_incident_action_item_with_http_info(body, incident_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_incident_action_item_with_http_info(body, incident_id, **kwargs)  # noqa: E501
            return data

    def create_incident_action_item_with_http_info(self, body, incident_id, **kwargs):  # noqa: E501
        """Creates a incident action item  # noqa: E501

        Creates a new action item from provided data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_incident_action_item_with_http_info(body, incident_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewIncidentActionItem body: (required)
        :param str incident_id: (required)
        :return: IncidentActionItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'incident_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_incident_action_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_incident_action_item`")  # noqa: E501
        # verify the required parameter 'incident_id' is set
        if ('incident_id' not in params or
                params['incident_id'] is None):
            raise ValueError("Missing the required parameter `incident_id` when calling `create_incident_action_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'incident_id' in params:
            path_params['incident_id'] = params['incident_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{incident_id}/action_items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentActionItemResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_incident_action_item(self, id, **kwargs):  # noqa: E501
        """Delete a incident action item  # noqa: E501

        Delete a specific incident action item by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_incident_action_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: IncidentActionItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_incident_action_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_incident_action_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_incident_action_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a incident action item  # noqa: E501

        Delete a specific incident action item by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_incident_action_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: IncidentActionItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_incident_action_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_incident_action_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/action_items/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentActionItemResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_incident_action_items(self, id, **kwargs):  # noqa: E501
        """Retrieves a incident action item  # noqa: E501

        Retrieves a specific incident_action_item by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_incident_action_items(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: IncidentActionItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_incident_action_items_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_incident_action_items_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_incident_action_items_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a incident action item  # noqa: E501

        Retrieves a specific incident_action_item by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_incident_action_items_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: IncidentActionItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_incident_action_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_incident_action_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/action_items/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentActionItemResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_all_incident_action_items(self, **kwargs):  # noqa: E501
        """List all action items for an organization  # noqa: E501

        List all action items for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_incident_action_items(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str include:
        :param int page_number:
        :param int page_size:
        :param str filter_kind:
        :param str filter_priority:
        :param str filter_status:
        :param str filter_incident_status:
        :param str filter_incident_created_at_gt:
        :param str filter_incident_created_at_gte:
        :param str filter_incident_created_at_lt:
        :param str filter_incident_created_at_lte:
        :param str filter_due_date_gt:
        :param str filter_due_date_gte:
        :param str filter_due_date_lt:
        :param str filter_due_date_lte:
        :param str filter_created_at_gt:
        :param str filter_created_at_gte:
        :param str filter_created_at_lt:
        :param str filter_created_at_lte:
        :param str sort:
        :return: IncidentActionItemList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_all_incident_action_items_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_all_incident_action_items_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_all_incident_action_items_with_http_info(self, **kwargs):  # noqa: E501
        """List all action items for an organization  # noqa: E501

        List all action items for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_incident_action_items_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str include:
        :param int page_number:
        :param int page_size:
        :param str filter_kind:
        :param str filter_priority:
        :param str filter_status:
        :param str filter_incident_status:
        :param str filter_incident_created_at_gt:
        :param str filter_incident_created_at_gte:
        :param str filter_incident_created_at_lt:
        :param str filter_incident_created_at_lte:
        :param str filter_due_date_gt:
        :param str filter_due_date_gte:
        :param str filter_due_date_lt:
        :param str filter_due_date_lte:
        :param str filter_created_at_gt:
        :param str filter_created_at_gte:
        :param str filter_created_at_lt:
        :param str filter_created_at_lte:
        :param str sort:
        :return: IncidentActionItemList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include', 'page_number', 'page_size', 'filter_kind', 'filter_priority', 'filter_status', 'filter_incident_status', 'filter_incident_created_at_gt', 'filter_incident_created_at_gte', 'filter_incident_created_at_lt', 'filter_incident_created_at_lte', 'filter_due_date_gt', 'filter_due_date_gte', 'filter_due_date_lt', 'filter_due_date_lte', 'filter_created_at_gt', 'filter_created_at_gte', 'filter_created_at_lt', 'filter_created_at_lte', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_all_incident_action_items" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page[number]', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page[size]', params['page_size']))  # noqa: E501
        if 'filter_kind' in params:
            query_params.append(('filter[kind]', params['filter_kind']))  # noqa: E501
        if 'filter_priority' in params:
            query_params.append(('filter[priority]', params['filter_priority']))  # noqa: E501
        if 'filter_status' in params:
            query_params.append(('filter[status]', params['filter_status']))  # noqa: E501
        if 'filter_incident_status' in params:
            query_params.append(('filter[incident_status]', params['filter_incident_status']))  # noqa: E501
        if 'filter_incident_created_at_gt' in params:
            query_params.append(('filter[incident_created_at][gt]', params['filter_incident_created_at_gt']))  # noqa: E501
        if 'filter_incident_created_at_gte' in params:
            query_params.append(('filter[incident_created_at][gte]', params['filter_incident_created_at_gte']))  # noqa: E501
        if 'filter_incident_created_at_lt' in params:
            query_params.append(('filter[incident_created_at][lt]', params['filter_incident_created_at_lt']))  # noqa: E501
        if 'filter_incident_created_at_lte' in params:
            query_params.append(('filter[incident_created_at][lte]', params['filter_incident_created_at_lte']))  # noqa: E501
        if 'filter_due_date_gt' in params:
            query_params.append(('filter[due_date][gt]', params['filter_due_date_gt']))  # noqa: E501
        if 'filter_due_date_gte' in params:
            query_params.append(('filter[due_date][gte]', params['filter_due_date_gte']))  # noqa: E501
        if 'filter_due_date_lt' in params:
            query_params.append(('filter[due_date][lt]', params['filter_due_date_lt']))  # noqa: E501
        if 'filter_due_date_lte' in params:
            query_params.append(('filter[due_date][lte]', params['filter_due_date_lte']))  # noqa: E501
        if 'filter_created_at_gt' in params:
            query_params.append(('filter[created_at][gt]', params['filter_created_at_gt']))  # noqa: E501
        if 'filter_created_at_gte' in params:
            query_params.append(('filter[created_at][gte]', params['filter_created_at_gte']))  # noqa: E501
        if 'filter_created_at_lt' in params:
            query_params.append(('filter[created_at][lt]', params['filter_created_at_lt']))  # noqa: E501
        if 'filter_created_at_lte' in params:
            query_params.append(('filter[created_at][lte]', params['filter_created_at_lte']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/action_items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentActionItemList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_incident_action_items(self, incident_id, **kwargs):  # noqa: E501
        """List incident action items  # noqa: E501

        List incident action items  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_incident_action_items(incident_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str incident_id: (required)
        :param str include:
        :param int page_number:
        :param int page_size:
        :return: IncidentActionItemList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_incident_action_items_with_http_info(incident_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_incident_action_items_with_http_info(incident_id, **kwargs)  # noqa: E501
            return data

    def list_incident_action_items_with_http_info(self, incident_id, **kwargs):  # noqa: E501
        """List incident action items  # noqa: E501

        List incident action items  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_incident_action_items_with_http_info(incident_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str incident_id: (required)
        :param str include:
        :param int page_number:
        :param int page_size:
        :return: IncidentActionItemList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['incident_id', 'include', 'page_number', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_incident_action_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'incident_id' is set
        if ('incident_id' not in params or
                params['incident_id'] is None):
            raise ValueError("Missing the required parameter `incident_id` when calling `list_incident_action_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'incident_id' in params:
            path_params['incident_id'] = params['incident_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page[number]', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page[size]', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{incident_id}/action_items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentActionItemList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_incident_action_item(self, body, id, **kwargs):  # noqa: E501
        """Update a incident action item  # noqa: E501

        Update a specific incident action item by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_incident_action_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateIncidentActionItem body: (required)
        :param str id: (required)
        :return: IncidentActionItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_incident_action_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_incident_action_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_incident_action_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update a incident action item  # noqa: E501

        Update a specific incident action item by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_incident_action_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateIncidentActionItem body: (required)
        :param str id: (required)
        :return: IncidentActionItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_incident_action_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_incident_action_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_incident_action_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/action_items/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentActionItemResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
