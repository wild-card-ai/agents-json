# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class IncidentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_subscribers_to_incident(self, body, id, **kwargs):  # noqa: E501
        """Add subscribers to incident  # noqa: E501

        Add subscribers to incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_subscribers_to_incident(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddSubscribers body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_subscribers_to_incident_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_subscribers_to_incident_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def add_subscribers_to_incident_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Add subscribers to incident  # noqa: E501

        Add subscribers to incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_subscribers_to_incident_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddSubscribers body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_subscribers_to_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_subscribers_to_incident`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_subscribers_to_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{id}/add_subscribers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_user_to_incident(self, body, id, **kwargs):  # noqa: E501
        """Assign user to incident  # noqa: E501

        Assign user to incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_user_to_incident(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssignRoleToUser body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_user_to_incident_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_user_to_incident_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def assign_user_to_incident_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Assign user to incident  # noqa: E501

        Assign user to incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_user_to_incident_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssignRoleToUser body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_user_to_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assign_user_to_incident`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assign_user_to_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{id}/assign_role_to_user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancel_incident(self, body, id, **kwargs):  # noqa: E501
        """Cancel an incident  # noqa: E501

        Cancel a specific incident by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_incident(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CancelIncident body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_incident_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_incident_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def cancel_incident_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Cancel an incident  # noqa: E501

        Cancel a specific incident by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_incident_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CancelIncident body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cancel_incident`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cancel_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{id}/cancel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_incident(self, body, **kwargs):  # noqa: E501
        """Creates a incident  # noqa: E501

        Creates a new incident from provided data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_incident(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewIncident body: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_incident_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_incident_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_incident_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a incident  # noqa: E501

        Creates a new incident from provided data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_incident_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewIncident body: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_incident(self, id, **kwargs):  # noqa: E501
        """Delete a incident  # noqa: E501

        Delete a specific incident by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_incident(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_incident_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_incident_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_incident_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a incident  # noqa: E501

        Delete a specific incident by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_incident_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_incident(self, id, **kwargs):  # noqa: E501
        """Retrieves a incident  # noqa: E501

        Retrieves a specific incident by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_incident(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str include: comma separated if needed. eg: sub_statuses,causes,subscribers
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_incident_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_incident_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_incident_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a incident  # noqa: E501

        Retrieves a specific incident by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_incident_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str include: comma separated if needed. eg: sub_statuses,causes,subscribers
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_incidents(self, **kwargs):  # noqa: E501
        """List incidents  # noqa: E501

        List incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_incidents(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_number:
        :param int page_size:
        :param str filter_search:
        :param str filter_kind:
        :param str filter_status:
        :param str filter_private:
        :param int filter_user_id:
        :param str filter_severity:
        :param str filter_severity_id:
        :param str filter_labels:
        :param str filter_types:
        :param str filter_type_ids:
        :param str filter_environments:
        :param str filter_environment_ids:
        :param str filter_functionalities:
        :param str filter_functionality_ids:
        :param str filter_services:
        :param str filter_service_ids:
        :param str filter_teams:
        :param str filter_team_ids:
        :param str filter_cause:
        :param str filter_cause_ids:
        :param str filter_custom_field_selected_option_ids:
        :param str filter_created_at_gt:
        :param str filter_created_at_gte:
        :param str filter_created_at_lt:
        :param str filter_created_at_lte:
        :param str filter_updated_at_gt:
        :param str filter_updated_at_gte:
        :param str filter_updated_at_lt:
        :param str filter_updated_at_lte:
        :param str filter_started_at_gt:
        :param str filter_started_at_gte:
        :param str filter_started_at_lt:
        :param str filter_started_at_lte:
        :param str filter_detected_at_gt:
        :param str filter_detected_at_gte:
        :param str filter_detected_at_lt:
        :param str filter_detected_at_lte:
        :param str filter_acknowledged_at_gt:
        :param str filter_acknowledged_at_gte:
        :param str filter_acknowledged_at_lt:
        :param str filter_acknowledged_at_lte:
        :param str filter_mitigated_at_gt:
        :param str filter_mitigated_at_gte:
        :param str filter_mitigated_at_lt:
        :param str filter_mitigated_at_lte:
        :param str filter_resolved_at_gt:
        :param str filter_resolved_at_gte:
        :param str filter_resolved_at_lt:
        :param str filter_resolved_at_lte:
        :param str filter_in_triage_at_gt:
        :param str filter_in_triage_at_gte:
        :param str filter_in_triage_at_lt:
        :param str filter_in_triage_at_lte:
        :param str sort: comma separated if needed. eg: created_at,updated_at
        :param str include: comma separated if needed. eg: sub_statuses,causes,subscribers
        :return: IncidentList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_incidents_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_incidents_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_incidents_with_http_info(self, **kwargs):  # noqa: E501
        """List incidents  # noqa: E501

        List incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_incidents_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_number:
        :param int page_size:
        :param str filter_search:
        :param str filter_kind:
        :param str filter_status:
        :param str filter_private:
        :param int filter_user_id:
        :param str filter_severity:
        :param str filter_severity_id:
        :param str filter_labels:
        :param str filter_types:
        :param str filter_type_ids:
        :param str filter_environments:
        :param str filter_environment_ids:
        :param str filter_functionalities:
        :param str filter_functionality_ids:
        :param str filter_services:
        :param str filter_service_ids:
        :param str filter_teams:
        :param str filter_team_ids:
        :param str filter_cause:
        :param str filter_cause_ids:
        :param str filter_custom_field_selected_option_ids:
        :param str filter_created_at_gt:
        :param str filter_created_at_gte:
        :param str filter_created_at_lt:
        :param str filter_created_at_lte:
        :param str filter_updated_at_gt:
        :param str filter_updated_at_gte:
        :param str filter_updated_at_lt:
        :param str filter_updated_at_lte:
        :param str filter_started_at_gt:
        :param str filter_started_at_gte:
        :param str filter_started_at_lt:
        :param str filter_started_at_lte:
        :param str filter_detected_at_gt:
        :param str filter_detected_at_gte:
        :param str filter_detected_at_lt:
        :param str filter_detected_at_lte:
        :param str filter_acknowledged_at_gt:
        :param str filter_acknowledged_at_gte:
        :param str filter_acknowledged_at_lt:
        :param str filter_acknowledged_at_lte:
        :param str filter_mitigated_at_gt:
        :param str filter_mitigated_at_gte:
        :param str filter_mitigated_at_lt:
        :param str filter_mitigated_at_lte:
        :param str filter_resolved_at_gt:
        :param str filter_resolved_at_gte:
        :param str filter_resolved_at_lt:
        :param str filter_resolved_at_lte:
        :param str filter_in_triage_at_gt:
        :param str filter_in_triage_at_gte:
        :param str filter_in_triage_at_lt:
        :param str filter_in_triage_at_lte:
        :param str sort: comma separated if needed. eg: created_at,updated_at
        :param str include: comma separated if needed. eg: sub_statuses,causes,subscribers
        :return: IncidentList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_number', 'page_size', 'filter_search', 'filter_kind', 'filter_status', 'filter_private', 'filter_user_id', 'filter_severity', 'filter_severity_id', 'filter_labels', 'filter_types', 'filter_type_ids', 'filter_environments', 'filter_environment_ids', 'filter_functionalities', 'filter_functionality_ids', 'filter_services', 'filter_service_ids', 'filter_teams', 'filter_team_ids', 'filter_cause', 'filter_cause_ids', 'filter_custom_field_selected_option_ids', 'filter_created_at_gt', 'filter_created_at_gte', 'filter_created_at_lt', 'filter_created_at_lte', 'filter_updated_at_gt', 'filter_updated_at_gte', 'filter_updated_at_lt', 'filter_updated_at_lte', 'filter_started_at_gt', 'filter_started_at_gte', 'filter_started_at_lt', 'filter_started_at_lte', 'filter_detected_at_gt', 'filter_detected_at_gte', 'filter_detected_at_lt', 'filter_detected_at_lte', 'filter_acknowledged_at_gt', 'filter_acknowledged_at_gte', 'filter_acknowledged_at_lt', 'filter_acknowledged_at_lte', 'filter_mitigated_at_gt', 'filter_mitigated_at_gte', 'filter_mitigated_at_lt', 'filter_mitigated_at_lte', 'filter_resolved_at_gt', 'filter_resolved_at_gte', 'filter_resolved_at_lt', 'filter_resolved_at_lte', 'filter_in_triage_at_gt', 'filter_in_triage_at_gte', 'filter_in_triage_at_lt', 'filter_in_triage_at_lte', 'sort', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_incidents" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_number' in params:
            query_params.append(('page[number]', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page[size]', params['page_size']))  # noqa: E501
        if 'filter_search' in params:
            query_params.append(('filter[search]', params['filter_search']))  # noqa: E501
        if 'filter_kind' in params:
            query_params.append(('filter[kind]', params['filter_kind']))  # noqa: E501
        if 'filter_status' in params:
            query_params.append(('filter[status]', params['filter_status']))  # noqa: E501
        if 'filter_private' in params:
            query_params.append(('filter[private]', params['filter_private']))  # noqa: E501
        if 'filter_user_id' in params:
            query_params.append(('filter[user_id]', params['filter_user_id']))  # noqa: E501
        if 'filter_severity' in params:
            query_params.append(('filter[severity]', params['filter_severity']))  # noqa: E501
        if 'filter_severity_id' in params:
            query_params.append(('filter[severity_id]', params['filter_severity_id']))  # noqa: E501
        if 'filter_labels' in params:
            query_params.append(('filter[labels]', params['filter_labels']))  # noqa: E501
        if 'filter_types' in params:
            query_params.append(('filter[types]', params['filter_types']))  # noqa: E501
        if 'filter_type_ids' in params:
            query_params.append(('filter[type_ids]', params['filter_type_ids']))  # noqa: E501
        if 'filter_environments' in params:
            query_params.append(('filter[environments]', params['filter_environments']))  # noqa: E501
        if 'filter_environment_ids' in params:
            query_params.append(('filter[environment_ids]', params['filter_environment_ids']))  # noqa: E501
        if 'filter_functionalities' in params:
            query_params.append(('filter[functionalities]', params['filter_functionalities']))  # noqa: E501
        if 'filter_functionality_ids' in params:
            query_params.append(('filter[functionality_ids]', params['filter_functionality_ids']))  # noqa: E501
        if 'filter_services' in params:
            query_params.append(('filter[services]', params['filter_services']))  # noqa: E501
        if 'filter_service_ids' in params:
            query_params.append(('filter[service_ids]', params['filter_service_ids']))  # noqa: E501
        if 'filter_teams' in params:
            query_params.append(('filter[teams]', params['filter_teams']))  # noqa: E501
        if 'filter_team_ids' in params:
            query_params.append(('filter[team_ids]', params['filter_team_ids']))  # noqa: E501
        if 'filter_cause' in params:
            query_params.append(('filter[cause]', params['filter_cause']))  # noqa: E501
        if 'filter_cause_ids' in params:
            query_params.append(('filter[cause_ids]', params['filter_cause_ids']))  # noqa: E501
        if 'filter_custom_field_selected_option_ids' in params:
            query_params.append(('filter[custom_field_selected_option_ids]', params['filter_custom_field_selected_option_ids']))  # noqa: E501
        if 'filter_created_at_gt' in params:
            query_params.append(('filter[created_at][gt]', params['filter_created_at_gt']))  # noqa: E501
        if 'filter_created_at_gte' in params:
            query_params.append(('filter[created_at][gte]', params['filter_created_at_gte']))  # noqa: E501
        if 'filter_created_at_lt' in params:
            query_params.append(('filter[created_at][lt]', params['filter_created_at_lt']))  # noqa: E501
        if 'filter_created_at_lte' in params:
            query_params.append(('filter[created_at][lte]', params['filter_created_at_lte']))  # noqa: E501
        if 'filter_updated_at_gt' in params:
            query_params.append(('filter[updated_at][gt]', params['filter_updated_at_gt']))  # noqa: E501
        if 'filter_updated_at_gte' in params:
            query_params.append(('filter[updated_at][gte]', params['filter_updated_at_gte']))  # noqa: E501
        if 'filter_updated_at_lt' in params:
            query_params.append(('filter[updated_at][lt]', params['filter_updated_at_lt']))  # noqa: E501
        if 'filter_updated_at_lte' in params:
            query_params.append(('filter[updated_at][lte]', params['filter_updated_at_lte']))  # noqa: E501
        if 'filter_started_at_gt' in params:
            query_params.append(('filter[started_at][gt]', params['filter_started_at_gt']))  # noqa: E501
        if 'filter_started_at_gte' in params:
            query_params.append(('filter[started_at][gte]', params['filter_started_at_gte']))  # noqa: E501
        if 'filter_started_at_lt' in params:
            query_params.append(('filter[started_at][lt]', params['filter_started_at_lt']))  # noqa: E501
        if 'filter_started_at_lte' in params:
            query_params.append(('filter[started_at][lte]', params['filter_started_at_lte']))  # noqa: E501
        if 'filter_detected_at_gt' in params:
            query_params.append(('filter[detected_at][gt]', params['filter_detected_at_gt']))  # noqa: E501
        if 'filter_detected_at_gte' in params:
            query_params.append(('filter[detected_at][gte]', params['filter_detected_at_gte']))  # noqa: E501
        if 'filter_detected_at_lt' in params:
            query_params.append(('filter[detected_at][lt]', params['filter_detected_at_lt']))  # noqa: E501
        if 'filter_detected_at_lte' in params:
            query_params.append(('filter[detected_at][lte]', params['filter_detected_at_lte']))  # noqa: E501
        if 'filter_acknowledged_at_gt' in params:
            query_params.append(('filter[acknowledged_at][gt]', params['filter_acknowledged_at_gt']))  # noqa: E501
        if 'filter_acknowledged_at_gte' in params:
            query_params.append(('filter[acknowledged_at][gte]', params['filter_acknowledged_at_gte']))  # noqa: E501
        if 'filter_acknowledged_at_lt' in params:
            query_params.append(('filter[acknowledged_at][lt]', params['filter_acknowledged_at_lt']))  # noqa: E501
        if 'filter_acknowledged_at_lte' in params:
            query_params.append(('filter[acknowledged_at][lte]', params['filter_acknowledged_at_lte']))  # noqa: E501
        if 'filter_mitigated_at_gt' in params:
            query_params.append(('filter[mitigated_at][gt]', params['filter_mitigated_at_gt']))  # noqa: E501
        if 'filter_mitigated_at_gte' in params:
            query_params.append(('filter[mitigated_at][gte]', params['filter_mitigated_at_gte']))  # noqa: E501
        if 'filter_mitigated_at_lt' in params:
            query_params.append(('filter[mitigated_at][lt]', params['filter_mitigated_at_lt']))  # noqa: E501
        if 'filter_mitigated_at_lte' in params:
            query_params.append(('filter[mitigated_at][lte]', params['filter_mitigated_at_lte']))  # noqa: E501
        if 'filter_resolved_at_gt' in params:
            query_params.append(('filter[resolved_at][gt]', params['filter_resolved_at_gt']))  # noqa: E501
        if 'filter_resolved_at_gte' in params:
            query_params.append(('filter[resolved_at][gte]', params['filter_resolved_at_gte']))  # noqa: E501
        if 'filter_resolved_at_lt' in params:
            query_params.append(('filter[resolved_at][lt]', params['filter_resolved_at_lt']))  # noqa: E501
        if 'filter_resolved_at_lte' in params:
            query_params.append(('filter[resolved_at][lte]', params['filter_resolved_at_lte']))  # noqa: E501
        if 'filter_in_triage_at_gt' in params:
            query_params.append(('filter[in_triage_at][gt]', params['filter_in_triage_at_gt']))  # noqa: E501
        if 'filter_in_triage_at_gte' in params:
            query_params.append(('filter[in_triage_at][gte]', params['filter_in_triage_at_gte']))  # noqa: E501
        if 'filter_in_triage_at_lt' in params:
            query_params.append(('filter[in_triage_at][lt]', params['filter_in_triage_at_lt']))  # noqa: E501
        if 'filter_in_triage_at_lte' in params:
            query_params.append(('filter[in_triage_at][lte]', params['filter_in_triage_at_lte']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_as_duplicate_incident(self, body, id, **kwargs):  # noqa: E501
        """Mark an incident as a duplicate  # noqa: E501

        Mark an incident as a duplicate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_as_duplicate_incident(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResolveIncident body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_as_duplicate_incident_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_as_duplicate_incident_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def mark_as_duplicate_incident_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Mark an incident as a duplicate  # noqa: E501

        Mark an incident as a duplicate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_as_duplicate_incident_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResolveIncident body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_as_duplicate_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `mark_as_duplicate_incident`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `mark_as_duplicate_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{id}/duplicate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mitigate_incident(self, body, id, **kwargs):  # noqa: E501
        """Mitigate an incident  # noqa: E501

        Mitigate a specific incident by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mitigate_incident(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MitigateIncident body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mitigate_incident_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.mitigate_incident_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def mitigate_incident_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Mitigate an incident  # noqa: E501

        Mitigate a specific incident by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mitigate_incident_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MitigateIncident body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mitigate_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `mitigate_incident`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `mitigate_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{id}/mitigate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_assigned_user_from_incident(self, body, id, **kwargs):  # noqa: E501
        """Remove assigned user from incident  # noqa: E501

        Remove assigned user from incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_assigned_user_from_incident(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnassignRoleFromUser body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_assigned_user_from_incident_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_assigned_user_from_incident_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def remove_assigned_user_from_incident_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Remove assigned user from incident  # noqa: E501

        Remove assigned user from incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_assigned_user_from_incident_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnassignRoleFromUser body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_assigned_user_from_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `remove_assigned_user_from_incident`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_assigned_user_from_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{id}/unassign_role_from_user', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_subscribers_to_incident(self, body, id, **kwargs):  # noqa: E501
        """Remove subscribers from incident  # noqa: E501

        Remove subscribers to incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_subscribers_to_incident(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveSubscribers body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_subscribers_to_incident_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_subscribers_to_incident_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def remove_subscribers_to_incident_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Remove subscribers from incident  # noqa: E501

        Remove subscribers to incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_subscribers_to_incident_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveSubscribers body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_subscribers_to_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `remove_subscribers_to_incident`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_subscribers_to_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{id}/remove_subscribers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resolve_incident(self, body, id, **kwargs):  # noqa: E501
        """Resolve an incident  # noqa: E501

        Resolve a specific incident by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resolve_incident(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResolveIncident body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resolve_incident_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.resolve_incident_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def resolve_incident_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Resolve an incident  # noqa: E501

        Resolve a specific incident by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resolve_incident_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResolveIncident body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resolve_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `resolve_incident`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resolve_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{id}/resolve', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restart_incident(self, body, id, **kwargs):  # noqa: E501
        """Restart an incident  # noqa: E501

        Restart a specific incident by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_incident(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RestartIncident body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restart_incident_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.restart_incident_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def restart_incident_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Restart an incident  # noqa: E501

        Restart a specific incident by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_incident_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RestartIncident body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restart_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `restart_incident`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `restart_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{id}/restart', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def triage_incident(self, body, id, **kwargs):  # noqa: E501
        """Triage an incident  # noqa: E501

        Set a specific incident by ID to triage state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.triage_incident(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InTriageIncident body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.triage_incident_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.triage_incident_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def triage_incident_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Triage an incident  # noqa: E501

        Set a specific incident by ID to triage state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.triage_incident_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InTriageIncident body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method triage_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `triage_incident`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `triage_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{id}/in_triage', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_incident(self, body, id, **kwargs):  # noqa: E501
        """Update a incident  # noqa: E501

        Update a specific incident by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_incident(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateIncident body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_incident_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_incident_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_incident_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update a incident  # noqa: E501

        Update a specific incident by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_incident_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateIncident body: (required)
        :param str id: (required)
        :return: IncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_incident`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
