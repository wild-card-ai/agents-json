# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Audit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event': 'str',
        'item_type': 'str',
        'object': 'object',
        'object_changes': 'object',
        'user_id': 'int',
        'created_at': 'str',
        'item_id': 'str',
        'id': 'int'
    }

    attribute_map = {
        'event': 'event',
        'item_type': 'item_type',
        'object': 'object',
        'object_changes': 'object_changes',
        'user_id': 'user_id',
        'created_at': 'created_at',
        'item_id': 'item_id',
        'id': 'id'
    }

    def __init__(self, event=None, item_type=None, object=None, object_changes=None, user_id=None, created_at=None, item_id=None, id=None):  # noqa: E501
        """Audit - a model defined in Swagger"""  # noqa: E501
        self._event = None
        self._item_type = None
        self._object = None
        self._object_changes = None
        self._user_id = None
        self._created_at = None
        self._item_id = None
        self._id = None
        self.discriminator = None
        self.event = event
        if item_type is not None:
            self.item_type = item_type
        if object is not None:
            self.object = object
        if object_changes is not None:
            self.object_changes = object_changes
        if user_id is not None:
            self.user_id = user_id
        self.created_at = created_at
        if item_id is not None:
            self.item_id = item_id
        if id is not None:
            self.id = id

    @property
    def event(self):
        """Gets the event of this Audit.  # noqa: E501

        Describes the action that was taken.  # noqa: E501

        :return: The event of this Audit.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Audit.

        Describes the action that was taken.  # noqa: E501

        :param event: The event of this Audit.  # noqa: E501
        :type: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501

        self._event = event

    @property
    def item_type(self):
        """Gets the item_type of this Audit.  # noqa: E501

        Describes the object in which the action was taken on  # noqa: E501

        :return: The item_type of this Audit.  # noqa: E501
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this Audit.

        Describes the object in which the action was taken on  # noqa: E501

        :param item_type: The item_type of this Audit.  # noqa: E501
        :type: str
        """
        allowed_values = ["Cause", "CustomField", "CustomFieldOption", "CustomForm", "Dashboard", "Environment", "EscalationPolicy", "EscalationPolicyPath", "ExportJob", "FormField", "Functionality", "GeniusWorkflow", "GeniusWorkflowGroup", "GeniusWorkflowRun", "Group", "Heartbeat", "Incident", "IncidentActionItem", "IncidentEvent", "IncidentFormFieldSelection", "IncidentFormFieldSelectionUser", "IncidentPostMortem", "IncidentRoleAssignment", "IncidentRoleTask", "IncidentStatusPageEvent", "IncidentTask", "IncidentType", "LiveCallRouter", "OnCallRole", "Playbook", "PlaybookTask", "Role", "Schedule", "Service", "Severity", "StatusPage"]  # noqa: E501
        if item_type not in allowed_values:
            raise ValueError(
                "Invalid value for `item_type` ({0}), must be one of {1}"  # noqa: E501
                .format(item_type, allowed_values)
            )

        self._item_type = item_type

    @property
    def object(self):
        """Gets the object of this Audit.  # noqa: E501

        The object in which the action was taken on  # noqa: E501

        :return: The object of this Audit.  # noqa: E501
        :rtype: object
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Audit.

        The object in which the action was taken on  # noqa: E501

        :param object: The object of this Audit.  # noqa: E501
        :type: object
        """

        self._object = object

    @property
    def object_changes(self):
        """Gets the object_changes of this Audit.  # noqa: E501

        The changes that occurred on the object  # noqa: E501

        :return: The object_changes of this Audit.  # noqa: E501
        :rtype: object
        """
        return self._object_changes

    @object_changes.setter
    def object_changes(self, object_changes):
        """Sets the object_changes of this Audit.

        The changes that occurred on the object  # noqa: E501

        :param object_changes: The object_changes of this Audit.  # noqa: E501
        :type: object
        """

        self._object_changes = object_changes

    @property
    def user_id(self):
        """Gets the user_id of this Audit.  # noqa: E501

        The ID of who took action on the object. Together with whodunnit_type can be used to find the user  # noqa: E501

        :return: The user_id of this Audit.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Audit.

        The ID of who took action on the object. Together with whodunnit_type can be used to find the user  # noqa: E501

        :param user_id: The user_id of this Audit.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def created_at(self):
        """Gets the created_at of this Audit.  # noqa: E501

        Date of creation  # noqa: E501

        :return: The created_at of this Audit.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Audit.

        Date of creation  # noqa: E501

        :param created_at: The created_at of this Audit.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def item_id(self):
        """Gets the item_id of this Audit.  # noqa: E501

        ID of the affected object  # noqa: E501

        :return: The item_id of this Audit.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Audit.

        ID of the affected object  # noqa: E501

        :param item_id: The item_id of this Audit.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def id(self):
        """Gets the id of this Audit.  # noqa: E501

        ID of audit  # noqa: E501

        :return: The id of this Audit.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Audit.

        ID of audit  # noqa: E501

        :param id: The id of this Audit.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Audit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Audit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
