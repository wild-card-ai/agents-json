# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fully_enabled': 'bool',
        'applies_to_unassigned': 'bool',
        'create_enabled': 'bool',
        'severity_ids': 'list[str]'
    }

    attribute_map = {
        'fully_enabled': 'fully_enabled',
        'applies_to_unassigned': 'applies_to_unassigned',
        'create_enabled': 'create_enabled',
        'severity_ids': 'severity_ids'
    }

    def __init__(self, fully_enabled=True, applies_to_unassigned=True, create_enabled=False, severity_ids=None):  # noqa: E501
        """UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams - a model defined in Swagger"""  # noqa: E501
        self._fully_enabled = None
        self._applies_to_unassigned = None
        self._create_enabled = None
        self._severity_ids = None
        self.discriminator = None
        if fully_enabled is not None:
            self.fully_enabled = fully_enabled
        if applies_to_unassigned is not None:
            self.applies_to_unassigned = applies_to_unassigned
        if create_enabled is not None:
            self.create_enabled = create_enabled
        if severity_ids is not None:
            self.severity_ids = severity_ids

    @property
    def fully_enabled(self):
        """Gets the fully_enabled of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.  # noqa: E501

        Whether permissions are enabled for any severity incident  # noqa: E501

        :return: The fully_enabled of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.  # noqa: E501
        :rtype: bool
        """
        return self._fully_enabled

    @fully_enabled.setter
    def fully_enabled(self, fully_enabled):
        """Sets the fully_enabled of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.

        Whether permissions are enabled for any severity incident  # noqa: E501

        :param fully_enabled: The fully_enabled of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.  # noqa: E501
        :type: bool
        """

        self._fully_enabled = fully_enabled

    @property
    def applies_to_unassigned(self):
        """Gets the applies_to_unassigned of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.  # noqa: E501

        Whether permissions are enabled for incident without severity  # noqa: E501

        :return: The applies_to_unassigned of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.  # noqa: E501
        :rtype: bool
        """
        return self._applies_to_unassigned

    @applies_to_unassigned.setter
    def applies_to_unassigned(self, applies_to_unassigned):
        """Sets the applies_to_unassigned of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.

        Whether permissions are enabled for incident without severity  # noqa: E501

        :param applies_to_unassigned: The applies_to_unassigned of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.  # noqa: E501
        :type: bool
        """

        self._applies_to_unassigned = applies_to_unassigned

    @property
    def create_enabled(self):
        """Gets the create_enabled of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.  # noqa: E501

        Whether permissions are enabled when creating incident  # noqa: E501

        :return: The create_enabled of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.  # noqa: E501
        :rtype: bool
        """
        return self._create_enabled

    @create_enabled.setter
    def create_enabled(self, create_enabled):
        """Sets the create_enabled of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.

        Whether permissions are enabled when creating incident  # noqa: E501

        :param create_enabled: The create_enabled of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.  # noqa: E501
        :type: bool
        """

        self._create_enabled = create_enabled

    @property
    def severity_ids(self):
        """Gets the severity_ids of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.  # noqa: E501

        Severity ids that determine if an incident is permitted based on matching severity  # noqa: E501

        :return: The severity_ids of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._severity_ids

    @severity_ids.setter
    def severity_ids(self, severity_ids):
        """Sets the severity_ids of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.

        Severity ids that determine if an incident is permitted based on matching severity  # noqa: E501

        :param severity_ids: The severity_ids of this UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams.  # noqa: E501
        :type: list[str]
        """

        self._severity_ids = severity_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateIncidentPermissionSetBooleanDataAttributesSeverityParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
