# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewCustomFieldDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'str',
        'description': 'str',
        'shown': 'list[str]',
        'required': 'list[str]',
        'default': 'str',
        'position': 'int'
    }

    attribute_map = {
        'label': 'label',
        'description': 'description',
        'shown': 'shown',
        'required': 'required',
        'default': 'default',
        'position': 'position'
    }

    def __init__(self, label=None, description=None, shown=None, required=None, default=None, position=None):  # noqa: E501
        """NewCustomFieldDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._label = None
        self._description = None
        self._shown = None
        self._required = None
        self._default = None
        self._position = None
        self.discriminator = None
        self.label = label
        if description is not None:
            self.description = description
        if shown is not None:
            self.shown = shown
        if required is not None:
            self.required = required
        if default is not None:
            self.default = default
        if position is not None:
            self.position = position

    @property
    def label(self):
        """Gets the label of this NewCustomFieldDataAttributes.  # noqa: E501

        The name of the custom_field  # noqa: E501

        :return: The label of this NewCustomFieldDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this NewCustomFieldDataAttributes.

        The name of the custom_field  # noqa: E501

        :param label: The label of this NewCustomFieldDataAttributes.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def description(self):
        """Gets the description of this NewCustomFieldDataAttributes.  # noqa: E501

        The description of the custom_field  # noqa: E501

        :return: The description of this NewCustomFieldDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewCustomFieldDataAttributes.

        The description of the custom_field  # noqa: E501

        :param description: The description of this NewCustomFieldDataAttributes.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def shown(self):
        """Gets the shown of this NewCustomFieldDataAttributes.  # noqa: E501


        :return: The shown of this NewCustomFieldDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._shown

    @shown.setter
    def shown(self, shown):
        """Sets the shown of this NewCustomFieldDataAttributes.


        :param shown: The shown of this NewCustomFieldDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["incident_form", "incident_mitigation_form", "incident_resolution_form", "incident_post_mortem_form", "incident_slack_form", "incident_mitigation_slack_form", "incident_resolution_slack_form", "incident_post_mortem"]  # noqa: E501
        if not set(shown).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `shown` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(shown) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._shown = shown

    @property
    def required(self):
        """Gets the required of this NewCustomFieldDataAttributes.  # noqa: E501


        :return: The required of this NewCustomFieldDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this NewCustomFieldDataAttributes.


        :param required: The required of this NewCustomFieldDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["incident_form", "incident_mitigation_form", "incident_resolution_form", "incident_post_mortem_form", "incident_slack_form", "incident_mitigation_slack_form", "incident_resolution_slack_form"]  # noqa: E501
        if not set(required).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `required` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(required) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._required = required

    @property
    def default(self):
        """Gets the default of this NewCustomFieldDataAttributes.  # noqa: E501

        The default value for text field kinds  # noqa: E501

        :return: The default of this NewCustomFieldDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this NewCustomFieldDataAttributes.

        The default value for text field kinds  # noqa: E501

        :param default: The default of this NewCustomFieldDataAttributes.  # noqa: E501
        :type: str
        """

        self._default = default

    @property
    def position(self):
        """Gets the position of this NewCustomFieldDataAttributes.  # noqa: E501

        The position of the custom_field  # noqa: E501

        :return: The position of this NewCustomFieldDataAttributes.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this NewCustomFieldDataAttributes.

        The position of the custom_field  # noqa: E501

        :param position: The position of this NewCustomFieldDataAttributes.  # noqa: E501
        :type: int
        """

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewCustomFieldDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewCustomFieldDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
