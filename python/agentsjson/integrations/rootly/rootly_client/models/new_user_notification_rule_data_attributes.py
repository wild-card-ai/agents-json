# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewUserNotificationRuleDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delay': 'int',
        'position': 'int',
        'user_email_address_id': 'str',
        'user_call_number_id': 'str',
        'user_sms_number_id': 'str',
        'user_device_id': 'str',
        'enabled_contact_types': 'list[str]'
    }

    attribute_map = {
        'delay': 'delay',
        'position': 'position',
        'user_email_address_id': 'user_email_address_id',
        'user_call_number_id': 'user_call_number_id',
        'user_sms_number_id': 'user_sms_number_id',
        'user_device_id': 'user_device_id',
        'enabled_contact_types': 'enabled_contact_types'
    }

    def __init__(self, delay=None, position=None, user_email_address_id=None, user_call_number_id=None, user_sms_number_id=None, user_device_id=None, enabled_contact_types=None):  # noqa: E501
        """NewUserNotificationRuleDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._delay = None
        self._position = None
        self._user_email_address_id = None
        self._user_call_number_id = None
        self._user_sms_number_id = None
        self._user_device_id = None
        self._enabled_contact_types = None
        self.discriminator = None
        if delay is not None:
            self.delay = delay
        if position is not None:
            self.position = position
        if user_email_address_id is not None:
            self.user_email_address_id = user_email_address_id
        if user_call_number_id is not None:
            self.user_call_number_id = user_call_number_id
        if user_sms_number_id is not None:
            self.user_sms_number_id = user_sms_number_id
        if user_device_id is not None:
            self.user_device_id = user_device_id
        self.enabled_contact_types = enabled_contact_types

    @property
    def delay(self):
        """Gets the delay of this NewUserNotificationRuleDataAttributes.  # noqa: E501

        Delay after which rule gets triggered  # noqa: E501

        :return: The delay of this NewUserNotificationRuleDataAttributes.  # noqa: E501
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this NewUserNotificationRuleDataAttributes.

        Delay after which rule gets triggered  # noqa: E501

        :param delay: The delay of this NewUserNotificationRuleDataAttributes.  # noqa: E501
        :type: int
        """

        self._delay = delay

    @property
    def position(self):
        """Gets the position of this NewUserNotificationRuleDataAttributes.  # noqa: E501

        Position of the rule  # noqa: E501

        :return: The position of this NewUserNotificationRuleDataAttributes.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this NewUserNotificationRuleDataAttributes.

        Position of the rule  # noqa: E501

        :param position: The position of this NewUserNotificationRuleDataAttributes.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def user_email_address_id(self):
        """Gets the user_email_address_id of this NewUserNotificationRuleDataAttributes.  # noqa: E501

        User email address to which notification to be sent  # noqa: E501

        :return: The user_email_address_id of this NewUserNotificationRuleDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._user_email_address_id

    @user_email_address_id.setter
    def user_email_address_id(self, user_email_address_id):
        """Sets the user_email_address_id of this NewUserNotificationRuleDataAttributes.

        User email address to which notification to be sent  # noqa: E501

        :param user_email_address_id: The user_email_address_id of this NewUserNotificationRuleDataAttributes.  # noqa: E501
        :type: str
        """

        self._user_email_address_id = user_email_address_id

    @property
    def user_call_number_id(self):
        """Gets the user_call_number_id of this NewUserNotificationRuleDataAttributes.  # noqa: E501

        User phone number to which notification to be sent  # noqa: E501

        :return: The user_call_number_id of this NewUserNotificationRuleDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._user_call_number_id

    @user_call_number_id.setter
    def user_call_number_id(self, user_call_number_id):
        """Sets the user_call_number_id of this NewUserNotificationRuleDataAttributes.

        User phone number to which notification to be sent  # noqa: E501

        :param user_call_number_id: The user_call_number_id of this NewUserNotificationRuleDataAttributes.  # noqa: E501
        :type: str
        """

        self._user_call_number_id = user_call_number_id

    @property
    def user_sms_number_id(self):
        """Gets the user_sms_number_id of this NewUserNotificationRuleDataAttributes.  # noqa: E501

        User sms number to which notification to be sent  # noqa: E501

        :return: The user_sms_number_id of this NewUserNotificationRuleDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._user_sms_number_id

    @user_sms_number_id.setter
    def user_sms_number_id(self, user_sms_number_id):
        """Sets the user_sms_number_id of this NewUserNotificationRuleDataAttributes.

        User sms number to which notification to be sent  # noqa: E501

        :param user_sms_number_id: The user_sms_number_id of this NewUserNotificationRuleDataAttributes.  # noqa: E501
        :type: str
        """

        self._user_sms_number_id = user_sms_number_id

    @property
    def user_device_id(self):
        """Gets the user_device_id of this NewUserNotificationRuleDataAttributes.  # noqa: E501

        User device to which notification to be sent  # noqa: E501

        :return: The user_device_id of this NewUserNotificationRuleDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._user_device_id

    @user_device_id.setter
    def user_device_id(self, user_device_id):
        """Sets the user_device_id of this NewUserNotificationRuleDataAttributes.

        User device to which notification to be sent  # noqa: E501

        :param user_device_id: The user_device_id of this NewUserNotificationRuleDataAttributes.  # noqa: E501
        :type: str
        """

        self._user_device_id = user_device_id

    @property
    def enabled_contact_types(self):
        """Gets the enabled_contact_types of this NewUserNotificationRuleDataAttributes.  # noqa: E501

        Contact types for which notification needs to be enabled  # noqa: E501

        :return: The enabled_contact_types of this NewUserNotificationRuleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._enabled_contact_types

    @enabled_contact_types.setter
    def enabled_contact_types(self, enabled_contact_types):
        """Sets the enabled_contact_types of this NewUserNotificationRuleDataAttributes.

        Contact types for which notification needs to be enabled  # noqa: E501

        :param enabled_contact_types: The enabled_contact_types of this NewUserNotificationRuleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        if enabled_contact_types is None:
            raise ValueError("Invalid value for `enabled_contact_types`, must not be `None`")  # noqa: E501
        allowed_values = ["email", "sms", "call", "device", "non_critical_device"]  # noqa: E501
        if not set(enabled_contact_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `enabled_contact_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(enabled_contact_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._enabled_contact_types = enabled_contact_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewUserNotificationRuleDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewUserNotificationRuleDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
