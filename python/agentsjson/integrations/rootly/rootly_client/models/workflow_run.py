# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowRun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workflow_id': 'str',
        'status': 'str',
        'status_message': 'str',
        'triggered_by': 'str',
        'started_at': 'str',
        'completed_at': 'str',
        'failed_at': 'str',
        'canceled_at': 'str',
        'incident_id': 'str',
        'post_mortem_id': 'str',
        'action_item_id': 'str',
        'alert_id': 'str',
        'pulse_id': 'str',
        'context': 'dict(str, object)'
    }

    attribute_map = {
        'workflow_id': 'workflow_id',
        'status': 'status',
        'status_message': 'status_message',
        'triggered_by': 'triggered_by',
        'started_at': 'started_at',
        'completed_at': 'completed_at',
        'failed_at': 'failed_at',
        'canceled_at': 'canceled_at',
        'incident_id': 'incident_id',
        'post_mortem_id': 'post_mortem_id',
        'action_item_id': 'action_item_id',
        'alert_id': 'alert_id',
        'pulse_id': 'pulse_id',
        'context': 'context'
    }

    def __init__(self, workflow_id=None, status=None, status_message=None, triggered_by=None, started_at=None, completed_at=None, failed_at=None, canceled_at=None, incident_id=None, post_mortem_id=None, action_item_id=None, alert_id=None, pulse_id=None, context=None):  # noqa: E501
        """WorkflowRun - a model defined in Swagger"""  # noqa: E501
        self._workflow_id = None
        self._status = None
        self._status_message = None
        self._triggered_by = None
        self._started_at = None
        self._completed_at = None
        self._failed_at = None
        self._canceled_at = None
        self._incident_id = None
        self._post_mortem_id = None
        self._action_item_id = None
        self._alert_id = None
        self._pulse_id = None
        self._context = None
        self.discriminator = None
        self.workflow_id = workflow_id
        self.status = status
        if status_message is not None:
            self.status_message = status_message
        self.triggered_by = triggered_by
        if started_at is not None:
            self.started_at = started_at
        if completed_at is not None:
            self.completed_at = completed_at
        if failed_at is not None:
            self.failed_at = failed_at
        if canceled_at is not None:
            self.canceled_at = canceled_at
        if incident_id is not None:
            self.incident_id = incident_id
        if post_mortem_id is not None:
            self.post_mortem_id = post_mortem_id
        if action_item_id is not None:
            self.action_item_id = action_item_id
        if alert_id is not None:
            self.alert_id = alert_id
        if pulse_id is not None:
            self.pulse_id = pulse_id
        if context is not None:
            self.context = context

    @property
    def workflow_id(self):
        """Gets the workflow_id of this WorkflowRun.  # noqa: E501


        :return: The workflow_id of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this WorkflowRun.


        :param workflow_id: The workflow_id of this WorkflowRun.  # noqa: E501
        :type: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")  # noqa: E501

        self._workflow_id = workflow_id

    @property
    def status(self):
        """Gets the status of this WorkflowRun.  # noqa: E501


        :return: The status of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowRun.


        :param status: The status of this WorkflowRun.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["queued", "started", "completed", "completed_with_errors", "failed", "canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this WorkflowRun.  # noqa: E501


        :return: The status_message of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this WorkflowRun.


        :param status_message: The status_message of this WorkflowRun.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    @property
    def triggered_by(self):
        """Gets the triggered_by of this WorkflowRun.  # noqa: E501


        :return: The triggered_by of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._triggered_by

    @triggered_by.setter
    def triggered_by(self, triggered_by):
        """Sets the triggered_by of this WorkflowRun.


        :param triggered_by: The triggered_by of this WorkflowRun.  # noqa: E501
        :type: str
        """
        if triggered_by is None:
            raise ValueError("Invalid value for `triggered_by`, must not be `None`")  # noqa: E501
        allowed_values = ["system", "user"]  # noqa: E501
        if triggered_by not in allowed_values:
            raise ValueError(
                "Invalid value for `triggered_by` ({0}), must be one of {1}"  # noqa: E501
                .format(triggered_by, allowed_values)
            )

        self._triggered_by = triggered_by

    @property
    def started_at(self):
        """Gets the started_at of this WorkflowRun.  # noqa: E501


        :return: The started_at of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this WorkflowRun.


        :param started_at: The started_at of this WorkflowRun.  # noqa: E501
        :type: str
        """

        self._started_at = started_at

    @property
    def completed_at(self):
        """Gets the completed_at of this WorkflowRun.  # noqa: E501


        :return: The completed_at of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this WorkflowRun.


        :param completed_at: The completed_at of this WorkflowRun.  # noqa: E501
        :type: str
        """

        self._completed_at = completed_at

    @property
    def failed_at(self):
        """Gets the failed_at of this WorkflowRun.  # noqa: E501


        :return: The failed_at of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._failed_at

    @failed_at.setter
    def failed_at(self, failed_at):
        """Sets the failed_at of this WorkflowRun.


        :param failed_at: The failed_at of this WorkflowRun.  # noqa: E501
        :type: str
        """

        self._failed_at = failed_at

    @property
    def canceled_at(self):
        """Gets the canceled_at of this WorkflowRun.  # noqa: E501


        :return: The canceled_at of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._canceled_at

    @canceled_at.setter
    def canceled_at(self, canceled_at):
        """Sets the canceled_at of this WorkflowRun.


        :param canceled_at: The canceled_at of this WorkflowRun.  # noqa: E501
        :type: str
        """

        self._canceled_at = canceled_at

    @property
    def incident_id(self):
        """Gets the incident_id of this WorkflowRun.  # noqa: E501


        :return: The incident_id of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._incident_id

    @incident_id.setter
    def incident_id(self, incident_id):
        """Sets the incident_id of this WorkflowRun.


        :param incident_id: The incident_id of this WorkflowRun.  # noqa: E501
        :type: str
        """

        self._incident_id = incident_id

    @property
    def post_mortem_id(self):
        """Gets the post_mortem_id of this WorkflowRun.  # noqa: E501


        :return: The post_mortem_id of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._post_mortem_id

    @post_mortem_id.setter
    def post_mortem_id(self, post_mortem_id):
        """Sets the post_mortem_id of this WorkflowRun.


        :param post_mortem_id: The post_mortem_id of this WorkflowRun.  # noqa: E501
        :type: str
        """

        self._post_mortem_id = post_mortem_id

    @property
    def action_item_id(self):
        """Gets the action_item_id of this WorkflowRun.  # noqa: E501


        :return: The action_item_id of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._action_item_id

    @action_item_id.setter
    def action_item_id(self, action_item_id):
        """Sets the action_item_id of this WorkflowRun.


        :param action_item_id: The action_item_id of this WorkflowRun.  # noqa: E501
        :type: str
        """

        self._action_item_id = action_item_id

    @property
    def alert_id(self):
        """Gets the alert_id of this WorkflowRun.  # noqa: E501


        :return: The alert_id of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this WorkflowRun.


        :param alert_id: The alert_id of this WorkflowRun.  # noqa: E501
        :type: str
        """

        self._alert_id = alert_id

    @property
    def pulse_id(self):
        """Gets the pulse_id of this WorkflowRun.  # noqa: E501


        :return: The pulse_id of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._pulse_id

    @pulse_id.setter
    def pulse_id(self, pulse_id):
        """Sets the pulse_id of this WorkflowRun.


        :param pulse_id: The pulse_id of this WorkflowRun.  # noqa: E501
        :type: str
        """

        self._pulse_id = pulse_id

    @property
    def context(self):
        """Gets the context of this WorkflowRun.  # noqa: E501


        :return: The context of this WorkflowRun.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this WorkflowRun.


        :param context: The context of this WorkflowRun.  # noqa: E501
        :type: dict(str, object)
        """

        self._context = context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowRun, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
