# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TriggerWorkflowTaskParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_type': 'str',
        'kind': 'str',
        'attribute_to_query_by': 'str',
        'resource': 'AddActionItemTaskParamsPostToSlackChannels',
        'workflow': 'AddActionItemTaskParamsPostToSlackChannels',
        'check_workflow_conditions': 'bool'
    }

    attribute_map = {
        'task_type': 'task_type',
        'kind': 'kind',
        'attribute_to_query_by': 'attribute_to_query_by',
        'resource': 'resource',
        'workflow': 'workflow',
        'check_workflow_conditions': 'check_workflow_conditions'
    }

    def __init__(self, task_type=None, kind='incident', attribute_to_query_by='id', resource=None, workflow=None, check_workflow_conditions=None):  # noqa: E501
        """TriggerWorkflowTaskParams - a model defined in Swagger"""  # noqa: E501
        self._task_type = None
        self._kind = None
        self._attribute_to_query_by = None
        self._resource = None
        self._workflow = None
        self._check_workflow_conditions = None
        self.discriminator = None
        if task_type is not None:
            self.task_type = task_type
        self.kind = kind
        self.attribute_to_query_by = attribute_to_query_by
        self.resource = resource
        self.workflow = workflow
        if check_workflow_conditions is not None:
            self.check_workflow_conditions = check_workflow_conditions

    @property
    def task_type(self):
        """Gets the task_type of this TriggerWorkflowTaskParams.  # noqa: E501


        :return: The task_type of this TriggerWorkflowTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this TriggerWorkflowTaskParams.


        :param task_type: The task_type of this TriggerWorkflowTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["trigger_workflow"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def kind(self):
        """Gets the kind of this TriggerWorkflowTaskParams.  # noqa: E501


        :return: The kind of this TriggerWorkflowTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this TriggerWorkflowTaskParams.


        :param kind: The kind of this TriggerWorkflowTaskParams.  # noqa: E501
        :type: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        allowed_values = ["incident", "post_mortem", "action_item", "pulse", "alert"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def attribute_to_query_by(self):
        """Gets the attribute_to_query_by of this TriggerWorkflowTaskParams.  # noqa: E501

        [\"(incident) kind can only match [:id, :slug, :sequential_id, :pagerduty_incident_id, :opsgenie_incident_id, :victor_ops_incident_id, :jira_issue_id, :asana_task_id, :shortcut_task_id, :linear_issue_id, :zendesk_ticket_id, :motion_task_id, :trello_card_id, :airtable_record_id, :shortcut_story_id, :github_issue_id, :freshservice_ticket_id, :freshservice_task_id, :clickup_task_id]\", \"(post_mortem) kind can only match [:id]\", \"(action_item) kind can only match [:id, :jira_issue_id, :asana_task_id, :shortcut_task_id, :linear_issue_id, :zendesk_ticket_id, :motion_task_id, :trello_card_id, :airtable_record_id, :shortcut_story_id, :github_issue_id, :freshservice_ticket_id, :freshservice_task_id, :clickup_task_id]\", \"(pulse) kind can only match [:id]\", \"(alert) kind can only match [:id]\"]  # noqa: E501

        :return: The attribute_to_query_by of this TriggerWorkflowTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._attribute_to_query_by

    @attribute_to_query_by.setter
    def attribute_to_query_by(self, attribute_to_query_by):
        """Sets the attribute_to_query_by of this TriggerWorkflowTaskParams.

        [\"(incident) kind can only match [:id, :slug, :sequential_id, :pagerduty_incident_id, :opsgenie_incident_id, :victor_ops_incident_id, :jira_issue_id, :asana_task_id, :shortcut_task_id, :linear_issue_id, :zendesk_ticket_id, :motion_task_id, :trello_card_id, :airtable_record_id, :shortcut_story_id, :github_issue_id, :freshservice_ticket_id, :freshservice_task_id, :clickup_task_id]\", \"(post_mortem) kind can only match [:id]\", \"(action_item) kind can only match [:id, :jira_issue_id, :asana_task_id, :shortcut_task_id, :linear_issue_id, :zendesk_ticket_id, :motion_task_id, :trello_card_id, :airtable_record_id, :shortcut_story_id, :github_issue_id, :freshservice_ticket_id, :freshservice_task_id, :clickup_task_id]\", \"(pulse) kind can only match [:id]\", \"(alert) kind can only match [:id]\"]  # noqa: E501

        :param attribute_to_query_by: The attribute_to_query_by of this TriggerWorkflowTaskParams.  # noqa: E501
        :type: str
        """
        if attribute_to_query_by is None:
            raise ValueError("Invalid value for `attribute_to_query_by`, must not be `None`")  # noqa: E501
        allowed_values = ["id", "slug", "sequential_id", "pagerduty_incident_id", "opsgenie_incident_id", "victor_ops_incident_id", "jira_issue_id", "asana_task_id", "shortcut_task_id", "linear_issue_id", "zendesk_ticket_id", "motion_task_id", "trello_card_id", "airtable_record_id", "shortcut_story_id", "github_issue_id", "freshservice_ticket_id", "freshservice_task_id", "clickup_task_id"]  # noqa: E501
        if attribute_to_query_by not in allowed_values:
            raise ValueError(
                "Invalid value for `attribute_to_query_by` ({0}), must be one of {1}"  # noqa: E501
                .format(attribute_to_query_by, allowed_values)
            )

        self._attribute_to_query_by = attribute_to_query_by

    @property
    def resource(self):
        """Gets the resource of this TriggerWorkflowTaskParams.  # noqa: E501


        :return: The resource of this TriggerWorkflowTaskParams.  # noqa: E501
        :rtype: AddActionItemTaskParamsPostToSlackChannels
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this TriggerWorkflowTaskParams.


        :param resource: The resource of this TriggerWorkflowTaskParams.  # noqa: E501
        :type: AddActionItemTaskParamsPostToSlackChannels
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501

        self._resource = resource

    @property
    def workflow(self):
        """Gets the workflow of this TriggerWorkflowTaskParams.  # noqa: E501


        :return: The workflow of this TriggerWorkflowTaskParams.  # noqa: E501
        :rtype: AddActionItemTaskParamsPostToSlackChannels
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this TriggerWorkflowTaskParams.


        :param workflow: The workflow of this TriggerWorkflowTaskParams.  # noqa: E501
        :type: AddActionItemTaskParamsPostToSlackChannels
        """
        if workflow is None:
            raise ValueError("Invalid value for `workflow`, must not be `None`")  # noqa: E501

        self._workflow = workflow

    @property
    def check_workflow_conditions(self):
        """Gets the check_workflow_conditions of this TriggerWorkflowTaskParams.  # noqa: E501


        :return: The check_workflow_conditions of this TriggerWorkflowTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_workflow_conditions

    @check_workflow_conditions.setter
    def check_workflow_conditions(self, check_workflow_conditions):
        """Sets the check_workflow_conditions of this TriggerWorkflowTaskParams.


        :param check_workflow_conditions: The check_workflow_conditions of this TriggerWorkflowTaskParams.  # noqa: E501
        :type: bool
        """

        self._check_workflow_conditions = check_workflow_conditions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TriggerWorkflowTaskParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TriggerWorkflowTaskParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
