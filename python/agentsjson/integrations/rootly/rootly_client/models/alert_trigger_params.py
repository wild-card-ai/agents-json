# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlertTriggerParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trigger_type': 'str',
        'triggers': 'list[str]',
        'alert_condition': 'str',
        'alert_condition_source': 'str',
        'alert_condition_source_use_regexp': 'bool',
        'alert_sources': 'list[str]',
        'alert_condition_label': 'str',
        'alert_condition_label_use_regexp': 'bool',
        'alert_condition_status': 'str',
        'alert_condition_status_use_regexp': 'bool',
        'alert_statuses': 'list[str]',
        'alert_labels': 'list[str]',
        'alert_condition_payload': 'str',
        'alert_condition_payload_use_regexp': 'bool',
        'alert_payload': 'list[str]',
        'alert_query_payload': 'str'
    }

    attribute_map = {
        'trigger_type': 'trigger_type',
        'triggers': 'triggers',
        'alert_condition': 'alert_condition',
        'alert_condition_source': 'alert_condition_source',
        'alert_condition_source_use_regexp': 'alert_condition_source_use_regexp',
        'alert_sources': 'alert_sources',
        'alert_condition_label': 'alert_condition_label',
        'alert_condition_label_use_regexp': 'alert_condition_label_use_regexp',
        'alert_condition_status': 'alert_condition_status',
        'alert_condition_status_use_regexp': 'alert_condition_status_use_regexp',
        'alert_statuses': 'alert_statuses',
        'alert_labels': 'alert_labels',
        'alert_condition_payload': 'alert_condition_payload',
        'alert_condition_payload_use_regexp': 'alert_condition_payload_use_regexp',
        'alert_payload': 'alert_payload',
        'alert_query_payload': 'alert_query_payload'
    }

    def __init__(self, trigger_type=None, triggers=None, alert_condition=None, alert_condition_source='ANY', alert_condition_source_use_regexp=False, alert_sources=None, alert_condition_label='ANY', alert_condition_label_use_regexp=False, alert_condition_status='ANY', alert_condition_status_use_regexp=False, alert_statuses=None, alert_labels=None, alert_condition_payload='ANY', alert_condition_payload_use_regexp=False, alert_payload=None, alert_query_payload=None):  # noqa: E501
        """AlertTriggerParams - a model defined in Swagger"""  # noqa: E501
        self._trigger_type = None
        self._triggers = None
        self._alert_condition = None
        self._alert_condition_source = None
        self._alert_condition_source_use_regexp = None
        self._alert_sources = None
        self._alert_condition_label = None
        self._alert_condition_label_use_regexp = None
        self._alert_condition_status = None
        self._alert_condition_status_use_regexp = None
        self._alert_statuses = None
        self._alert_labels = None
        self._alert_condition_payload = None
        self._alert_condition_payload_use_regexp = None
        self._alert_payload = None
        self._alert_query_payload = None
        self.discriminator = None
        self.trigger_type = trigger_type
        if triggers is not None:
            self.triggers = triggers
        if alert_condition is not None:
            self.alert_condition = alert_condition
        if alert_condition_source is not None:
            self.alert_condition_source = alert_condition_source
        if alert_condition_source_use_regexp is not None:
            self.alert_condition_source_use_regexp = alert_condition_source_use_regexp
        if alert_sources is not None:
            self.alert_sources = alert_sources
        if alert_condition_label is not None:
            self.alert_condition_label = alert_condition_label
        if alert_condition_label_use_regexp is not None:
            self.alert_condition_label_use_regexp = alert_condition_label_use_regexp
        if alert_condition_status is not None:
            self.alert_condition_status = alert_condition_status
        if alert_condition_status_use_regexp is not None:
            self.alert_condition_status_use_regexp = alert_condition_status_use_regexp
        if alert_statuses is not None:
            self.alert_statuses = alert_statuses
        if alert_labels is not None:
            self.alert_labels = alert_labels
        if alert_condition_payload is not None:
            self.alert_condition_payload = alert_condition_payload
        if alert_condition_payload_use_regexp is not None:
            self.alert_condition_payload_use_regexp = alert_condition_payload_use_regexp
        if alert_payload is not None:
            self.alert_payload = alert_payload
        if alert_query_payload is not None:
            self.alert_query_payload = alert_query_payload

    @property
    def trigger_type(self):
        """Gets the trigger_type of this AlertTriggerParams.  # noqa: E501


        :return: The trigger_type of this AlertTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this AlertTriggerParams.


        :param trigger_type: The trigger_type of this AlertTriggerParams.  # noqa: E501
        :type: str
        """
        if trigger_type is None:
            raise ValueError("Invalid value for `trigger_type`, must not be `None`")  # noqa: E501
        allowed_values = ["alert"]  # noqa: E501
        if trigger_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_type, allowed_values)
            )

        self._trigger_type = trigger_type

    @property
    def triggers(self):
        """Gets the triggers of this AlertTriggerParams.  # noqa: E501


        :return: The triggers of this AlertTriggerParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this AlertTriggerParams.


        :param triggers: The triggers of this AlertTriggerParams.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["alert_created", "alert_status_updated"]  # noqa: E501
        if not set(triggers).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `triggers` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(triggers) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._triggers = triggers

    @property
    def alert_condition(self):
        """Gets the alert_condition of this AlertTriggerParams.  # noqa: E501


        :return: The alert_condition of this AlertTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._alert_condition

    @alert_condition.setter
    def alert_condition(self, alert_condition):
        """Sets the alert_condition of this AlertTriggerParams.


        :param alert_condition: The alert_condition of this AlertTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "ANY", "NONE"]  # noqa: E501
        if alert_condition not in allowed_values:
            raise ValueError(
                "Invalid value for `alert_condition` ({0}), must be one of {1}"  # noqa: E501
                .format(alert_condition, allowed_values)
            )

        self._alert_condition = alert_condition

    @property
    def alert_condition_source(self):
        """Gets the alert_condition_source of this AlertTriggerParams.  # noqa: E501


        :return: The alert_condition_source of this AlertTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._alert_condition_source

    @alert_condition_source.setter
    def alert_condition_source(self, alert_condition_source):
        """Sets the alert_condition_source of this AlertTriggerParams.


        :param alert_condition_source: The alert_condition_source of this AlertTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if alert_condition_source not in allowed_values:
            raise ValueError(
                "Invalid value for `alert_condition_source` ({0}), must be one of {1}"  # noqa: E501
                .format(alert_condition_source, allowed_values)
            )

        self._alert_condition_source = alert_condition_source

    @property
    def alert_condition_source_use_regexp(self):
        """Gets the alert_condition_source_use_regexp of this AlertTriggerParams.  # noqa: E501


        :return: The alert_condition_source_use_regexp of this AlertTriggerParams.  # noqa: E501
        :rtype: bool
        """
        return self._alert_condition_source_use_regexp

    @alert_condition_source_use_regexp.setter
    def alert_condition_source_use_regexp(self, alert_condition_source_use_regexp):
        """Sets the alert_condition_source_use_regexp of this AlertTriggerParams.


        :param alert_condition_source_use_regexp: The alert_condition_source_use_regexp of this AlertTriggerParams.  # noqa: E501
        :type: bool
        """

        self._alert_condition_source_use_regexp = alert_condition_source_use_regexp

    @property
    def alert_sources(self):
        """Gets the alert_sources of this AlertTriggerParams.  # noqa: E501


        :return: The alert_sources of this AlertTriggerParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._alert_sources

    @alert_sources.setter
    def alert_sources(self, alert_sources):
        """Sets the alert_sources of this AlertTriggerParams.


        :param alert_sources: The alert_sources of this AlertTriggerParams.  # noqa: E501
        :type: list[str]
        """

        self._alert_sources = alert_sources

    @property
    def alert_condition_label(self):
        """Gets the alert_condition_label of this AlertTriggerParams.  # noqa: E501


        :return: The alert_condition_label of this AlertTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._alert_condition_label

    @alert_condition_label.setter
    def alert_condition_label(self, alert_condition_label):
        """Sets the alert_condition_label of this AlertTriggerParams.


        :param alert_condition_label: The alert_condition_label of this AlertTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if alert_condition_label not in allowed_values:
            raise ValueError(
                "Invalid value for `alert_condition_label` ({0}), must be one of {1}"  # noqa: E501
                .format(alert_condition_label, allowed_values)
            )

        self._alert_condition_label = alert_condition_label

    @property
    def alert_condition_label_use_regexp(self):
        """Gets the alert_condition_label_use_regexp of this AlertTriggerParams.  # noqa: E501


        :return: The alert_condition_label_use_regexp of this AlertTriggerParams.  # noqa: E501
        :rtype: bool
        """
        return self._alert_condition_label_use_regexp

    @alert_condition_label_use_regexp.setter
    def alert_condition_label_use_regexp(self, alert_condition_label_use_regexp):
        """Sets the alert_condition_label_use_regexp of this AlertTriggerParams.


        :param alert_condition_label_use_regexp: The alert_condition_label_use_regexp of this AlertTriggerParams.  # noqa: E501
        :type: bool
        """

        self._alert_condition_label_use_regexp = alert_condition_label_use_regexp

    @property
    def alert_condition_status(self):
        """Gets the alert_condition_status of this AlertTriggerParams.  # noqa: E501


        :return: The alert_condition_status of this AlertTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._alert_condition_status

    @alert_condition_status.setter
    def alert_condition_status(self, alert_condition_status):
        """Sets the alert_condition_status of this AlertTriggerParams.


        :param alert_condition_status: The alert_condition_status of this AlertTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if alert_condition_status not in allowed_values:
            raise ValueError(
                "Invalid value for `alert_condition_status` ({0}), must be one of {1}"  # noqa: E501
                .format(alert_condition_status, allowed_values)
            )

        self._alert_condition_status = alert_condition_status

    @property
    def alert_condition_status_use_regexp(self):
        """Gets the alert_condition_status_use_regexp of this AlertTriggerParams.  # noqa: E501


        :return: The alert_condition_status_use_regexp of this AlertTriggerParams.  # noqa: E501
        :rtype: bool
        """
        return self._alert_condition_status_use_regexp

    @alert_condition_status_use_regexp.setter
    def alert_condition_status_use_regexp(self, alert_condition_status_use_regexp):
        """Sets the alert_condition_status_use_regexp of this AlertTriggerParams.


        :param alert_condition_status_use_regexp: The alert_condition_status_use_regexp of this AlertTriggerParams.  # noqa: E501
        :type: bool
        """

        self._alert_condition_status_use_regexp = alert_condition_status_use_regexp

    @property
    def alert_statuses(self):
        """Gets the alert_statuses of this AlertTriggerParams.  # noqa: E501


        :return: The alert_statuses of this AlertTriggerParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._alert_statuses

    @alert_statuses.setter
    def alert_statuses(self, alert_statuses):
        """Sets the alert_statuses of this AlertTriggerParams.


        :param alert_statuses: The alert_statuses of this AlertTriggerParams.  # noqa: E501
        :type: list[str]
        """

        self._alert_statuses = alert_statuses

    @property
    def alert_labels(self):
        """Gets the alert_labels of this AlertTriggerParams.  # noqa: E501


        :return: The alert_labels of this AlertTriggerParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._alert_labels

    @alert_labels.setter
    def alert_labels(self, alert_labels):
        """Sets the alert_labels of this AlertTriggerParams.


        :param alert_labels: The alert_labels of this AlertTriggerParams.  # noqa: E501
        :type: list[str]
        """

        self._alert_labels = alert_labels

    @property
    def alert_condition_payload(self):
        """Gets the alert_condition_payload of this AlertTriggerParams.  # noqa: E501


        :return: The alert_condition_payload of this AlertTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._alert_condition_payload

    @alert_condition_payload.setter
    def alert_condition_payload(self, alert_condition_payload):
        """Sets the alert_condition_payload of this AlertTriggerParams.


        :param alert_condition_payload: The alert_condition_payload of this AlertTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if alert_condition_payload not in allowed_values:
            raise ValueError(
                "Invalid value for `alert_condition_payload` ({0}), must be one of {1}"  # noqa: E501
                .format(alert_condition_payload, allowed_values)
            )

        self._alert_condition_payload = alert_condition_payload

    @property
    def alert_condition_payload_use_regexp(self):
        """Gets the alert_condition_payload_use_regexp of this AlertTriggerParams.  # noqa: E501


        :return: The alert_condition_payload_use_regexp of this AlertTriggerParams.  # noqa: E501
        :rtype: bool
        """
        return self._alert_condition_payload_use_regexp

    @alert_condition_payload_use_regexp.setter
    def alert_condition_payload_use_regexp(self, alert_condition_payload_use_regexp):
        """Sets the alert_condition_payload_use_regexp of this AlertTriggerParams.


        :param alert_condition_payload_use_regexp: The alert_condition_payload_use_regexp of this AlertTriggerParams.  # noqa: E501
        :type: bool
        """

        self._alert_condition_payload_use_regexp = alert_condition_payload_use_regexp

    @property
    def alert_payload(self):
        """Gets the alert_payload of this AlertTriggerParams.  # noqa: E501


        :return: The alert_payload of this AlertTriggerParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._alert_payload

    @alert_payload.setter
    def alert_payload(self, alert_payload):
        """Sets the alert_payload of this AlertTriggerParams.


        :param alert_payload: The alert_payload of this AlertTriggerParams.  # noqa: E501
        :type: list[str]
        """

        self._alert_payload = alert_payload

    @property
    def alert_query_payload(self):
        """Gets the alert_query_payload of this AlertTriggerParams.  # noqa: E501

        You can use jsonpath syntax. eg: $.incident.teams[*]  # noqa: E501

        :return: The alert_query_payload of this AlertTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._alert_query_payload

    @alert_query_payload.setter
    def alert_query_payload(self, alert_query_payload):
        """Sets the alert_query_payload of this AlertTriggerParams.

        You can use jsonpath syntax. eg: $.incident.teams[*]  # noqa: E501

        :param alert_query_payload: The alert_query_payload of this AlertTriggerParams.  # noqa: E501
        :type: str
        """

        self._alert_query_payload = alert_query_payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertTriggerParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertTriggerParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
