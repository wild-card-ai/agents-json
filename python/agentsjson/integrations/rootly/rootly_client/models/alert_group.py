# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlertGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'slug': 'str',
        'condition_type': 'str',
        'time_window': 'int',
        'group_by_alert_title': 'bool',
        'group_by_alert_urgency': 'bool',
        'targets': 'list[NewAlertGroupDataAttributesTargets]',
        'attributes': 'list[NewAlertGroupDataAttributesAttributes]',
        'created_at': 'str',
        'updated_at': 'str',
        'deleted_at': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'slug': 'slug',
        'condition_type': 'condition_type',
        'time_window': 'time_window',
        'group_by_alert_title': 'group_by_alert_title',
        'group_by_alert_urgency': 'group_by_alert_urgency',
        'targets': 'targets',
        'attributes': 'attributes',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'deleted_at': 'deleted_at'
    }

    def __init__(self, name=None, description=None, slug=None, condition_type=None, time_window=None, group_by_alert_title=None, group_by_alert_urgency=None, targets=None, attributes=None, created_at=None, updated_at=None, deleted_at=None):  # noqa: E501
        """AlertGroup - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._slug = None
        self._condition_type = None
        self._time_window = None
        self._group_by_alert_title = None
        self._group_by_alert_urgency = None
        self._targets = None
        self._attributes = None
        self._created_at = None
        self._updated_at = None
        self._deleted_at = None
        self.discriminator = None
        self.name = name
        self.description = description
        self.slug = slug
        self.condition_type = condition_type
        self.time_window = time_window
        self.group_by_alert_title = group_by_alert_title
        self.group_by_alert_urgency = group_by_alert_urgency
        if targets is not None:
            self.targets = targets
        if attributes is not None:
            self.attributes = attributes
        self.created_at = created_at
        self.updated_at = updated_at
        self.deleted_at = deleted_at

    @property
    def name(self):
        """Gets the name of this AlertGroup.  # noqa: E501

        The name of the alert group  # noqa: E501

        :return: The name of this AlertGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlertGroup.

        The name of the alert group  # noqa: E501

        :param name: The name of this AlertGroup.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this AlertGroup.  # noqa: E501

        The description of the alert group  # noqa: E501

        :return: The description of this AlertGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlertGroup.

        The description of the alert group  # noqa: E501

        :param description: The description of this AlertGroup.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def slug(self):
        """Gets the slug of this AlertGroup.  # noqa: E501

        The slug of the alert group  # noqa: E501

        :return: The slug of this AlertGroup.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this AlertGroup.

        The slug of the alert group  # noqa: E501

        :param slug: The slug of this AlertGroup.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def condition_type(self):
        """Gets the condition_type of this AlertGroup.  # noqa: E501

        Grouping condition for the alert group  # noqa: E501

        :return: The condition_type of this AlertGroup.  # noqa: E501
        :rtype: str
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type):
        """Sets the condition_type of this AlertGroup.

        Grouping condition for the alert group  # noqa: E501

        :param condition_type: The condition_type of this AlertGroup.  # noqa: E501
        :type: str
        """
        if condition_type is None:
            raise ValueError("Invalid value for `condition_type`, must not be `None`")  # noqa: E501

        self._condition_type = condition_type

    @property
    def time_window(self):
        """Gets the time_window of this AlertGroup.  # noqa: E501

        Time window for the alert grouping  # noqa: E501

        :return: The time_window of this AlertGroup.  # noqa: E501
        :rtype: int
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this AlertGroup.

        Time window for the alert grouping  # noqa: E501

        :param time_window: The time_window of this AlertGroup.  # noqa: E501
        :type: int
        """
        if time_window is None:
            raise ValueError("Invalid value for `time_window`, must not be `None`")  # noqa: E501

        self._time_window = time_window

    @property
    def group_by_alert_title(self):
        """Gets the group_by_alert_title of this AlertGroup.  # noqa: E501

        Whether the alerts are grouped by title or not  # noqa: E501

        :return: The group_by_alert_title of this AlertGroup.  # noqa: E501
        :rtype: bool
        """
        return self._group_by_alert_title

    @group_by_alert_title.setter
    def group_by_alert_title(self, group_by_alert_title):
        """Sets the group_by_alert_title of this AlertGroup.

        Whether the alerts are grouped by title or not  # noqa: E501

        :param group_by_alert_title: The group_by_alert_title of this AlertGroup.  # noqa: E501
        :type: bool
        """
        if group_by_alert_title is None:
            raise ValueError("Invalid value for `group_by_alert_title`, must not be `None`")  # noqa: E501

        self._group_by_alert_title = group_by_alert_title

    @property
    def group_by_alert_urgency(self):
        """Gets the group_by_alert_urgency of this AlertGroup.  # noqa: E501

        Whether the alerts are grouped by urgency or not  # noqa: E501

        :return: The group_by_alert_urgency of this AlertGroup.  # noqa: E501
        :rtype: bool
        """
        return self._group_by_alert_urgency

    @group_by_alert_urgency.setter
    def group_by_alert_urgency(self, group_by_alert_urgency):
        """Sets the group_by_alert_urgency of this AlertGroup.

        Whether the alerts are grouped by urgency or not  # noqa: E501

        :param group_by_alert_urgency: The group_by_alert_urgency of this AlertGroup.  # noqa: E501
        :type: bool
        """
        if group_by_alert_urgency is None:
            raise ValueError("Invalid value for `group_by_alert_urgency`, must not be `None`")  # noqa: E501

        self._group_by_alert_urgency = group_by_alert_urgency

    @property
    def targets(self):
        """Gets the targets of this AlertGroup.  # noqa: E501


        :return: The targets of this AlertGroup.  # noqa: E501
        :rtype: list[NewAlertGroupDataAttributesTargets]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this AlertGroup.


        :param targets: The targets of this AlertGroup.  # noqa: E501
        :type: list[NewAlertGroupDataAttributesTargets]
        """

        self._targets = targets

    @property
    def attributes(self):
        """Gets the attributes of this AlertGroup.  # noqa: E501


        :return: The attributes of this AlertGroup.  # noqa: E501
        :rtype: list[NewAlertGroupDataAttributesAttributes]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this AlertGroup.


        :param attributes: The attributes of this AlertGroup.  # noqa: E501
        :type: list[NewAlertGroupDataAttributesAttributes]
        """

        self._attributes = attributes

    @property
    def created_at(self):
        """Gets the created_at of this AlertGroup.  # noqa: E501

        Date of creation  # noqa: E501

        :return: The created_at of this AlertGroup.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AlertGroup.

        Date of creation  # noqa: E501

        :param created_at: The created_at of this AlertGroup.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AlertGroup.  # noqa: E501

        Date of last update  # noqa: E501

        :return: The updated_at of this AlertGroup.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AlertGroup.

        Date of last update  # noqa: E501

        :param updated_at: The updated_at of this AlertGroup.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this AlertGroup.  # noqa: E501

        Date or deletion  # noqa: E501

        :return: The deleted_at of this AlertGroup.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this AlertGroup.

        Date or deletion  # noqa: E501

        :param deleted_at: The deleted_at of this AlertGroup.  # noqa: E501
        :type: str
        """
        if deleted_at is None:
            raise ValueError("Invalid value for `deleted_at`, must not be `None`")  # noqa: E501

        self._deleted_at = deleted_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
