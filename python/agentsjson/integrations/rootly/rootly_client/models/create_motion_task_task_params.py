# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateMotionTaskTaskParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_type': 'str',
        'workspace': 'AddActionItemTaskParamsPostToSlackChannels',
        'project': 'AddActionItemTaskParamsPostToSlackChannels',
        'status': 'AddActionItemTaskParamsPostToSlackChannels',
        'title': 'str',
        'description': 'str',
        'labels': 'list[str]',
        'priority': 'CreateJiraIssueTaskParamsPriority',
        'duration': 'str',
        'due_date': 'str'
    }

    attribute_map = {
        'task_type': 'task_type',
        'workspace': 'workspace',
        'project': 'project',
        'status': 'status',
        'title': 'title',
        'description': 'description',
        'labels': 'labels',
        'priority': 'priority',
        'duration': 'duration',
        'due_date': 'due_date'
    }

    def __init__(self, task_type=None, workspace=None, project=None, status=None, title=None, description=None, labels=None, priority=None, duration=None, due_date=None):  # noqa: E501
        """CreateMotionTaskTaskParams - a model defined in Swagger"""  # noqa: E501
        self._task_type = None
        self._workspace = None
        self._project = None
        self._status = None
        self._title = None
        self._description = None
        self._labels = None
        self._priority = None
        self._duration = None
        self._due_date = None
        self.discriminator = None
        if task_type is not None:
            self.task_type = task_type
        self.workspace = workspace
        if project is not None:
            self.project = project
        if status is not None:
            self.status = status
        self.title = title
        if description is not None:
            self.description = description
        if labels is not None:
            self.labels = labels
        if priority is not None:
            self.priority = priority
        if duration is not None:
            self.duration = duration
        if due_date is not None:
            self.due_date = due_date

    @property
    def task_type(self):
        """Gets the task_type of this CreateMotionTaskTaskParams.  # noqa: E501


        :return: The task_type of this CreateMotionTaskTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this CreateMotionTaskTaskParams.


        :param task_type: The task_type of this CreateMotionTaskTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["create_motion_task"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def workspace(self):
        """Gets the workspace of this CreateMotionTaskTaskParams.  # noqa: E501


        :return: The workspace of this CreateMotionTaskTaskParams.  # noqa: E501
        :rtype: AddActionItemTaskParamsPostToSlackChannels
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this CreateMotionTaskTaskParams.


        :param workspace: The workspace of this CreateMotionTaskTaskParams.  # noqa: E501
        :type: AddActionItemTaskParamsPostToSlackChannels
        """
        if workspace is None:
            raise ValueError("Invalid value for `workspace`, must not be `None`")  # noqa: E501

        self._workspace = workspace

    @property
    def project(self):
        """Gets the project of this CreateMotionTaskTaskParams.  # noqa: E501


        :return: The project of this CreateMotionTaskTaskParams.  # noqa: E501
        :rtype: AddActionItemTaskParamsPostToSlackChannels
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this CreateMotionTaskTaskParams.


        :param project: The project of this CreateMotionTaskTaskParams.  # noqa: E501
        :type: AddActionItemTaskParamsPostToSlackChannels
        """

        self._project = project

    @property
    def status(self):
        """Gets the status of this CreateMotionTaskTaskParams.  # noqa: E501


        :return: The status of this CreateMotionTaskTaskParams.  # noqa: E501
        :rtype: AddActionItemTaskParamsPostToSlackChannels
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateMotionTaskTaskParams.


        :param status: The status of this CreateMotionTaskTaskParams.  # noqa: E501
        :type: AddActionItemTaskParamsPostToSlackChannels
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this CreateMotionTaskTaskParams.  # noqa: E501

        The task title  # noqa: E501

        :return: The title of this CreateMotionTaskTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateMotionTaskTaskParams.

        The task title  # noqa: E501

        :param title: The title of this CreateMotionTaskTaskParams.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this CreateMotionTaskTaskParams.  # noqa: E501

        The task description  # noqa: E501

        :return: The description of this CreateMotionTaskTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateMotionTaskTaskParams.

        The task description  # noqa: E501

        :param description: The description of this CreateMotionTaskTaskParams.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this CreateMotionTaskTaskParams.  # noqa: E501


        :return: The labels of this CreateMotionTaskTaskParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreateMotionTaskTaskParams.


        :param labels: The labels of this CreateMotionTaskTaskParams.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def priority(self):
        """Gets the priority of this CreateMotionTaskTaskParams.  # noqa: E501


        :return: The priority of this CreateMotionTaskTaskParams.  # noqa: E501
        :rtype: CreateJiraIssueTaskParamsPriority
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CreateMotionTaskTaskParams.


        :param priority: The priority of this CreateMotionTaskTaskParams.  # noqa: E501
        :type: CreateJiraIssueTaskParamsPriority
        """

        self._priority = priority

    @property
    def duration(self):
        """Gets the duration of this CreateMotionTaskTaskParams.  # noqa: E501

        The duration. Eg.  \"NONE\", \"REMINDER\", or a integer greater than 0.  # noqa: E501

        :return: The duration of this CreateMotionTaskTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CreateMotionTaskTaskParams.

        The duration. Eg.  \"NONE\", \"REMINDER\", or a integer greater than 0.  # noqa: E501

        :param duration: The duration of this CreateMotionTaskTaskParams.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def due_date(self):
        """Gets the due_date of this CreateMotionTaskTaskParams.  # noqa: E501

        The due date  # noqa: E501

        :return: The due_date of this CreateMotionTaskTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this CreateMotionTaskTaskParams.

        The due date  # noqa: E501

        :param due_date: The due_date of this CreateMotionTaskTaskParams.  # noqa: E501
        :type: str
        """

        self._due_date = due_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateMotionTaskTaskParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateMotionTaskTaskParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
