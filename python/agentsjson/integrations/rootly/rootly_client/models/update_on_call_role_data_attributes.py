# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateOnCallRoleDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'slug': 'str',
        'system_role': 'list[str]',
        'alert_sources_permissions': 'list[str]',
        'alert_urgency_permissions': 'list[str]',
        'alerts_permissions': 'list[str]',
        'api_keys_permissions': 'list[str]',
        'audits_permissions': 'list[str]',
        'contacts_permissions': 'list[str]',
        'escalation_policies_permissions': 'list[str]',
        'groups_permissions': 'list[str]',
        'heartbeats_permissions': 'list[str]',
        'integrations_permissions': 'list[str]',
        'invitations_permissions': 'list[str]',
        'live_call_routing_permissions': 'list[str]',
        'schedule_override_permissions': 'list[str]',
        'schedules_permissions': 'list[str]',
        'services_permissions': 'list[str]',
        'webhooks_permissions': 'list[str]',
        'workflows_permissions': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'slug': 'slug',
        'system_role': 'system_role',
        'alert_sources_permissions': 'alert_sources_permissions',
        'alert_urgency_permissions': 'alert_urgency_permissions',
        'alerts_permissions': 'alerts_permissions',
        'api_keys_permissions': 'api_keys_permissions',
        'audits_permissions': 'audits_permissions',
        'contacts_permissions': 'contacts_permissions',
        'escalation_policies_permissions': 'escalation_policies_permissions',
        'groups_permissions': 'groups_permissions',
        'heartbeats_permissions': 'heartbeats_permissions',
        'integrations_permissions': 'integrations_permissions',
        'invitations_permissions': 'invitations_permissions',
        'live_call_routing_permissions': 'live_call_routing_permissions',
        'schedule_override_permissions': 'schedule_override_permissions',
        'schedules_permissions': 'schedules_permissions',
        'services_permissions': 'services_permissions',
        'webhooks_permissions': 'webhooks_permissions',
        'workflows_permissions': 'workflows_permissions'
    }

    def __init__(self, name=None, slug=None, system_role=None, alert_sources_permissions=None, alert_urgency_permissions=None, alerts_permissions=None, api_keys_permissions=None, audits_permissions=None, contacts_permissions=None, escalation_policies_permissions=None, groups_permissions=None, heartbeats_permissions=None, integrations_permissions=None, invitations_permissions=None, live_call_routing_permissions=None, schedule_override_permissions=None, schedules_permissions=None, services_permissions=None, webhooks_permissions=None, workflows_permissions=None):  # noqa: E501
        """UpdateOnCallRoleDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._slug = None
        self._system_role = None
        self._alert_sources_permissions = None
        self._alert_urgency_permissions = None
        self._alerts_permissions = None
        self._api_keys_permissions = None
        self._audits_permissions = None
        self._contacts_permissions = None
        self._escalation_policies_permissions = None
        self._groups_permissions = None
        self._heartbeats_permissions = None
        self._integrations_permissions = None
        self._invitations_permissions = None
        self._live_call_routing_permissions = None
        self._schedule_override_permissions = None
        self._schedules_permissions = None
        self._services_permissions = None
        self._webhooks_permissions = None
        self._workflows_permissions = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if slug is not None:
            self.slug = slug
        if system_role is not None:
            self.system_role = system_role
        if alert_sources_permissions is not None:
            self.alert_sources_permissions = alert_sources_permissions
        if alert_urgency_permissions is not None:
            self.alert_urgency_permissions = alert_urgency_permissions
        if alerts_permissions is not None:
            self.alerts_permissions = alerts_permissions
        if api_keys_permissions is not None:
            self.api_keys_permissions = api_keys_permissions
        if audits_permissions is not None:
            self.audits_permissions = audits_permissions
        if contacts_permissions is not None:
            self.contacts_permissions = contacts_permissions
        if escalation_policies_permissions is not None:
            self.escalation_policies_permissions = escalation_policies_permissions
        if groups_permissions is not None:
            self.groups_permissions = groups_permissions
        if heartbeats_permissions is not None:
            self.heartbeats_permissions = heartbeats_permissions
        if integrations_permissions is not None:
            self.integrations_permissions = integrations_permissions
        if invitations_permissions is not None:
            self.invitations_permissions = invitations_permissions
        if live_call_routing_permissions is not None:
            self.live_call_routing_permissions = live_call_routing_permissions
        if schedule_override_permissions is not None:
            self.schedule_override_permissions = schedule_override_permissions
        if schedules_permissions is not None:
            self.schedules_permissions = schedules_permissions
        if services_permissions is not None:
            self.services_permissions = services_permissions
        if webhooks_permissions is not None:
            self.webhooks_permissions = webhooks_permissions
        if workflows_permissions is not None:
            self.workflows_permissions = workflows_permissions

    @property
    def name(self):
        """Gets the name of this UpdateOnCallRoleDataAttributes.  # noqa: E501

        The role name.  # noqa: E501

        :return: The name of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateOnCallRoleDataAttributes.

        The role name.  # noqa: E501

        :param name: The name of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this UpdateOnCallRoleDataAttributes.  # noqa: E501

        The role slug.  # noqa: E501

        :return: The slug of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this UpdateOnCallRoleDataAttributes.

        The role slug.  # noqa: E501

        :param slug: The slug of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def system_role(self):
        """Gets the system_role of this UpdateOnCallRoleDataAttributes.  # noqa: E501

        The kind of role (user and custom type roles are only editable)  # noqa: E501

        :return: The system_role of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._system_role

    @system_role.setter
    def system_role(self, system_role):
        """Sets the system_role of this UpdateOnCallRoleDataAttributes.

        The kind of role (user and custom type roles are only editable)  # noqa: E501

        :param system_role: The system_role of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["admin", "user", "custom", "no_access"]  # noqa: E501
        if not set(system_role).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `system_role` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(system_role) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._system_role = system_role

    @property
    def alert_sources_permissions(self):
        """Gets the alert_sources_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The alert_sources_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._alert_sources_permissions

    @alert_sources_permissions.setter
    def alert_sources_permissions(self, alert_sources_permissions):
        """Sets the alert_sources_permissions of this UpdateOnCallRoleDataAttributes.


        :param alert_sources_permissions: The alert_sources_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "update", "delete"]  # noqa: E501
        if not set(alert_sources_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `alert_sources_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(alert_sources_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._alert_sources_permissions = alert_sources_permissions

    @property
    def alert_urgency_permissions(self):
        """Gets the alert_urgency_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The alert_urgency_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._alert_urgency_permissions

    @alert_urgency_permissions.setter
    def alert_urgency_permissions(self, alert_urgency_permissions):
        """Sets the alert_urgency_permissions of this UpdateOnCallRoleDataAttributes.


        :param alert_urgency_permissions: The alert_urgency_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(alert_urgency_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `alert_urgency_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(alert_urgency_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._alert_urgency_permissions = alert_urgency_permissions

    @property
    def alerts_permissions(self):
        """Gets the alerts_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The alerts_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._alerts_permissions

    @alerts_permissions.setter
    def alerts_permissions(self, alerts_permissions):
        """Sets the alerts_permissions of this UpdateOnCallRoleDataAttributes.


        :param alerts_permissions: The alerts_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "update", "read"]  # noqa: E501
        if not set(alerts_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `alerts_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(alerts_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._alerts_permissions = alerts_permissions

    @property
    def api_keys_permissions(self):
        """Gets the api_keys_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The api_keys_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._api_keys_permissions

    @api_keys_permissions.setter
    def api_keys_permissions(self, api_keys_permissions):
        """Sets the api_keys_permissions of this UpdateOnCallRoleDataAttributes.


        :param api_keys_permissions: The api_keys_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(api_keys_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `api_keys_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(api_keys_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._api_keys_permissions = api_keys_permissions

    @property
    def audits_permissions(self):
        """Gets the audits_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The audits_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._audits_permissions

    @audits_permissions.setter
    def audits_permissions(self, audits_permissions):
        """Sets the audits_permissions of this UpdateOnCallRoleDataAttributes.


        :param audits_permissions: The audits_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(audits_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `audits_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(audits_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._audits_permissions = audits_permissions

    @property
    def contacts_permissions(self):
        """Gets the contacts_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The contacts_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._contacts_permissions

    @contacts_permissions.setter
    def contacts_permissions(self, contacts_permissions):
        """Sets the contacts_permissions of this UpdateOnCallRoleDataAttributes.


        :param contacts_permissions: The contacts_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["read"]  # noqa: E501
        if not set(contacts_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `contacts_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(contacts_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._contacts_permissions = contacts_permissions

    @property
    def escalation_policies_permissions(self):
        """Gets the escalation_policies_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The escalation_policies_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._escalation_policies_permissions

    @escalation_policies_permissions.setter
    def escalation_policies_permissions(self, escalation_policies_permissions):
        """Sets the escalation_policies_permissions of this UpdateOnCallRoleDataAttributes.


        :param escalation_policies_permissions: The escalation_policies_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(escalation_policies_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `escalation_policies_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(escalation_policies_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._escalation_policies_permissions = escalation_policies_permissions

    @property
    def groups_permissions(self):
        """Gets the groups_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The groups_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups_permissions

    @groups_permissions.setter
    def groups_permissions(self, groups_permissions):
        """Sets the groups_permissions of this UpdateOnCallRoleDataAttributes.


        :param groups_permissions: The groups_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(groups_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `groups_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(groups_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._groups_permissions = groups_permissions

    @property
    def heartbeats_permissions(self):
        """Gets the heartbeats_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The heartbeats_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._heartbeats_permissions

    @heartbeats_permissions.setter
    def heartbeats_permissions(self, heartbeats_permissions):
        """Sets the heartbeats_permissions of this UpdateOnCallRoleDataAttributes.


        :param heartbeats_permissions: The heartbeats_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(heartbeats_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `heartbeats_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(heartbeats_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._heartbeats_permissions = heartbeats_permissions

    @property
    def integrations_permissions(self):
        """Gets the integrations_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The integrations_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._integrations_permissions

    @integrations_permissions.setter
    def integrations_permissions(self, integrations_permissions):
        """Sets the integrations_permissions of this UpdateOnCallRoleDataAttributes.


        :param integrations_permissions: The integrations_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(integrations_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `integrations_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(integrations_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._integrations_permissions = integrations_permissions

    @property
    def invitations_permissions(self):
        """Gets the invitations_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The invitations_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._invitations_permissions

    @invitations_permissions.setter
    def invitations_permissions(self, invitations_permissions):
        """Sets the invitations_permissions of this UpdateOnCallRoleDataAttributes.


        :param invitations_permissions: The invitations_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(invitations_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `invitations_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(invitations_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._invitations_permissions = invitations_permissions

    @property
    def live_call_routing_permissions(self):
        """Gets the live_call_routing_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The live_call_routing_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._live_call_routing_permissions

    @live_call_routing_permissions.setter
    def live_call_routing_permissions(self, live_call_routing_permissions):
        """Sets the live_call_routing_permissions of this UpdateOnCallRoleDataAttributes.


        :param live_call_routing_permissions: The live_call_routing_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(live_call_routing_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `live_call_routing_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(live_call_routing_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._live_call_routing_permissions = live_call_routing_permissions

    @property
    def schedule_override_permissions(self):
        """Gets the schedule_override_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The schedule_override_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._schedule_override_permissions

    @schedule_override_permissions.setter
    def schedule_override_permissions(self, schedule_override_permissions):
        """Sets the schedule_override_permissions of this UpdateOnCallRoleDataAttributes.


        :param schedule_override_permissions: The schedule_override_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "update"]  # noqa: E501
        if not set(schedule_override_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `schedule_override_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(schedule_override_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._schedule_override_permissions = schedule_override_permissions

    @property
    def schedules_permissions(self):
        """Gets the schedules_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The schedules_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._schedules_permissions

    @schedules_permissions.setter
    def schedules_permissions(self, schedules_permissions):
        """Sets the schedules_permissions of this UpdateOnCallRoleDataAttributes.


        :param schedules_permissions: The schedules_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(schedules_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `schedules_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(schedules_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._schedules_permissions = schedules_permissions

    @property
    def services_permissions(self):
        """Gets the services_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The services_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._services_permissions

    @services_permissions.setter
    def services_permissions(self, services_permissions):
        """Sets the services_permissions of this UpdateOnCallRoleDataAttributes.


        :param services_permissions: The services_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(services_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `services_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(services_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._services_permissions = services_permissions

    @property
    def webhooks_permissions(self):
        """Gets the webhooks_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The webhooks_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._webhooks_permissions

    @webhooks_permissions.setter
    def webhooks_permissions(self, webhooks_permissions):
        """Sets the webhooks_permissions of this UpdateOnCallRoleDataAttributes.


        :param webhooks_permissions: The webhooks_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(webhooks_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `webhooks_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(webhooks_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._webhooks_permissions = webhooks_permissions

    @property
    def workflows_permissions(self):
        """Gets the workflows_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501


        :return: The workflows_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._workflows_permissions

    @workflows_permissions.setter
    def workflows_permissions(self, workflows_permissions):
        """Sets the workflows_permissions of this UpdateOnCallRoleDataAttributes.


        :param workflows_permissions: The workflows_permissions of this UpdateOnCallRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(workflows_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `workflows_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(workflows_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._workflows_permissions = workflows_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateOnCallRoleDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateOnCallRoleDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
