# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdatePagerdutyIncidentTaskParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_type': 'str',
        'pagerduty_incident_id': 'str',
        'title': 'str',
        'status': 'str',
        'resolution': 'str',
        'escalation_level': 'int',
        'urgency': 'str',
        'priority': 'str'
    }

    attribute_map = {
        'task_type': 'task_type',
        'pagerduty_incident_id': 'pagerduty_incident_id',
        'title': 'title',
        'status': 'status',
        'resolution': 'resolution',
        'escalation_level': 'escalation_level',
        'urgency': 'urgency',
        'priority': 'priority'
    }

    def __init__(self, task_type=None, pagerduty_incident_id=None, title=None, status=None, resolution=None, escalation_level=None, urgency=None, priority=None):  # noqa: E501
        """UpdatePagerdutyIncidentTaskParams - a model defined in Swagger"""  # noqa: E501
        self._task_type = None
        self._pagerduty_incident_id = None
        self._title = None
        self._status = None
        self._resolution = None
        self._escalation_level = None
        self._urgency = None
        self._priority = None
        self.discriminator = None
        if task_type is not None:
            self.task_type = task_type
        self.pagerduty_incident_id = pagerduty_incident_id
        if title is not None:
            self.title = title
        if status is not None:
            self.status = status
        if resolution is not None:
            self.resolution = resolution
        if escalation_level is not None:
            self.escalation_level = escalation_level
        if urgency is not None:
            self.urgency = urgency
        if priority is not None:
            self.priority = priority

    @property
    def task_type(self):
        """Gets the task_type of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501


        :return: The task_type of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this UpdatePagerdutyIncidentTaskParams.


        :param task_type: The task_type of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["update_pagerduty_incident"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def pagerduty_incident_id(self):
        """Gets the pagerduty_incident_id of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501

        Pagerduty incident id  # noqa: E501

        :return: The pagerduty_incident_id of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._pagerduty_incident_id

    @pagerduty_incident_id.setter
    def pagerduty_incident_id(self, pagerduty_incident_id):
        """Sets the pagerduty_incident_id of this UpdatePagerdutyIncidentTaskParams.

        Pagerduty incident id  # noqa: E501

        :param pagerduty_incident_id: The pagerduty_incident_id of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :type: str
        """
        if pagerduty_incident_id is None:
            raise ValueError("Invalid value for `pagerduty_incident_id`, must not be `None`")  # noqa: E501

        self._pagerduty_incident_id = pagerduty_incident_id

    @property
    def title(self):
        """Gets the title of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501

        Title to update to  # noqa: E501

        :return: The title of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UpdatePagerdutyIncidentTaskParams.

        Title to update to  # noqa: E501

        :param title: The title of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def status(self):
        """Gets the status of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501


        :return: The status of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdatePagerdutyIncidentTaskParams.


        :param status: The status of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["resolved", "acknowledged", "auto"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def resolution(self):
        """Gets the resolution of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501

        A message outlining the incident's resolution in PagerDuty  # noqa: E501

        :return: The resolution of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this UpdatePagerdutyIncidentTaskParams.

        A message outlining the incident's resolution in PagerDuty  # noqa: E501

        :param resolution: The resolution of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :type: str
        """

        self._resolution = resolution

    @property
    def escalation_level(self):
        """Gets the escalation_level of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501

        Escalation level of policy attached to incident  # noqa: E501

        :return: The escalation_level of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :rtype: int
        """
        return self._escalation_level

    @escalation_level.setter
    def escalation_level(self, escalation_level):
        """Sets the escalation_level of this UpdatePagerdutyIncidentTaskParams.

        Escalation level of policy attached to incident  # noqa: E501

        :param escalation_level: The escalation_level of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :type: int
        """

        self._escalation_level = escalation_level

    @property
    def urgency(self):
        """Gets the urgency of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501

        PagerDuty incident urgency, selecting auto will let Rootly auto map our incident severity  # noqa: E501

        :return: The urgency of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._urgency

    @urgency.setter
    def urgency(self, urgency):
        """Sets the urgency of this UpdatePagerdutyIncidentTaskParams.

        PagerDuty incident urgency, selecting auto will let Rootly auto map our incident severity  # noqa: E501

        :param urgency: The urgency of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["high", "low", "auto"]  # noqa: E501
        if urgency not in allowed_values:
            raise ValueError(
                "Invalid value for `urgency` ({0}), must be one of {1}"  # noqa: E501
                .format(urgency, allowed_values)
            )

        self._urgency = urgency

    @property
    def priority(self):
        """Gets the priority of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501

        PagerDuty incident priority, selecting auto will let Rootly auto map our incident severity  # noqa: E501

        :return: The priority of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this UpdatePagerdutyIncidentTaskParams.

        PagerDuty incident priority, selecting auto will let Rootly auto map our incident severity  # noqa: E501

        :param priority: The priority of this UpdatePagerdutyIncidentTaskParams.  # noqa: E501
        :type: str
        """

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatePagerdutyIncidentTaskParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatePagerdutyIncidentTaskParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
