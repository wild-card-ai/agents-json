# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewAuthorizationDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorizable_id': 'str',
        'authorizable_type': 'str',
        'grantee_id': 'str',
        'grantee_type': 'str',
        'permissions': 'list[str]'
    }

    attribute_map = {
        'authorizable_id': 'authorizable_id',
        'authorizable_type': 'authorizable_type',
        'grantee_id': 'grantee_id',
        'grantee_type': 'grantee_type',
        'permissions': 'permissions'
    }

    def __init__(self, authorizable_id=None, authorizable_type=None, grantee_id=None, grantee_type=None, permissions=None):  # noqa: E501
        """NewAuthorizationDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._authorizable_id = None
        self._authorizable_type = None
        self._grantee_id = None
        self._grantee_type = None
        self._permissions = None
        self.discriminator = None
        self.authorizable_id = authorizable_id
        self.authorizable_type = authorizable_type
        self.grantee_id = grantee_id
        self.grantee_type = grantee_type
        self.permissions = permissions

    @property
    def authorizable_id(self):
        """Gets the authorizable_id of this NewAuthorizationDataAttributes.  # noqa: E501

        The id of the resource being accessed.  # noqa: E501

        :return: The authorizable_id of this NewAuthorizationDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._authorizable_id

    @authorizable_id.setter
    def authorizable_id(self, authorizable_id):
        """Sets the authorizable_id of this NewAuthorizationDataAttributes.

        The id of the resource being accessed.  # noqa: E501

        :param authorizable_id: The authorizable_id of this NewAuthorizationDataAttributes.  # noqa: E501
        :type: str
        """
        if authorizable_id is None:
            raise ValueError("Invalid value for `authorizable_id`, must not be `None`")  # noqa: E501

        self._authorizable_id = authorizable_id

    @property
    def authorizable_type(self):
        """Gets the authorizable_type of this NewAuthorizationDataAttributes.  # noqa: E501

        The type of resource being accessed.  # noqa: E501

        :return: The authorizable_type of this NewAuthorizationDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._authorizable_type

    @authorizable_type.setter
    def authorizable_type(self, authorizable_type):
        """Sets the authorizable_type of this NewAuthorizationDataAttributes.

        The type of resource being accessed.  # noqa: E501

        :param authorizable_type: The authorizable_type of this NewAuthorizationDataAttributes.  # noqa: E501
        :type: str
        """
        if authorizable_type is None:
            raise ValueError("Invalid value for `authorizable_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Dashboard"]  # noqa: E501
        if authorizable_type not in allowed_values:
            raise ValueError(
                "Invalid value for `authorizable_type` ({0}), must be one of {1}"  # noqa: E501
                .format(authorizable_type, allowed_values)
            )

        self._authorizable_type = authorizable_type

    @property
    def grantee_id(self):
        """Gets the grantee_id of this NewAuthorizationDataAttributes.  # noqa: E501

        The resource id granted access.  # noqa: E501

        :return: The grantee_id of this NewAuthorizationDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._grantee_id

    @grantee_id.setter
    def grantee_id(self, grantee_id):
        """Sets the grantee_id of this NewAuthorizationDataAttributes.

        The resource id granted access.  # noqa: E501

        :param grantee_id: The grantee_id of this NewAuthorizationDataAttributes.  # noqa: E501
        :type: str
        """
        if grantee_id is None:
            raise ValueError("Invalid value for `grantee_id`, must not be `None`")  # noqa: E501

        self._grantee_id = grantee_id

    @property
    def grantee_type(self):
        """Gets the grantee_type of this NewAuthorizationDataAttributes.  # noqa: E501

        The type of resource granted access.  # noqa: E501

        :return: The grantee_type of this NewAuthorizationDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._grantee_type

    @grantee_type.setter
    def grantee_type(self, grantee_type):
        """Sets the grantee_type of this NewAuthorizationDataAttributes.

        The type of resource granted access.  # noqa: E501

        :param grantee_type: The grantee_type of this NewAuthorizationDataAttributes.  # noqa: E501
        :type: str
        """
        if grantee_type is None:
            raise ValueError("Invalid value for `grantee_type`, must not be `None`")  # noqa: E501
        allowed_values = ["User", "Team"]  # noqa: E501
        if grantee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `grantee_type` ({0}), must be one of {1}"  # noqa: E501
                .format(grantee_type, allowed_values)
            )

        self._grantee_type = grantee_type

    @property
    def permissions(self):
        """Gets the permissions of this NewAuthorizationDataAttributes.  # noqa: E501


        :return: The permissions of this NewAuthorizationDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this NewAuthorizationDataAttributes.


        :param permissions: The permissions of this NewAuthorizationDataAttributes.  # noqa: E501
        :type: list[str]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")  # noqa: E501
        allowed_values = ["read", "update", "authorize", "destroy"]  # noqa: E501
        if not set(permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewAuthorizationDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewAuthorizationDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
