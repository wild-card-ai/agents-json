# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewIncidentPermissionSetBooleanDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'incident_permission_set_id': 'str',
        'kind': 'str',
        'private': 'bool',
        'enabled': 'bool',
        'severity_params': 'NewIncidentPermissionSetBooleanDataAttributesSeverityParams'
    }

    attribute_map = {
        'incident_permission_set_id': 'incident_permission_set_id',
        'kind': 'kind',
        'private': 'private',
        'enabled': 'enabled',
        'severity_params': 'severity_params'
    }

    def __init__(self, incident_permission_set_id=None, kind=None, private=None, enabled=None, severity_params=None):  # noqa: E501
        """NewIncidentPermissionSetBooleanDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._incident_permission_set_id = None
        self._kind = None
        self._private = None
        self._enabled = None
        self._severity_params = None
        self.discriminator = None
        self.incident_permission_set_id = incident_permission_set_id
        self.kind = kind
        if private is not None:
            self.private = private
        if enabled is not None:
            self.enabled = enabled
        if severity_params is not None:
            self.severity_params = severity_params

    @property
    def incident_permission_set_id(self):
        """Gets the incident_permission_set_id of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501


        :return: The incident_permission_set_id of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._incident_permission_set_id

    @incident_permission_set_id.setter
    def incident_permission_set_id(self, incident_permission_set_id):
        """Sets the incident_permission_set_id of this NewIncidentPermissionSetBooleanDataAttributes.


        :param incident_permission_set_id: The incident_permission_set_id of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501
        :type: str
        """
        if incident_permission_set_id is None:
            raise ValueError("Invalid value for `incident_permission_set_id`, must not be `None`")  # noqa: E501

        self._incident_permission_set_id = incident_permission_set_id

    @property
    def kind(self):
        """Gets the kind of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501


        :return: The kind of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this NewIncidentPermissionSetBooleanDataAttributes.


        :param kind: The kind of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501
        :type: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        allowed_values = ["publish_to_status_page", "assign_incident_roles", "invite_subscribers", "update_summary", "update_timeline", "trigger_workflows", "create_communications", "read_communications", "update_communications", "delete_communications", "send_communications", "modify_custom_fields"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def private(self):
        """Gets the private of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501


        :return: The private of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this NewIncidentPermissionSetBooleanDataAttributes.


        :param private: The private of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501
        :type: bool
        """

        self._private = private

    @property
    def enabled(self):
        """Gets the enabled of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501


        :return: The enabled of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NewIncidentPermissionSetBooleanDataAttributes.


        :param enabled: The enabled of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def severity_params(self):
        """Gets the severity_params of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501


        :return: The severity_params of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501
        :rtype: NewIncidentPermissionSetBooleanDataAttributesSeverityParams
        """
        return self._severity_params

    @severity_params.setter
    def severity_params(self, severity_params):
        """Sets the severity_params of this NewIncidentPermissionSetBooleanDataAttributes.


        :param severity_params: The severity_params of this NewIncidentPermissionSetBooleanDataAttributes.  # noqa: E501
        :type: NewIncidentPermissionSetBooleanDataAttributesSeverityParams
        """

        self._severity_params = severity_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewIncidentPermissionSetBooleanDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewIncidentPermissionSetBooleanDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
