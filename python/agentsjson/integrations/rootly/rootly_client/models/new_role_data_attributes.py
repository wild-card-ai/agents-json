# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewRoleDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'slug': 'str',
        'incident_permission_set_id': 'str',
        'alerts_permissions': 'list[str]',
        'api_keys_permissions': 'list[str]',
        'audits_permissions': 'list[str]',
        'billing_permissions': 'list[str]',
        'environments_permissions': 'list[str]',
        'form_fields_permissions': 'list[str]',
        'functionalities_permissions': 'list[str]',
        'groups_permissions': 'list[str]',
        'incident_causes_permissions': 'list[str]',
        'incident_feedbacks_permissions': 'list[str]',
        'incident_roles_permissions': 'list[str]',
        'incident_types_permissions': 'list[str]',
        'incidents_permissions': 'list[str]',
        'integrations_permissions': 'list[str]',
        'invitations_permissions': 'list[str]',
        'playbooks_permissions': 'list[str]',
        'private_incidents_permissions': 'list[str]',
        'pulses_permissions': 'list[str]',
        'retrospective_permissions': 'list[str]',
        'roles_permissions': 'list[str]',
        'secrets_permissions': 'list[str]',
        'services_permissions': 'list[str]',
        'severities_permissions': 'list[str]',
        'status_pages_permissions': 'list[str]',
        'webhooks_permissions': 'list[str]',
        'workflows_permissions': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'slug': 'slug',
        'incident_permission_set_id': 'incident_permission_set_id',
        'alerts_permissions': 'alerts_permissions',
        'api_keys_permissions': 'api_keys_permissions',
        'audits_permissions': 'audits_permissions',
        'billing_permissions': 'billing_permissions',
        'environments_permissions': 'environments_permissions',
        'form_fields_permissions': 'form_fields_permissions',
        'functionalities_permissions': 'functionalities_permissions',
        'groups_permissions': 'groups_permissions',
        'incident_causes_permissions': 'incident_causes_permissions',
        'incident_feedbacks_permissions': 'incident_feedbacks_permissions',
        'incident_roles_permissions': 'incident_roles_permissions',
        'incident_types_permissions': 'incident_types_permissions',
        'incidents_permissions': 'incidents_permissions',
        'integrations_permissions': 'integrations_permissions',
        'invitations_permissions': 'invitations_permissions',
        'playbooks_permissions': 'playbooks_permissions',
        'private_incidents_permissions': 'private_incidents_permissions',
        'pulses_permissions': 'pulses_permissions',
        'retrospective_permissions': 'retrospective_permissions',
        'roles_permissions': 'roles_permissions',
        'secrets_permissions': 'secrets_permissions',
        'services_permissions': 'services_permissions',
        'severities_permissions': 'severities_permissions',
        'status_pages_permissions': 'status_pages_permissions',
        'webhooks_permissions': 'webhooks_permissions',
        'workflows_permissions': 'workflows_permissions'
    }

    def __init__(self, name=None, slug=None, incident_permission_set_id=None, alerts_permissions=None, api_keys_permissions=None, audits_permissions=None, billing_permissions=None, environments_permissions=None, form_fields_permissions=None, functionalities_permissions=None, groups_permissions=None, incident_causes_permissions=None, incident_feedbacks_permissions=None, incident_roles_permissions=None, incident_types_permissions=None, incidents_permissions=None, integrations_permissions=None, invitations_permissions=None, playbooks_permissions=None, private_incidents_permissions=None, pulses_permissions=None, retrospective_permissions=None, roles_permissions=None, secrets_permissions=None, services_permissions=None, severities_permissions=None, status_pages_permissions=None, webhooks_permissions=None, workflows_permissions=None):  # noqa: E501
        """NewRoleDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._slug = None
        self._incident_permission_set_id = None
        self._alerts_permissions = None
        self._api_keys_permissions = None
        self._audits_permissions = None
        self._billing_permissions = None
        self._environments_permissions = None
        self._form_fields_permissions = None
        self._functionalities_permissions = None
        self._groups_permissions = None
        self._incident_causes_permissions = None
        self._incident_feedbacks_permissions = None
        self._incident_roles_permissions = None
        self._incident_types_permissions = None
        self._incidents_permissions = None
        self._integrations_permissions = None
        self._invitations_permissions = None
        self._playbooks_permissions = None
        self._private_incidents_permissions = None
        self._pulses_permissions = None
        self._retrospective_permissions = None
        self._roles_permissions = None
        self._secrets_permissions = None
        self._services_permissions = None
        self._severities_permissions = None
        self._status_pages_permissions = None
        self._webhooks_permissions = None
        self._workflows_permissions = None
        self.discriminator = None
        self.name = name
        if slug is not None:
            self.slug = slug
        if incident_permission_set_id is not None:
            self.incident_permission_set_id = incident_permission_set_id
        if alerts_permissions is not None:
            self.alerts_permissions = alerts_permissions
        if api_keys_permissions is not None:
            self.api_keys_permissions = api_keys_permissions
        if audits_permissions is not None:
            self.audits_permissions = audits_permissions
        if billing_permissions is not None:
            self.billing_permissions = billing_permissions
        if environments_permissions is not None:
            self.environments_permissions = environments_permissions
        if form_fields_permissions is not None:
            self.form_fields_permissions = form_fields_permissions
        if functionalities_permissions is not None:
            self.functionalities_permissions = functionalities_permissions
        if groups_permissions is not None:
            self.groups_permissions = groups_permissions
        if incident_causes_permissions is not None:
            self.incident_causes_permissions = incident_causes_permissions
        if incident_feedbacks_permissions is not None:
            self.incident_feedbacks_permissions = incident_feedbacks_permissions
        if incident_roles_permissions is not None:
            self.incident_roles_permissions = incident_roles_permissions
        if incident_types_permissions is not None:
            self.incident_types_permissions = incident_types_permissions
        if incidents_permissions is not None:
            self.incidents_permissions = incidents_permissions
        if integrations_permissions is not None:
            self.integrations_permissions = integrations_permissions
        if invitations_permissions is not None:
            self.invitations_permissions = invitations_permissions
        if playbooks_permissions is not None:
            self.playbooks_permissions = playbooks_permissions
        if private_incidents_permissions is not None:
            self.private_incidents_permissions = private_incidents_permissions
        if pulses_permissions is not None:
            self.pulses_permissions = pulses_permissions
        if retrospective_permissions is not None:
            self.retrospective_permissions = retrospective_permissions
        if roles_permissions is not None:
            self.roles_permissions = roles_permissions
        if secrets_permissions is not None:
            self.secrets_permissions = secrets_permissions
        if services_permissions is not None:
            self.services_permissions = services_permissions
        if severities_permissions is not None:
            self.severities_permissions = severities_permissions
        if status_pages_permissions is not None:
            self.status_pages_permissions = status_pages_permissions
        if webhooks_permissions is not None:
            self.webhooks_permissions = webhooks_permissions
        if workflows_permissions is not None:
            self.workflows_permissions = workflows_permissions

    @property
    def name(self):
        """Gets the name of this NewRoleDataAttributes.  # noqa: E501

        The role name.  # noqa: E501

        :return: The name of this NewRoleDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewRoleDataAttributes.

        The role name.  # noqa: E501

        :param name: The name of this NewRoleDataAttributes.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this NewRoleDataAttributes.  # noqa: E501

        The role slug.  # noqa: E501

        :return: The slug of this NewRoleDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this NewRoleDataAttributes.

        The role slug.  # noqa: E501

        :param slug: The slug of this NewRoleDataAttributes.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def incident_permission_set_id(self):
        """Gets the incident_permission_set_id of this NewRoleDataAttributes.  # noqa: E501

        Associated incident permissions set.  # noqa: E501

        :return: The incident_permission_set_id of this NewRoleDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._incident_permission_set_id

    @incident_permission_set_id.setter
    def incident_permission_set_id(self, incident_permission_set_id):
        """Sets the incident_permission_set_id of this NewRoleDataAttributes.

        Associated incident permissions set.  # noqa: E501

        :param incident_permission_set_id: The incident_permission_set_id of this NewRoleDataAttributes.  # noqa: E501
        :type: str
        """

        self._incident_permission_set_id = incident_permission_set_id

    @property
    def alerts_permissions(self):
        """Gets the alerts_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The alerts_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._alerts_permissions

    @alerts_permissions.setter
    def alerts_permissions(self, alerts_permissions):
        """Sets the alerts_permissions of this NewRoleDataAttributes.


        :param alerts_permissions: The alerts_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read"]  # noqa: E501
        if not set(alerts_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `alerts_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(alerts_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._alerts_permissions = alerts_permissions

    @property
    def api_keys_permissions(self):
        """Gets the api_keys_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The api_keys_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._api_keys_permissions

    @api_keys_permissions.setter
    def api_keys_permissions(self, api_keys_permissions):
        """Sets the api_keys_permissions of this NewRoleDataAttributes.


        :param api_keys_permissions: The api_keys_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(api_keys_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `api_keys_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(api_keys_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._api_keys_permissions = api_keys_permissions

    @property
    def audits_permissions(self):
        """Gets the audits_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The audits_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._audits_permissions

    @audits_permissions.setter
    def audits_permissions(self, audits_permissions):
        """Sets the audits_permissions of this NewRoleDataAttributes.


        :param audits_permissions: The audits_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(audits_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `audits_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(audits_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._audits_permissions = audits_permissions

    @property
    def billing_permissions(self):
        """Gets the billing_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The billing_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._billing_permissions

    @billing_permissions.setter
    def billing_permissions(self, billing_permissions):
        """Sets the billing_permissions of this NewRoleDataAttributes.


        :param billing_permissions: The billing_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(billing_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `billing_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(billing_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._billing_permissions = billing_permissions

    @property
    def environments_permissions(self):
        """Gets the environments_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The environments_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._environments_permissions

    @environments_permissions.setter
    def environments_permissions(self, environments_permissions):
        """Sets the environments_permissions of this NewRoleDataAttributes.


        :param environments_permissions: The environments_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(environments_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `environments_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(environments_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._environments_permissions = environments_permissions

    @property
    def form_fields_permissions(self):
        """Gets the form_fields_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The form_fields_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._form_fields_permissions

    @form_fields_permissions.setter
    def form_fields_permissions(self, form_fields_permissions):
        """Sets the form_fields_permissions of this NewRoleDataAttributes.


        :param form_fields_permissions: The form_fields_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(form_fields_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `form_fields_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(form_fields_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._form_fields_permissions = form_fields_permissions

    @property
    def functionalities_permissions(self):
        """Gets the functionalities_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The functionalities_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._functionalities_permissions

    @functionalities_permissions.setter
    def functionalities_permissions(self, functionalities_permissions):
        """Sets the functionalities_permissions of this NewRoleDataAttributes.


        :param functionalities_permissions: The functionalities_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(functionalities_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `functionalities_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(functionalities_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._functionalities_permissions = functionalities_permissions

    @property
    def groups_permissions(self):
        """Gets the groups_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The groups_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups_permissions

    @groups_permissions.setter
    def groups_permissions(self, groups_permissions):
        """Sets the groups_permissions of this NewRoleDataAttributes.


        :param groups_permissions: The groups_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(groups_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `groups_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(groups_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._groups_permissions = groups_permissions

    @property
    def incident_causes_permissions(self):
        """Gets the incident_causes_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The incident_causes_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._incident_causes_permissions

    @incident_causes_permissions.setter
    def incident_causes_permissions(self, incident_causes_permissions):
        """Sets the incident_causes_permissions of this NewRoleDataAttributes.


        :param incident_causes_permissions: The incident_causes_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(incident_causes_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `incident_causes_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(incident_causes_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._incident_causes_permissions = incident_causes_permissions

    @property
    def incident_feedbacks_permissions(self):
        """Gets the incident_feedbacks_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The incident_feedbacks_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._incident_feedbacks_permissions

    @incident_feedbacks_permissions.setter
    def incident_feedbacks_permissions(self, incident_feedbacks_permissions):
        """Sets the incident_feedbacks_permissions of this NewRoleDataAttributes.


        :param incident_feedbacks_permissions: The incident_feedbacks_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(incident_feedbacks_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `incident_feedbacks_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(incident_feedbacks_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._incident_feedbacks_permissions = incident_feedbacks_permissions

    @property
    def incident_roles_permissions(self):
        """Gets the incident_roles_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The incident_roles_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._incident_roles_permissions

    @incident_roles_permissions.setter
    def incident_roles_permissions(self, incident_roles_permissions):
        """Sets the incident_roles_permissions of this NewRoleDataAttributes.


        :param incident_roles_permissions: The incident_roles_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(incident_roles_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `incident_roles_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(incident_roles_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._incident_roles_permissions = incident_roles_permissions

    @property
    def incident_types_permissions(self):
        """Gets the incident_types_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The incident_types_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._incident_types_permissions

    @incident_types_permissions.setter
    def incident_types_permissions(self, incident_types_permissions):
        """Sets the incident_types_permissions of this NewRoleDataAttributes.


        :param incident_types_permissions: The incident_types_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(incident_types_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `incident_types_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(incident_types_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._incident_types_permissions = incident_types_permissions

    @property
    def incidents_permissions(self):
        """Gets the incidents_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The incidents_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._incidents_permissions

    @incidents_permissions.setter
    def incidents_permissions(self, incidents_permissions):
        """Sets the incidents_permissions of this NewRoleDataAttributes.


        :param incidents_permissions: The incidents_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(incidents_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `incidents_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(incidents_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._incidents_permissions = incidents_permissions

    @property
    def integrations_permissions(self):
        """Gets the integrations_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The integrations_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._integrations_permissions

    @integrations_permissions.setter
    def integrations_permissions(self, integrations_permissions):
        """Sets the integrations_permissions of this NewRoleDataAttributes.


        :param integrations_permissions: The integrations_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(integrations_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `integrations_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(integrations_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._integrations_permissions = integrations_permissions

    @property
    def invitations_permissions(self):
        """Gets the invitations_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The invitations_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._invitations_permissions

    @invitations_permissions.setter
    def invitations_permissions(self, invitations_permissions):
        """Sets the invitations_permissions of this NewRoleDataAttributes.


        :param invitations_permissions: The invitations_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(invitations_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `invitations_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(invitations_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._invitations_permissions = invitations_permissions

    @property
    def playbooks_permissions(self):
        """Gets the playbooks_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The playbooks_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._playbooks_permissions

    @playbooks_permissions.setter
    def playbooks_permissions(self, playbooks_permissions):
        """Sets the playbooks_permissions of this NewRoleDataAttributes.


        :param playbooks_permissions: The playbooks_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(playbooks_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `playbooks_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(playbooks_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._playbooks_permissions = playbooks_permissions

    @property
    def private_incidents_permissions(self):
        """Gets the private_incidents_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The private_incidents_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._private_incidents_permissions

    @private_incidents_permissions.setter
    def private_incidents_permissions(self, private_incidents_permissions):
        """Sets the private_incidents_permissions of this NewRoleDataAttributes.


        :param private_incidents_permissions: The private_incidents_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(private_incidents_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `private_incidents_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(private_incidents_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._private_incidents_permissions = private_incidents_permissions

    @property
    def pulses_permissions(self):
        """Gets the pulses_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The pulses_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._pulses_permissions

    @pulses_permissions.setter
    def pulses_permissions(self, pulses_permissions):
        """Sets the pulses_permissions of this NewRoleDataAttributes.


        :param pulses_permissions: The pulses_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "update", "read"]  # noqa: E501
        if not set(pulses_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `pulses_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(pulses_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._pulses_permissions = pulses_permissions

    @property
    def retrospective_permissions(self):
        """Gets the retrospective_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The retrospective_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._retrospective_permissions

    @retrospective_permissions.setter
    def retrospective_permissions(self, retrospective_permissions):
        """Sets the retrospective_permissions of this NewRoleDataAttributes.


        :param retrospective_permissions: The retrospective_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(retrospective_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `retrospective_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(retrospective_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._retrospective_permissions = retrospective_permissions

    @property
    def roles_permissions(self):
        """Gets the roles_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The roles_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles_permissions

    @roles_permissions.setter
    def roles_permissions(self, roles_permissions):
        """Sets the roles_permissions of this NewRoleDataAttributes.


        :param roles_permissions: The roles_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(roles_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(roles_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._roles_permissions = roles_permissions

    @property
    def secrets_permissions(self):
        """Gets the secrets_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The secrets_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._secrets_permissions

    @secrets_permissions.setter
    def secrets_permissions(self, secrets_permissions):
        """Sets the secrets_permissions of this NewRoleDataAttributes.


        :param secrets_permissions: The secrets_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(secrets_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `secrets_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(secrets_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._secrets_permissions = secrets_permissions

    @property
    def services_permissions(self):
        """Gets the services_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The services_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._services_permissions

    @services_permissions.setter
    def services_permissions(self, services_permissions):
        """Sets the services_permissions of this NewRoleDataAttributes.


        :param services_permissions: The services_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(services_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `services_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(services_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._services_permissions = services_permissions

    @property
    def severities_permissions(self):
        """Gets the severities_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The severities_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._severities_permissions

    @severities_permissions.setter
    def severities_permissions(self, severities_permissions):
        """Sets the severities_permissions of this NewRoleDataAttributes.


        :param severities_permissions: The severities_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(severities_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `severities_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(severities_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._severities_permissions = severities_permissions

    @property
    def status_pages_permissions(self):
        """Gets the status_pages_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The status_pages_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._status_pages_permissions

    @status_pages_permissions.setter
    def status_pages_permissions(self, status_pages_permissions):
        """Sets the status_pages_permissions of this NewRoleDataAttributes.


        :param status_pages_permissions: The status_pages_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(status_pages_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `status_pages_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(status_pages_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._status_pages_permissions = status_pages_permissions

    @property
    def webhooks_permissions(self):
        """Gets the webhooks_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The webhooks_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._webhooks_permissions

    @webhooks_permissions.setter
    def webhooks_permissions(self, webhooks_permissions):
        """Sets the webhooks_permissions of this NewRoleDataAttributes.


        :param webhooks_permissions: The webhooks_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(webhooks_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `webhooks_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(webhooks_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._webhooks_permissions = webhooks_permissions

    @property
    def workflows_permissions(self):
        """Gets the workflows_permissions of this NewRoleDataAttributes.  # noqa: E501


        :return: The workflows_permissions of this NewRoleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._workflows_permissions

    @workflows_permissions.setter
    def workflows_permissions(self, workflows_permissions):
        """Sets the workflows_permissions of this NewRoleDataAttributes.


        :param workflows_permissions: The workflows_permissions of this NewRoleDataAttributes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if not set(workflows_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `workflows_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(workflows_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._workflows_permissions = workflows_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewRoleDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewRoleDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
