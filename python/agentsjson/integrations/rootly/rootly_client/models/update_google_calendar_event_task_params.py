# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateGoogleCalendarEventTaskParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_type': 'str',
        'calendar_id': 'str',
        'event_id': 'str',
        'summary': 'str',
        'description': 'str',
        'adjustment_days': 'int',
        'time_of_meeting': 'str',
        'meeting_duration': 'str',
        'send_updates': 'bool',
        'can_guests_modify_event': 'bool',
        'can_guests_see_other_guests': 'bool',
        'can_guests_invite_others': 'bool',
        'attendees': 'list[str]',
        'replace_attendees': 'bool',
        'conference_solution_key': 'str',
        'post_to_incident_timeline': 'bool',
        'post_to_slack_channels': 'list[AddActionItemTaskParamsPostToSlackChannels]'
    }

    attribute_map = {
        'task_type': 'task_type',
        'calendar_id': 'calendar_id',
        'event_id': 'event_id',
        'summary': 'summary',
        'description': 'description',
        'adjustment_days': 'adjustment_days',
        'time_of_meeting': 'time_of_meeting',
        'meeting_duration': 'meeting_duration',
        'send_updates': 'send_updates',
        'can_guests_modify_event': 'can_guests_modify_event',
        'can_guests_see_other_guests': 'can_guests_see_other_guests',
        'can_guests_invite_others': 'can_guests_invite_others',
        'attendees': 'attendees',
        'replace_attendees': 'replace_attendees',
        'conference_solution_key': 'conference_solution_key',
        'post_to_incident_timeline': 'post_to_incident_timeline',
        'post_to_slack_channels': 'post_to_slack_channels'
    }

    def __init__(self, task_type=None, calendar_id='primary', event_id=None, summary=None, description=None, adjustment_days=None, time_of_meeting=None, meeting_duration=None, send_updates=None, can_guests_modify_event=None, can_guests_see_other_guests=None, can_guests_invite_others=None, attendees=None, replace_attendees=None, conference_solution_key=None, post_to_incident_timeline=None, post_to_slack_channels=None):  # noqa: E501
        """UpdateGoogleCalendarEventTaskParams - a model defined in Swagger"""  # noqa: E501
        self._task_type = None
        self._calendar_id = None
        self._event_id = None
        self._summary = None
        self._description = None
        self._adjustment_days = None
        self._time_of_meeting = None
        self._meeting_duration = None
        self._send_updates = None
        self._can_guests_modify_event = None
        self._can_guests_see_other_guests = None
        self._can_guests_invite_others = None
        self._attendees = None
        self._replace_attendees = None
        self._conference_solution_key = None
        self._post_to_incident_timeline = None
        self._post_to_slack_channels = None
        self.discriminator = None
        if task_type is not None:
            self.task_type = task_type
        if calendar_id is not None:
            self.calendar_id = calendar_id
        self.event_id = event_id
        if summary is not None:
            self.summary = summary
        if description is not None:
            self.description = description
        if adjustment_days is not None:
            self.adjustment_days = adjustment_days
        if time_of_meeting is not None:
            self.time_of_meeting = time_of_meeting
        if meeting_duration is not None:
            self.meeting_duration = meeting_duration
        if send_updates is not None:
            self.send_updates = send_updates
        if can_guests_modify_event is not None:
            self.can_guests_modify_event = can_guests_modify_event
        if can_guests_see_other_guests is not None:
            self.can_guests_see_other_guests = can_guests_see_other_guests
        if can_guests_invite_others is not None:
            self.can_guests_invite_others = can_guests_invite_others
        if attendees is not None:
            self.attendees = attendees
        if replace_attendees is not None:
            self.replace_attendees = replace_attendees
        if conference_solution_key is not None:
            self.conference_solution_key = conference_solution_key
        if post_to_incident_timeline is not None:
            self.post_to_incident_timeline = post_to_incident_timeline
        if post_to_slack_channels is not None:
            self.post_to_slack_channels = post_to_slack_channels

    @property
    def task_type(self):
        """Gets the task_type of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501


        :return: The task_type of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this UpdateGoogleCalendarEventTaskParams.


        :param task_type: The task_type of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["create_google_calendar_event"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def calendar_id(self):
        """Gets the calendar_id of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501


        :return: The calendar_id of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._calendar_id

    @calendar_id.setter
    def calendar_id(self, calendar_id):
        """Sets the calendar_id of this UpdateGoogleCalendarEventTaskParams.


        :param calendar_id: The calendar_id of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: str
        """

        self._calendar_id = calendar_id

    @property
    def event_id(self):
        """Gets the event_id of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501

        The event ID  # noqa: E501

        :return: The event_id of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this UpdateGoogleCalendarEventTaskParams.

        The event ID  # noqa: E501

        :param event_id: The event_id of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: str
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def summary(self):
        """Gets the summary of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501

        The event summary  # noqa: E501

        :return: The summary of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this UpdateGoogleCalendarEventTaskParams.

        The event summary  # noqa: E501

        :param summary: The summary of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def description(self):
        """Gets the description of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501

        The event description  # noqa: E501

        :return: The description of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateGoogleCalendarEventTaskParams.

        The event description  # noqa: E501

        :param description: The description of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def adjustment_days(self):
        """Gets the adjustment_days of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501

        Days to adjust meeting by  # noqa: E501

        :return: The adjustment_days of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: int
        """
        return self._adjustment_days

    @adjustment_days.setter
    def adjustment_days(self, adjustment_days):
        """Sets the adjustment_days of this UpdateGoogleCalendarEventTaskParams.

        Days to adjust meeting by  # noqa: E501

        :param adjustment_days: The adjustment_days of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: int
        """

        self._adjustment_days = adjustment_days

    @property
    def time_of_meeting(self):
        """Gets the time_of_meeting of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501

        Time of meeting in format HH:MM  # noqa: E501

        :return: The time_of_meeting of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._time_of_meeting

    @time_of_meeting.setter
    def time_of_meeting(self, time_of_meeting):
        """Sets the time_of_meeting of this UpdateGoogleCalendarEventTaskParams.

        Time of meeting in format HH:MM  # noqa: E501

        :param time_of_meeting: The time_of_meeting of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: str
        """

        self._time_of_meeting = time_of_meeting

    @property
    def meeting_duration(self):
        """Gets the meeting_duration of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501

        Meeting duration in format like '1 hour', '30 minutes'  # noqa: E501

        :return: The meeting_duration of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._meeting_duration

    @meeting_duration.setter
    def meeting_duration(self, meeting_duration):
        """Sets the meeting_duration of this UpdateGoogleCalendarEventTaskParams.

        Meeting duration in format like '1 hour', '30 minutes'  # noqa: E501

        :param meeting_duration: The meeting_duration of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: str
        """

        self._meeting_duration = meeting_duration

    @property
    def send_updates(self):
        """Gets the send_updates of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501

        Send an email to the attendees notifying them of the event  # noqa: E501

        :return: The send_updates of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._send_updates

    @send_updates.setter
    def send_updates(self, send_updates):
        """Sets the send_updates of this UpdateGoogleCalendarEventTaskParams.

        Send an email to the attendees notifying them of the event  # noqa: E501

        :param send_updates: The send_updates of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: bool
        """

        self._send_updates = send_updates

    @property
    def can_guests_modify_event(self):
        """Gets the can_guests_modify_event of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501


        :return: The can_guests_modify_event of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._can_guests_modify_event

    @can_guests_modify_event.setter
    def can_guests_modify_event(self, can_guests_modify_event):
        """Sets the can_guests_modify_event of this UpdateGoogleCalendarEventTaskParams.


        :param can_guests_modify_event: The can_guests_modify_event of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: bool
        """

        self._can_guests_modify_event = can_guests_modify_event

    @property
    def can_guests_see_other_guests(self):
        """Gets the can_guests_see_other_guests of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501


        :return: The can_guests_see_other_guests of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._can_guests_see_other_guests

    @can_guests_see_other_guests.setter
    def can_guests_see_other_guests(self, can_guests_see_other_guests):
        """Sets the can_guests_see_other_guests of this UpdateGoogleCalendarEventTaskParams.


        :param can_guests_see_other_guests: The can_guests_see_other_guests of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: bool
        """

        self._can_guests_see_other_guests = can_guests_see_other_guests

    @property
    def can_guests_invite_others(self):
        """Gets the can_guests_invite_others of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501


        :return: The can_guests_invite_others of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._can_guests_invite_others

    @can_guests_invite_others.setter
    def can_guests_invite_others(self, can_guests_invite_others):
        """Sets the can_guests_invite_others of this UpdateGoogleCalendarEventTaskParams.


        :param can_guests_invite_others: The can_guests_invite_others of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: bool
        """

        self._can_guests_invite_others = can_guests_invite_others

    @property
    def attendees(self):
        """Gets the attendees of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501

        Emails of attendees  # noqa: E501

        :return: The attendees of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._attendees

    @attendees.setter
    def attendees(self, attendees):
        """Sets the attendees of this UpdateGoogleCalendarEventTaskParams.

        Emails of attendees  # noqa: E501

        :param attendees: The attendees of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: list[str]
        """

        self._attendees = attendees

    @property
    def replace_attendees(self):
        """Gets the replace_attendees of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501


        :return: The replace_attendees of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._replace_attendees

    @replace_attendees.setter
    def replace_attendees(self, replace_attendees):
        """Sets the replace_attendees of this UpdateGoogleCalendarEventTaskParams.


        :param replace_attendees: The replace_attendees of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: bool
        """

        self._replace_attendees = replace_attendees

    @property
    def conference_solution_key(self):
        """Gets the conference_solution_key of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501

        Sets the video conference type attached to the meeting  # noqa: E501

        :return: The conference_solution_key of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._conference_solution_key

    @conference_solution_key.setter
    def conference_solution_key(self, conference_solution_key):
        """Sets the conference_solution_key of this UpdateGoogleCalendarEventTaskParams.

        Sets the video conference type attached to the meeting  # noqa: E501

        :param conference_solution_key: The conference_solution_key of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["eventHangout", "eventNamedHangout", "hangoutsMeet", "addOn"]  # noqa: E501
        if conference_solution_key not in allowed_values:
            raise ValueError(
                "Invalid value for `conference_solution_key` ({0}), must be one of {1}"  # noqa: E501
                .format(conference_solution_key, allowed_values)
            )

        self._conference_solution_key = conference_solution_key

    @property
    def post_to_incident_timeline(self):
        """Gets the post_to_incident_timeline of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501


        :return: The post_to_incident_timeline of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._post_to_incident_timeline

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, post_to_incident_timeline):
        """Sets the post_to_incident_timeline of this UpdateGoogleCalendarEventTaskParams.


        :param post_to_incident_timeline: The post_to_incident_timeline of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: bool
        """

        self._post_to_incident_timeline = post_to_incident_timeline

    @property
    def post_to_slack_channels(self):
        """Gets the post_to_slack_channels of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501


        :return: The post_to_slack_channels of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :rtype: list[AddActionItemTaskParamsPostToSlackChannels]
        """
        return self._post_to_slack_channels

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, post_to_slack_channels):
        """Sets the post_to_slack_channels of this UpdateGoogleCalendarEventTaskParams.


        :param post_to_slack_channels: The post_to_slack_channels of this UpdateGoogleCalendarEventTaskParams.  # noqa: E501
        :type: list[AddActionItemTaskParamsPostToSlackChannels]
        """

        self._post_to_slack_channels = post_to_slack_channels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateGoogleCalendarEventTaskParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateGoogleCalendarEventTaskParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
