# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Playbook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'summary': 'str',
        'external_url': 'str',
        'severity_ids': 'list[str]',
        'environment_ids': 'list[str]',
        'functionality_ids': 'list[str]',
        'service_ids': 'list[str]',
        'group_ids': 'list[str]',
        'incident_type_ids': 'list[str]',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'title': 'title',
        'summary': 'summary',
        'external_url': 'external_url',
        'severity_ids': 'severity_ids',
        'environment_ids': 'environment_ids',
        'functionality_ids': 'functionality_ids',
        'service_ids': 'service_ids',
        'group_ids': 'group_ids',
        'incident_type_ids': 'incident_type_ids',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, title=None, summary=None, external_url=None, severity_ids=None, environment_ids=None, functionality_ids=None, service_ids=None, group_ids=None, incident_type_ids=None, created_at=None, updated_at=None):  # noqa: E501
        """Playbook - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._summary = None
        self._external_url = None
        self._severity_ids = None
        self._environment_ids = None
        self._functionality_ids = None
        self._service_ids = None
        self._group_ids = None
        self._incident_type_ids = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.title = title
        if summary is not None:
            self.summary = summary
        if external_url is not None:
            self.external_url = external_url
        if severity_ids is not None:
            self.severity_ids = severity_ids
        if environment_ids is not None:
            self.environment_ids = environment_ids
        if functionality_ids is not None:
            self.functionality_ids = functionality_ids
        if service_ids is not None:
            self.service_ids = service_ids
        if group_ids is not None:
            self.group_ids = group_ids
        if incident_type_ids is not None:
            self.incident_type_ids = incident_type_ids
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def title(self):
        """Gets the title of this Playbook.  # noqa: E501

        The title of the playbook  # noqa: E501

        :return: The title of this Playbook.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Playbook.

        The title of the playbook  # noqa: E501

        :param title: The title of this Playbook.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def summary(self):
        """Gets the summary of this Playbook.  # noqa: E501

        The summary of the playbook  # noqa: E501

        :return: The summary of this Playbook.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Playbook.

        The summary of the playbook  # noqa: E501

        :param summary: The summary of this Playbook.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def external_url(self):
        """Gets the external_url of this Playbook.  # noqa: E501

        The external url of the playbook  # noqa: E501

        :return: The external_url of this Playbook.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this Playbook.

        The external url of the playbook  # noqa: E501

        :param external_url: The external_url of this Playbook.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def severity_ids(self):
        """Gets the severity_ids of this Playbook.  # noqa: E501

        The Severity ID's to attach to the incident  # noqa: E501

        :return: The severity_ids of this Playbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._severity_ids

    @severity_ids.setter
    def severity_ids(self, severity_ids):
        """Sets the severity_ids of this Playbook.

        The Severity ID's to attach to the incident  # noqa: E501

        :param severity_ids: The severity_ids of this Playbook.  # noqa: E501
        :type: list[str]
        """

        self._severity_ids = severity_ids

    @property
    def environment_ids(self):
        """Gets the environment_ids of this Playbook.  # noqa: E501

        The Environment ID's to attach to the incident  # noqa: E501

        :return: The environment_ids of this Playbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._environment_ids

    @environment_ids.setter
    def environment_ids(self, environment_ids):
        """Sets the environment_ids of this Playbook.

        The Environment ID's to attach to the incident  # noqa: E501

        :param environment_ids: The environment_ids of this Playbook.  # noqa: E501
        :type: list[str]
        """

        self._environment_ids = environment_ids

    @property
    def functionality_ids(self):
        """Gets the functionality_ids of this Playbook.  # noqa: E501

        The Functionality ID's to attach to the incident  # noqa: E501

        :return: The functionality_ids of this Playbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._functionality_ids

    @functionality_ids.setter
    def functionality_ids(self, functionality_ids):
        """Sets the functionality_ids of this Playbook.

        The Functionality ID's to attach to the incident  # noqa: E501

        :param functionality_ids: The functionality_ids of this Playbook.  # noqa: E501
        :type: list[str]
        """

        self._functionality_ids = functionality_ids

    @property
    def service_ids(self):
        """Gets the service_ids of this Playbook.  # noqa: E501

        The Service ID's to attach to the incident  # noqa: E501

        :return: The service_ids of this Playbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_ids

    @service_ids.setter
    def service_ids(self, service_ids):
        """Sets the service_ids of this Playbook.

        The Service ID's to attach to the incident  # noqa: E501

        :param service_ids: The service_ids of this Playbook.  # noqa: E501
        :type: list[str]
        """

        self._service_ids = service_ids

    @property
    def group_ids(self):
        """Gets the group_ids of this Playbook.  # noqa: E501

        The Team ID's to attach to the incident  # noqa: E501

        :return: The group_ids of this Playbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this Playbook.

        The Team ID's to attach to the incident  # noqa: E501

        :param group_ids: The group_ids of this Playbook.  # noqa: E501
        :type: list[str]
        """

        self._group_ids = group_ids

    @property
    def incident_type_ids(self):
        """Gets the incident_type_ids of this Playbook.  # noqa: E501

        The Incident Type ID's to attach to the incident  # noqa: E501

        :return: The incident_type_ids of this Playbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._incident_type_ids

    @incident_type_ids.setter
    def incident_type_ids(self, incident_type_ids):
        """Sets the incident_type_ids of this Playbook.

        The Incident Type ID's to attach to the incident  # noqa: E501

        :param incident_type_ids: The incident_type_ids of this Playbook.  # noqa: E501
        :type: list[str]
        """

        self._incident_type_ids = incident_type_ids

    @property
    def created_at(self):
        """Gets the created_at of this Playbook.  # noqa: E501

        Date of creation  # noqa: E501

        :return: The created_at of this Playbook.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Playbook.

        Date of creation  # noqa: E501

        :param created_at: The created_at of this Playbook.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Playbook.  # noqa: E501

        Date of last update  # noqa: E501

        :return: The updated_at of this Playbook.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Playbook.

        Date of last update  # noqa: E501

        :param updated_at: The updated_at of this Playbook.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Playbook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Playbook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
