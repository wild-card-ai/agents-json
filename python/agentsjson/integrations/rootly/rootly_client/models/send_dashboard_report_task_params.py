# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SendDashboardReportTaskParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_type': 'str',
        'dashboard_ids': 'list[str]',
        '_from': 'str',
        'to': 'list[str]',
        'subject': 'str',
        'preheader': 'str',
        'body': 'str'
    }

    attribute_map = {
        'task_type': 'task_type',
        'dashboard_ids': 'dashboard_ids',
        '_from': 'from',
        'to': 'to',
        'subject': 'subject',
        'preheader': 'preheader',
        'body': 'body'
    }

    def __init__(self, task_type=None, dashboard_ids=None, _from='Rootly <no-reply@rootly.com>', to=None, subject=None, preheader=None, body=None):  # noqa: E501
        """SendDashboardReportTaskParams - a model defined in Swagger"""  # noqa: E501
        self._task_type = None
        self._dashboard_ids = None
        self.__from = None
        self._to = None
        self._subject = None
        self._preheader = None
        self._body = None
        self.discriminator = None
        if task_type is not None:
            self.task_type = task_type
        self.dashboard_ids = dashboard_ids
        if _from is not None:
            self._from = _from
        self.to = to
        self.subject = subject
        if preheader is not None:
            self.preheader = preheader
        self.body = body

    @property
    def task_type(self):
        """Gets the task_type of this SendDashboardReportTaskParams.  # noqa: E501


        :return: The task_type of this SendDashboardReportTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this SendDashboardReportTaskParams.


        :param task_type: The task_type of this SendDashboardReportTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["send_dashboard_report"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def dashboard_ids(self):
        """Gets the dashboard_ids of this SendDashboardReportTaskParams.  # noqa: E501


        :return: The dashboard_ids of this SendDashboardReportTaskParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._dashboard_ids

    @dashboard_ids.setter
    def dashboard_ids(self, dashboard_ids):
        """Sets the dashboard_ids of this SendDashboardReportTaskParams.


        :param dashboard_ids: The dashboard_ids of this SendDashboardReportTaskParams.  # noqa: E501
        :type: list[str]
        """
        if dashboard_ids is None:
            raise ValueError("Invalid value for `dashboard_ids`, must not be `None`")  # noqa: E501

        self._dashboard_ids = dashboard_ids

    @property
    def _from(self):
        """Gets the _from of this SendDashboardReportTaskParams.  # noqa: E501

        The from email address. Need to use SMTP integration if different than rootly.com  # noqa: E501

        :return: The _from of this SendDashboardReportTaskParams.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SendDashboardReportTaskParams.

        The from email address. Need to use SMTP integration if different than rootly.com  # noqa: E501

        :param _from: The _from of this SendDashboardReportTaskParams.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this SendDashboardReportTaskParams.  # noqa: E501


        :return: The to of this SendDashboardReportTaskParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SendDashboardReportTaskParams.


        :param to: The to of this SendDashboardReportTaskParams.  # noqa: E501
        :type: list[str]
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def subject(self):
        """Gets the subject of this SendDashboardReportTaskParams.  # noqa: E501

        The subject  # noqa: E501

        :return: The subject of this SendDashboardReportTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SendDashboardReportTaskParams.

        The subject  # noqa: E501

        :param subject: The subject of this SendDashboardReportTaskParams.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def preheader(self):
        """Gets the preheader of this SendDashboardReportTaskParams.  # noqa: E501

        The preheader  # noqa: E501

        :return: The preheader of this SendDashboardReportTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._preheader

    @preheader.setter
    def preheader(self, preheader):
        """Sets the preheader of this SendDashboardReportTaskParams.

        The preheader  # noqa: E501

        :param preheader: The preheader of this SendDashboardReportTaskParams.  # noqa: E501
        :type: str
        """

        self._preheader = preheader

    @property
    def body(self):
        """Gets the body of this SendDashboardReportTaskParams.  # noqa: E501

        The email body  # noqa: E501

        :return: The body of this SendDashboardReportTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SendDashboardReportTaskParams.

        The email body  # noqa: E501

        :param body: The body of this SendDashboardReportTaskParams.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendDashboardReportTaskParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendDashboardReportTaskParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
