# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SnapshotDatadogGraphTaskParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_type': 'str',
        'dashboards': 'list[AddActionItemTaskParamsPostToSlackChannels]',
        'past_duration': 'str',
        'metric_queries': 'list[str]',
        'post_to_incident_timeline': 'bool',
        'post_to_slack_channels': 'list[AddActionItemTaskParamsPostToSlackChannels]'
    }

    attribute_map = {
        'task_type': 'task_type',
        'dashboards': 'dashboards',
        'past_duration': 'past_duration',
        'metric_queries': 'metric_queries',
        'post_to_incident_timeline': 'post_to_incident_timeline',
        'post_to_slack_channels': 'post_to_slack_channels'
    }

    def __init__(self, task_type=None, dashboards=None, past_duration=None, metric_queries=None, post_to_incident_timeline=None, post_to_slack_channels=None):  # noqa: E501
        """SnapshotDatadogGraphTaskParams - a model defined in Swagger"""  # noqa: E501
        self._task_type = None
        self._dashboards = None
        self._past_duration = None
        self._metric_queries = None
        self._post_to_incident_timeline = None
        self._post_to_slack_channels = None
        self.discriminator = None
        if task_type is not None:
            self.task_type = task_type
        if dashboards is not None:
            self.dashboards = dashboards
        self.past_duration = past_duration
        if metric_queries is not None:
            self.metric_queries = metric_queries
        if post_to_incident_timeline is not None:
            self.post_to_incident_timeline = post_to_incident_timeline
        if post_to_slack_channels is not None:
            self.post_to_slack_channels = post_to_slack_channels

    @property
    def task_type(self):
        """Gets the task_type of this SnapshotDatadogGraphTaskParams.  # noqa: E501


        :return: The task_type of this SnapshotDatadogGraphTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this SnapshotDatadogGraphTaskParams.


        :param task_type: The task_type of this SnapshotDatadogGraphTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["snapshot_datadog_graph"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def dashboards(self):
        """Gets the dashboards of this SnapshotDatadogGraphTaskParams.  # noqa: E501


        :return: The dashboards of this SnapshotDatadogGraphTaskParams.  # noqa: E501
        :rtype: list[AddActionItemTaskParamsPostToSlackChannels]
        """
        return self._dashboards

    @dashboards.setter
    def dashboards(self, dashboards):
        """Sets the dashboards of this SnapshotDatadogGraphTaskParams.


        :param dashboards: The dashboards of this SnapshotDatadogGraphTaskParams.  # noqa: E501
        :type: list[AddActionItemTaskParamsPostToSlackChannels]
        """

        self._dashboards = dashboards

    @property
    def past_duration(self):
        """Gets the past_duration of this SnapshotDatadogGraphTaskParams.  # noqa: E501

        in format '1 minute', '30 days', '3 months', etc  # noqa: E501

        :return: The past_duration of this SnapshotDatadogGraphTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._past_duration

    @past_duration.setter
    def past_duration(self, past_duration):
        """Sets the past_duration of this SnapshotDatadogGraphTaskParams.

        in format '1 minute', '30 days', '3 months', etc  # noqa: E501

        :param past_duration: The past_duration of this SnapshotDatadogGraphTaskParams.  # noqa: E501
        :type: str
        """
        if past_duration is None:
            raise ValueError("Invalid value for `past_duration`, must not be `None`")  # noqa: E501

        self._past_duration = past_duration

    @property
    def metric_queries(self):
        """Gets the metric_queries of this SnapshotDatadogGraphTaskParams.  # noqa: E501


        :return: The metric_queries of this SnapshotDatadogGraphTaskParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._metric_queries

    @metric_queries.setter
    def metric_queries(self, metric_queries):
        """Sets the metric_queries of this SnapshotDatadogGraphTaskParams.


        :param metric_queries: The metric_queries of this SnapshotDatadogGraphTaskParams.  # noqa: E501
        :type: list[str]
        """

        self._metric_queries = metric_queries

    @property
    def post_to_incident_timeline(self):
        """Gets the post_to_incident_timeline of this SnapshotDatadogGraphTaskParams.  # noqa: E501


        :return: The post_to_incident_timeline of this SnapshotDatadogGraphTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._post_to_incident_timeline

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, post_to_incident_timeline):
        """Sets the post_to_incident_timeline of this SnapshotDatadogGraphTaskParams.


        :param post_to_incident_timeline: The post_to_incident_timeline of this SnapshotDatadogGraphTaskParams.  # noqa: E501
        :type: bool
        """

        self._post_to_incident_timeline = post_to_incident_timeline

    @property
    def post_to_slack_channels(self):
        """Gets the post_to_slack_channels of this SnapshotDatadogGraphTaskParams.  # noqa: E501


        :return: The post_to_slack_channels of this SnapshotDatadogGraphTaskParams.  # noqa: E501
        :rtype: list[AddActionItemTaskParamsPostToSlackChannels]
        """
        return self._post_to_slack_channels

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, post_to_slack_channels):
        """Sets the post_to_slack_channels of this SnapshotDatadogGraphTaskParams.


        :param post_to_slack_channels: The post_to_slack_channels of this SnapshotDatadogGraphTaskParams.  # noqa: E501
        :type: list[AddActionItemTaskParamsPostToSlackChannels]
        """

        self._post_to_slack_channels = post_to_slack_channels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnapshotDatadogGraphTaskParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotDatadogGraphTaskParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
