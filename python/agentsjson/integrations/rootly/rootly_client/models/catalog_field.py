# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CatalogField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'catalog_id': 'str',
        'name': 'str',
        'slug': 'str',
        'kind': 'str',
        'kind_catalog_id': 'str',
        'multiple': 'bool',
        'position': 'int',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'catalog_id': 'catalog_id',
        'name': 'name',
        'slug': 'slug',
        'kind': 'kind',
        'kind_catalog_id': 'kind_catalog_id',
        'multiple': 'multiple',
        'position': 'position',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, catalog_id=None, name=None, slug=None, kind=None, kind_catalog_id=None, multiple=None, position=None, created_at=None, updated_at=None):  # noqa: E501
        """CatalogField - a model defined in Swagger"""  # noqa: E501
        self._catalog_id = None
        self._name = None
        self._slug = None
        self._kind = None
        self._kind_catalog_id = None
        self._multiple = None
        self._position = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.catalog_id = catalog_id
        self.name = name
        self.slug = slug
        self.kind = kind
        if kind_catalog_id is not None:
            self.kind_catalog_id = kind_catalog_id
        self.multiple = multiple
        self.position = position
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def catalog_id(self):
        """Gets the catalog_id of this CatalogField.  # noqa: E501


        :return: The catalog_id of this CatalogField.  # noqa: E501
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this CatalogField.


        :param catalog_id: The catalog_id of this CatalogField.  # noqa: E501
        :type: str
        """
        if catalog_id is None:
            raise ValueError("Invalid value for `catalog_id`, must not be `None`")  # noqa: E501

        self._catalog_id = catalog_id

    @property
    def name(self):
        """Gets the name of this CatalogField.  # noqa: E501


        :return: The name of this CatalogField.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogField.


        :param name: The name of this CatalogField.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this CatalogField.  # noqa: E501


        :return: The slug of this CatalogField.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this CatalogField.


        :param slug: The slug of this CatalogField.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def kind(self):
        """Gets the kind of this CatalogField.  # noqa: E501


        :return: The kind of this CatalogField.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CatalogField.


        :param kind: The kind of this CatalogField.  # noqa: E501
        :type: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        allowed_values = ["text", "reference"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def kind_catalog_id(self):
        """Gets the kind_catalog_id of this CatalogField.  # noqa: E501

        Restricts values to items of specified catalog.  # noqa: E501

        :return: The kind_catalog_id of this CatalogField.  # noqa: E501
        :rtype: str
        """
        return self._kind_catalog_id

    @kind_catalog_id.setter
    def kind_catalog_id(self, kind_catalog_id):
        """Sets the kind_catalog_id of this CatalogField.

        Restricts values to items of specified catalog.  # noqa: E501

        :param kind_catalog_id: The kind_catalog_id of this CatalogField.  # noqa: E501
        :type: str
        """

        self._kind_catalog_id = kind_catalog_id

    @property
    def multiple(self):
        """Gets the multiple of this CatalogField.  # noqa: E501

        Whether the attribute accepts multiple values.  # noqa: E501

        :return: The multiple of this CatalogField.  # noqa: E501
        :rtype: bool
        """
        return self._multiple

    @multiple.setter
    def multiple(self, multiple):
        """Sets the multiple of this CatalogField.

        Whether the attribute accepts multiple values.  # noqa: E501

        :param multiple: The multiple of this CatalogField.  # noqa: E501
        :type: bool
        """
        if multiple is None:
            raise ValueError("Invalid value for `multiple`, must not be `None`")  # noqa: E501

        self._multiple = multiple

    @property
    def position(self):
        """Gets the position of this CatalogField.  # noqa: E501

        Default position of the item when displayed in a list.  # noqa: E501

        :return: The position of this CatalogField.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CatalogField.

        Default position of the item when displayed in a list.  # noqa: E501

        :param position: The position of this CatalogField.  # noqa: E501
        :type: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def created_at(self):
        """Gets the created_at of this CatalogField.  # noqa: E501


        :return: The created_at of this CatalogField.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CatalogField.


        :param created_at: The created_at of this CatalogField.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CatalogField.  # noqa: E501


        :return: The updated_at of this CatalogField.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CatalogField.


        :param updated_at: The updated_at of this CatalogField.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CatalogField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
