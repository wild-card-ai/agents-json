# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduleRotation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schedule_id': 'str',
        'name': 'str',
        'position': 'int',
        'schedule_rotationable_type': 'str',
        'active_all_week': 'bool',
        'active_days': 'list[str]',
        'active_time_type': 'list[str]',
        'active_time_attributes': 'list[NewScheduleRotationDataAttributesActiveTimeAttributes]',
        'time_zone': 'str',
        'schedule_rotationable_attributes': 'OneOfscheduleRotationScheduleRotationableAttributes'
    }

    attribute_map = {
        'schedule_id': 'schedule_id',
        'name': 'name',
        'position': 'position',
        'schedule_rotationable_type': 'schedule_rotationable_type',
        'active_all_week': 'active_all_week',
        'active_days': 'active_days',
        'active_time_type': 'active_time_type',
        'active_time_attributes': 'active_time_attributes',
        'time_zone': 'time_zone',
        'schedule_rotationable_attributes': 'schedule_rotationable_attributes'
    }

    def __init__(self, schedule_id=None, name=None, position=None, schedule_rotationable_type=None, active_all_week=True, active_days=None, active_time_type=None, active_time_attributes=None, time_zone='Etc/UTC', schedule_rotationable_attributes=None):  # noqa: E501
        """ScheduleRotation - a model defined in Swagger"""  # noqa: E501
        self._schedule_id = None
        self._name = None
        self._position = None
        self._schedule_rotationable_type = None
        self._active_all_week = None
        self._active_days = None
        self._active_time_type = None
        self._active_time_attributes = None
        self._time_zone = None
        self._schedule_rotationable_attributes = None
        self.discriminator = None
        self.schedule_id = schedule_id
        self.name = name
        if position is not None:
            self.position = position
        self.schedule_rotationable_type = schedule_rotationable_type
        if active_all_week is not None:
            self.active_all_week = active_all_week
        if active_days is not None:
            self.active_days = active_days
        if active_time_type is not None:
            self.active_time_type = active_time_type
        if active_time_attributes is not None:
            self.active_time_attributes = active_time_attributes
        if time_zone is not None:
            self.time_zone = time_zone
        self.schedule_rotationable_attributes = schedule_rotationable_attributes

    @property
    def schedule_id(self):
        """Gets the schedule_id of this ScheduleRotation.  # noqa: E501

        The ID of parent schedule  # noqa: E501

        :return: The schedule_id of this ScheduleRotation.  # noqa: E501
        :rtype: str
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id):
        """Sets the schedule_id of this ScheduleRotation.

        The ID of parent schedule  # noqa: E501

        :param schedule_id: The schedule_id of this ScheduleRotation.  # noqa: E501
        :type: str
        """
        if schedule_id is None:
            raise ValueError("Invalid value for `schedule_id`, must not be `None`")  # noqa: E501

        self._schedule_id = schedule_id

    @property
    def name(self):
        """Gets the name of this ScheduleRotation.  # noqa: E501

        The name of the schedule rotation  # noqa: E501

        :return: The name of this ScheduleRotation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScheduleRotation.

        The name of the schedule rotation  # noqa: E501

        :param name: The name of this ScheduleRotation.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def position(self):
        """Gets the position of this ScheduleRotation.  # noqa: E501

        Position of the schedule rotation  # noqa: E501

        :return: The position of this ScheduleRotation.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ScheduleRotation.

        Position of the schedule rotation  # noqa: E501

        :param position: The position of this ScheduleRotation.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def schedule_rotationable_type(self):
        """Gets the schedule_rotationable_type of this ScheduleRotation.  # noqa: E501

        Schedule rotation type  # noqa: E501

        :return: The schedule_rotationable_type of this ScheduleRotation.  # noqa: E501
        :rtype: str
        """
        return self._schedule_rotationable_type

    @schedule_rotationable_type.setter
    def schedule_rotationable_type(self, schedule_rotationable_type):
        """Sets the schedule_rotationable_type of this ScheduleRotation.

        Schedule rotation type  # noqa: E501

        :param schedule_rotationable_type: The schedule_rotationable_type of this ScheduleRotation.  # noqa: E501
        :type: str
        """
        if schedule_rotationable_type is None:
            raise ValueError("Invalid value for `schedule_rotationable_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ScheduleDailyRotation", "ScheduleWeeklyRotation", "ScheduleBiweeklyRotation", "ScheduleMonthlyRotation", "ScheduleCustomRotation"]  # noqa: E501
        if schedule_rotationable_type not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule_rotationable_type` ({0}), must be one of {1}"  # noqa: E501
                .format(schedule_rotationable_type, allowed_values)
            )

        self._schedule_rotationable_type = schedule_rotationable_type

    @property
    def active_all_week(self):
        """Gets the active_all_week of this ScheduleRotation.  # noqa: E501

        Schedule rotation active all week?  # noqa: E501

        :return: The active_all_week of this ScheduleRotation.  # noqa: E501
        :rtype: bool
        """
        return self._active_all_week

    @active_all_week.setter
    def active_all_week(self, active_all_week):
        """Sets the active_all_week of this ScheduleRotation.

        Schedule rotation active all week?  # noqa: E501

        :param active_all_week: The active_all_week of this ScheduleRotation.  # noqa: E501
        :type: bool
        """

        self._active_all_week = active_all_week

    @property
    def active_days(self):
        """Gets the active_days of this ScheduleRotation.  # noqa: E501


        :return: The active_days of this ScheduleRotation.  # noqa: E501
        :rtype: list[str]
        """
        return self._active_days

    @active_days.setter
    def active_days(self, active_days):
        """Sets the active_days of this ScheduleRotation.


        :param active_days: The active_days of this ScheduleRotation.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["S", "M", "T", "W", "R", "F", "U"]  # noqa: E501
        if not set(active_days).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `active_days` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(active_days) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._active_days = active_days

    @property
    def active_time_type(self):
        """Gets the active_time_type of this ScheduleRotation.  # noqa: E501


        :return: The active_time_type of this ScheduleRotation.  # noqa: E501
        :rtype: list[str]
        """
        return self._active_time_type

    @active_time_type.setter
    def active_time_type(self, active_time_type):
        """Sets the active_time_type of this ScheduleRotation.


        :param active_time_type: The active_time_type of this ScheduleRotation.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["all_day", "same_time", "custom"]  # noqa: E501
        if not set(active_time_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `active_time_type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(active_time_type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._active_time_type = active_time_type

    @property
    def active_time_attributes(self):
        """Gets the active_time_attributes of this ScheduleRotation.  # noqa: E501

        Schedule rotation's active times  # noqa: E501

        :return: The active_time_attributes of this ScheduleRotation.  # noqa: E501
        :rtype: list[NewScheduleRotationDataAttributesActiveTimeAttributes]
        """
        return self._active_time_attributes

    @active_time_attributes.setter
    def active_time_attributes(self, active_time_attributes):
        """Sets the active_time_attributes of this ScheduleRotation.

        Schedule rotation's active times  # noqa: E501

        :param active_time_attributes: The active_time_attributes of this ScheduleRotation.  # noqa: E501
        :type: list[NewScheduleRotationDataAttributesActiveTimeAttributes]
        """

        self._active_time_attributes = active_time_attributes

    @property
    def time_zone(self):
        """Gets the time_zone of this ScheduleRotation.  # noqa: E501

        A valid IANA time zone name.  # noqa: E501

        :return: The time_zone of this ScheduleRotation.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ScheduleRotation.

        A valid IANA time zone name.  # noqa: E501

        :param time_zone: The time_zone of this ScheduleRotation.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def schedule_rotationable_attributes(self):
        """Gets the schedule_rotationable_attributes of this ScheduleRotation.  # noqa: E501


        :return: The schedule_rotationable_attributes of this ScheduleRotation.  # noqa: E501
        :rtype: OneOfscheduleRotationScheduleRotationableAttributes
        """
        return self._schedule_rotationable_attributes

    @schedule_rotationable_attributes.setter
    def schedule_rotationable_attributes(self, schedule_rotationable_attributes):
        """Sets the schedule_rotationable_attributes of this ScheduleRotation.


        :param schedule_rotationable_attributes: The schedule_rotationable_attributes of this ScheduleRotation.  # noqa: E501
        :type: OneOfscheduleRotationScheduleRotationableAttributes
        """
        if schedule_rotationable_attributes is None:
            raise ValueError("Invalid value for `schedule_rotationable_attributes`, must not be `None`")  # noqa: E501

        self._schedule_rotationable_attributes = schedule_rotationable_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleRotation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleRotation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
