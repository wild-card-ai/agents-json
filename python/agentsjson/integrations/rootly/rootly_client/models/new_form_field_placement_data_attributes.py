# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewFormFieldPlacementDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'form_set_id': 'str',
        'form': 'str',
        'position': 'int',
        'required': 'bool',
        'required_operator': 'str',
        'placement_operator': 'str'
    }

    attribute_map = {
        'form_set_id': 'form_set_id',
        'form': 'form',
        'position': 'position',
        'required': 'required',
        'required_operator': 'required_operator',
        'placement_operator': 'placement_operator'
    }

    def __init__(self, form_set_id=None, form=None, position=None, required=None, required_operator=None, placement_operator=None):  # noqa: E501
        """NewFormFieldPlacementDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._form_set_id = None
        self._form = None
        self._position = None
        self._required = None
        self._required_operator = None
        self._placement_operator = None
        self.discriminator = None
        self.form_set_id = form_set_id
        self.form = form
        if position is not None:
            self.position = position
        if required is not None:
            self.required = required
        if required_operator is not None:
            self.required_operator = required_operator
        if placement_operator is not None:
            self.placement_operator = placement_operator

    @property
    def form_set_id(self):
        """Gets the form_set_id of this NewFormFieldPlacementDataAttributes.  # noqa: E501

        The form set this field is placed in.  # noqa: E501

        :return: The form_set_id of this NewFormFieldPlacementDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._form_set_id

    @form_set_id.setter
    def form_set_id(self, form_set_id):
        """Sets the form_set_id of this NewFormFieldPlacementDataAttributes.

        The form set this field is placed in.  # noqa: E501

        :param form_set_id: The form_set_id of this NewFormFieldPlacementDataAttributes.  # noqa: E501
        :type: str
        """
        if form_set_id is None:
            raise ValueError("Invalid value for `form_set_id`, must not be `None`")  # noqa: E501

        self._form_set_id = form_set_id

    @property
    def form(self):
        """Gets the form of this NewFormFieldPlacementDataAttributes.  # noqa: E501

        The form this field is placed on.  # noqa: E501

        :return: The form of this NewFormFieldPlacementDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this NewFormFieldPlacementDataAttributes.

        The form this field is placed on.  # noqa: E501

        :param form: The form of this NewFormFieldPlacementDataAttributes.  # noqa: E501
        :type: str
        """
        if form is None:
            raise ValueError("Invalid value for `form`, must not be `None`")  # noqa: E501

        self._form = form

    @property
    def position(self):
        """Gets the position of this NewFormFieldPlacementDataAttributes.  # noqa: E501

        The position of the field placement.  # noqa: E501

        :return: The position of this NewFormFieldPlacementDataAttributes.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this NewFormFieldPlacementDataAttributes.

        The position of the field placement.  # noqa: E501

        :param position: The position of this NewFormFieldPlacementDataAttributes.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def required(self):
        """Gets the required of this NewFormFieldPlacementDataAttributes.  # noqa: E501

        Whether the field is unconditionally required on this form.  # noqa: E501

        :return: The required of this NewFormFieldPlacementDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this NewFormFieldPlacementDataAttributes.

        Whether the field is unconditionally required on this form.  # noqa: E501

        :param required: The required of this NewFormFieldPlacementDataAttributes.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def required_operator(self):
        """Gets the required_operator of this NewFormFieldPlacementDataAttributes.  # noqa: E501

        Logical operator when evaluating multiple form_field_placement_conditions with conditioned=required  # noqa: E501

        :return: The required_operator of this NewFormFieldPlacementDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._required_operator

    @required_operator.setter
    def required_operator(self, required_operator):
        """Sets the required_operator of this NewFormFieldPlacementDataAttributes.

        Logical operator when evaluating multiple form_field_placement_conditions with conditioned=required  # noqa: E501

        :param required_operator: The required_operator of this NewFormFieldPlacementDataAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["and", "or"]  # noqa: E501
        if required_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `required_operator` ({0}), must be one of {1}"  # noqa: E501
                .format(required_operator, allowed_values)
            )

        self._required_operator = required_operator

    @property
    def placement_operator(self):
        """Gets the placement_operator of this NewFormFieldPlacementDataAttributes.  # noqa: E501

        Logical operator when evaluating multiple form_field_placement_conditions with conditioned=placement  # noqa: E501

        :return: The placement_operator of this NewFormFieldPlacementDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._placement_operator

    @placement_operator.setter
    def placement_operator(self, placement_operator):
        """Sets the placement_operator of this NewFormFieldPlacementDataAttributes.

        Logical operator when evaluating multiple form_field_placement_conditions with conditioned=placement  # noqa: E501

        :param placement_operator: The placement_operator of this NewFormFieldPlacementDataAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["and", "or"]  # noqa: E501
        if placement_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `placement_operator` ({0}), must be one of {1}"  # noqa: E501
                .format(placement_operator, allowed_values)
            )

        self._placement_operator = placement_operator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewFormFieldPlacementDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewFormFieldPlacementDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
