# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SendEmailTaskParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_type': 'str',
        '_from': 'str',
        'to': 'list[str]',
        'cc': 'list[str]',
        'bcc': 'list[str]',
        'subject': 'str',
        'preheader': 'str',
        'body': 'str',
        'include_header': 'bool',
        'include_footer': 'bool',
        'custom_logo_url': 'str'
    }

    attribute_map = {
        'task_type': 'task_type',
        '_from': 'from',
        'to': 'to',
        'cc': 'cc',
        'bcc': 'bcc',
        'subject': 'subject',
        'preheader': 'preheader',
        'body': 'body',
        'include_header': 'include_header',
        'include_footer': 'include_footer',
        'custom_logo_url': 'custom_logo_url'
    }

    def __init__(self, task_type=None, _from='Rootly <no-reply@rootly.com>', to=None, cc=None, bcc=None, subject=None, preheader=None, body=None, include_header=None, include_footer=None, custom_logo_url=None):  # noqa: E501
        """SendEmailTaskParams - a model defined in Swagger"""  # noqa: E501
        self._task_type = None
        self.__from = None
        self._to = None
        self._cc = None
        self._bcc = None
        self._subject = None
        self._preheader = None
        self._body = None
        self._include_header = None
        self._include_footer = None
        self._custom_logo_url = None
        self.discriminator = None
        if task_type is not None:
            self.task_type = task_type
        if _from is not None:
            self._from = _from
        self.to = to
        if cc is not None:
            self.cc = cc
        if bcc is not None:
            self.bcc = bcc
        self.subject = subject
        if preheader is not None:
            self.preheader = preheader
        self.body = body
        if include_header is not None:
            self.include_header = include_header
        if include_footer is not None:
            self.include_footer = include_footer
        if custom_logo_url is not None:
            self.custom_logo_url = custom_logo_url

    @property
    def task_type(self):
        """Gets the task_type of this SendEmailTaskParams.  # noqa: E501


        :return: The task_type of this SendEmailTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this SendEmailTaskParams.


        :param task_type: The task_type of this SendEmailTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["send_email"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def _from(self):
        """Gets the _from of this SendEmailTaskParams.  # noqa: E501

        The from email address. Need to use SMTP integration if different than rootly.com  # noqa: E501

        :return: The _from of this SendEmailTaskParams.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SendEmailTaskParams.

        The from email address. Need to use SMTP integration if different than rootly.com  # noqa: E501

        :param _from: The _from of this SendEmailTaskParams.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this SendEmailTaskParams.  # noqa: E501


        :return: The to of this SendEmailTaskParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SendEmailTaskParams.


        :param to: The to of this SendEmailTaskParams.  # noqa: E501
        :type: list[str]
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def cc(self):
        """Gets the cc of this SendEmailTaskParams.  # noqa: E501


        :return: The cc of this SendEmailTaskParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this SendEmailTaskParams.


        :param cc: The cc of this SendEmailTaskParams.  # noqa: E501
        :type: list[str]
        """

        self._cc = cc

    @property
    def bcc(self):
        """Gets the bcc of this SendEmailTaskParams.  # noqa: E501


        :return: The bcc of this SendEmailTaskParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this SendEmailTaskParams.


        :param bcc: The bcc of this SendEmailTaskParams.  # noqa: E501
        :type: list[str]
        """

        self._bcc = bcc

    @property
    def subject(self):
        """Gets the subject of this SendEmailTaskParams.  # noqa: E501

        The subject  # noqa: E501

        :return: The subject of this SendEmailTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SendEmailTaskParams.

        The subject  # noqa: E501

        :param subject: The subject of this SendEmailTaskParams.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def preheader(self):
        """Gets the preheader of this SendEmailTaskParams.  # noqa: E501

        The preheader  # noqa: E501

        :return: The preheader of this SendEmailTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._preheader

    @preheader.setter
    def preheader(self, preheader):
        """Sets the preheader of this SendEmailTaskParams.

        The preheader  # noqa: E501

        :param preheader: The preheader of this SendEmailTaskParams.  # noqa: E501
        :type: str
        """

        self._preheader = preheader

    @property
    def body(self):
        """Gets the body of this SendEmailTaskParams.  # noqa: E501

        The email body  # noqa: E501

        :return: The body of this SendEmailTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SendEmailTaskParams.

        The email body  # noqa: E501

        :param body: The body of this SendEmailTaskParams.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def include_header(self):
        """Gets the include_header of this SendEmailTaskParams.  # noqa: E501


        :return: The include_header of this SendEmailTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_header

    @include_header.setter
    def include_header(self, include_header):
        """Sets the include_header of this SendEmailTaskParams.


        :param include_header: The include_header of this SendEmailTaskParams.  # noqa: E501
        :type: bool
        """

        self._include_header = include_header

    @property
    def include_footer(self):
        """Gets the include_footer of this SendEmailTaskParams.  # noqa: E501


        :return: The include_footer of this SendEmailTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_footer

    @include_footer.setter
    def include_footer(self, include_footer):
        """Sets the include_footer of this SendEmailTaskParams.


        :param include_footer: The include_footer of this SendEmailTaskParams.  # noqa: E501
        :type: bool
        """

        self._include_footer = include_footer

    @property
    def custom_logo_url(self):
        """Gets the custom_logo_url of this SendEmailTaskParams.  # noqa: E501

        URL to your custom email logo  # noqa: E501

        :return: The custom_logo_url of this SendEmailTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._custom_logo_url

    @custom_logo_url.setter
    def custom_logo_url(self, custom_logo_url):
        """Sets the custom_logo_url of this SendEmailTaskParams.

        URL to your custom email logo  # noqa: E501

        :param custom_logo_url: The custom_logo_url of this SendEmailTaskParams.  # noqa: E501
        :type: str
        """

        self._custom_logo_url = custom_logo_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendEmailTaskParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendEmailTaskParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
