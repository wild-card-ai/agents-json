# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Heartbeat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'alert_summary': 'str',
        'alert_urgency_id': 'str',
        'interval': 'int',
        'interval_unit': 'str',
        'notification_target_id': 'str',
        'notification_target_type': 'str',
        'enabled': 'bool',
        'status': 'str',
        'last_pinged_at': 'str',
        'expires_at': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'alert_summary': 'alert_summary',
        'alert_urgency_id': 'alert_urgency_id',
        'interval': 'interval',
        'interval_unit': 'interval_unit',
        'notification_target_id': 'notification_target_id',
        'notification_target_type': 'notification_target_type',
        'enabled': 'enabled',
        'status': 'status',
        'last_pinged_at': 'last_pinged_at',
        'expires_at': 'expires_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, name=None, description=None, alert_summary=None, alert_urgency_id=None, interval=None, interval_unit=None, notification_target_id=None, notification_target_type=None, enabled=None, status=None, last_pinged_at=None, expires_at=None, created_at=None, updated_at=None):  # noqa: E501
        """Heartbeat - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._alert_summary = None
        self._alert_urgency_id = None
        self._interval = None
        self._interval_unit = None
        self._notification_target_id = None
        self._notification_target_type = None
        self._enabled = None
        self._status = None
        self._last_pinged_at = None
        self._expires_at = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        self.alert_summary = alert_summary
        if alert_urgency_id is not None:
            self.alert_urgency_id = alert_urgency_id
        self.interval = interval
        self.interval_unit = interval_unit
        self.notification_target_id = notification_target_id
        self.notification_target_type = notification_target_type
        self.enabled = enabled
        self.status = status
        if last_pinged_at is not None:
            self.last_pinged_at = last_pinged_at
        if expires_at is not None:
            self.expires_at = expires_at
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def name(self):
        """Gets the name of this Heartbeat.  # noqa: E501

        The name of the heartbeat  # noqa: E501

        :return: The name of this Heartbeat.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Heartbeat.

        The name of the heartbeat  # noqa: E501

        :param name: The name of this Heartbeat.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Heartbeat.  # noqa: E501

        The description of the heartbeat  # noqa: E501

        :return: The description of this Heartbeat.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Heartbeat.

        The description of the heartbeat  # noqa: E501

        :param description: The description of this Heartbeat.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def alert_summary(self):
        """Gets the alert_summary of this Heartbeat.  # noqa: E501

        Summary of alerts triggered when heartbeat expires.  # noqa: E501

        :return: The alert_summary of this Heartbeat.  # noqa: E501
        :rtype: str
        """
        return self._alert_summary

    @alert_summary.setter
    def alert_summary(self, alert_summary):
        """Sets the alert_summary of this Heartbeat.

        Summary of alerts triggered when heartbeat expires.  # noqa: E501

        :param alert_summary: The alert_summary of this Heartbeat.  # noqa: E501
        :type: str
        """
        if alert_summary is None:
            raise ValueError("Invalid value for `alert_summary`, must not be `None`")  # noqa: E501

        self._alert_summary = alert_summary

    @property
    def alert_urgency_id(self):
        """Gets the alert_urgency_id of this Heartbeat.  # noqa: E501

        Urgency of alerts triggered when heartbeat expires.  # noqa: E501

        :return: The alert_urgency_id of this Heartbeat.  # noqa: E501
        :rtype: str
        """
        return self._alert_urgency_id

    @alert_urgency_id.setter
    def alert_urgency_id(self, alert_urgency_id):
        """Sets the alert_urgency_id of this Heartbeat.

        Urgency of alerts triggered when heartbeat expires.  # noqa: E501

        :param alert_urgency_id: The alert_urgency_id of this Heartbeat.  # noqa: E501
        :type: str
        """

        self._alert_urgency_id = alert_urgency_id

    @property
    def interval(self):
        """Gets the interval of this Heartbeat.  # noqa: E501


        :return: The interval of this Heartbeat.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Heartbeat.


        :param interval: The interval of this Heartbeat.  # noqa: E501
        :type: int
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval

    @property
    def interval_unit(self):
        """Gets the interval_unit of this Heartbeat.  # noqa: E501


        :return: The interval_unit of this Heartbeat.  # noqa: E501
        :rtype: str
        """
        return self._interval_unit

    @interval_unit.setter
    def interval_unit(self, interval_unit):
        """Sets the interval_unit of this Heartbeat.


        :param interval_unit: The interval_unit of this Heartbeat.  # noqa: E501
        :type: str
        """
        if interval_unit is None:
            raise ValueError("Invalid value for `interval_unit`, must not be `None`")  # noqa: E501
        allowed_values = ["seconds", "minutes", "hours"]  # noqa: E501
        if interval_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `interval_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(interval_unit, allowed_values)
            )

        self._interval_unit = interval_unit

    @property
    def notification_target_id(self):
        """Gets the notification_target_id of this Heartbeat.  # noqa: E501


        :return: The notification_target_id of this Heartbeat.  # noqa: E501
        :rtype: str
        """
        return self._notification_target_id

    @notification_target_id.setter
    def notification_target_id(self, notification_target_id):
        """Sets the notification_target_id of this Heartbeat.


        :param notification_target_id: The notification_target_id of this Heartbeat.  # noqa: E501
        :type: str
        """
        if notification_target_id is None:
            raise ValueError("Invalid value for `notification_target_id`, must not be `None`")  # noqa: E501

        self._notification_target_id = notification_target_id

    @property
    def notification_target_type(self):
        """Gets the notification_target_type of this Heartbeat.  # noqa: E501


        :return: The notification_target_type of this Heartbeat.  # noqa: E501
        :rtype: str
        """
        return self._notification_target_type

    @notification_target_type.setter
    def notification_target_type(self, notification_target_type):
        """Sets the notification_target_type of this Heartbeat.


        :param notification_target_type: The notification_target_type of this Heartbeat.  # noqa: E501
        :type: str
        """
        if notification_target_type is None:
            raise ValueError("Invalid value for `notification_target_type`, must not be `None`")  # noqa: E501
        allowed_values = ["User", "Group", "Service", "EscalationPolicy"]  # noqa: E501
        if notification_target_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_target_type` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_target_type, allowed_values)
            )

        self._notification_target_type = notification_target_type

    @property
    def enabled(self):
        """Gets the enabled of this Heartbeat.  # noqa: E501

        Whether to trigger alerts when heartbeat is expired.  # noqa: E501

        :return: The enabled of this Heartbeat.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Heartbeat.

        Whether to trigger alerts when heartbeat is expired.  # noqa: E501

        :param enabled: The enabled of this Heartbeat.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def status(self):
        """Gets the status of this Heartbeat.  # noqa: E501


        :return: The status of this Heartbeat.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Heartbeat.


        :param status: The status of this Heartbeat.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["waiting", "active", "expired"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def last_pinged_at(self):
        """Gets the last_pinged_at of this Heartbeat.  # noqa: E501

        When the heartbeat was last pinged.  # noqa: E501

        :return: The last_pinged_at of this Heartbeat.  # noqa: E501
        :rtype: str
        """
        return self._last_pinged_at

    @last_pinged_at.setter
    def last_pinged_at(self, last_pinged_at):
        """Sets the last_pinged_at of this Heartbeat.

        When the heartbeat was last pinged.  # noqa: E501

        :param last_pinged_at: The last_pinged_at of this Heartbeat.  # noqa: E501
        :type: str
        """

        self._last_pinged_at = last_pinged_at

    @property
    def expires_at(self):
        """Gets the expires_at of this Heartbeat.  # noqa: E501

        When heartbeat expires  # noqa: E501

        :return: The expires_at of this Heartbeat.  # noqa: E501
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Heartbeat.

        When heartbeat expires  # noqa: E501

        :param expires_at: The expires_at of this Heartbeat.  # noqa: E501
        :type: str
        """

        self._expires_at = expires_at

    @property
    def created_at(self):
        """Gets the created_at of this Heartbeat.  # noqa: E501

        Date of creation  # noqa: E501

        :return: The created_at of this Heartbeat.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Heartbeat.

        Date of creation  # noqa: E501

        :param created_at: The created_at of this Heartbeat.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Heartbeat.  # noqa: E501

        Date of last update  # noqa: E501

        :return: The updated_at of this Heartbeat.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Heartbeat.

        Date of last update  # noqa: E501

        :param updated_at: The updated_at of this Heartbeat.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Heartbeat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Heartbeat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
