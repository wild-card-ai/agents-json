# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddActionItemTaskParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_type': 'str',
        'attribute_to_query_by': 'str',
        'query_value': 'str',
        'incident_role_id': 'str',
        'assigned_to_user_id': 'str',
        'assigned_to_user': 'AddActionItemTaskParamsAssignedToUser',
        'priority': 'str',
        'kind': 'str',
        'summary': 'str',
        'description': 'str',
        'status': 'str',
        'post_to_incident_timeline': 'bool',
        'custom_fields_mapping': 'str',
        'post_to_slack_channels': 'list[AddActionItemTaskParamsPostToSlackChannels]'
    }

    attribute_map = {
        'task_type': 'task_type',
        'attribute_to_query_by': 'attribute_to_query_by',
        'query_value': 'query_value',
        'incident_role_id': 'incident_role_id',
        'assigned_to_user_id': 'assigned_to_user_id',
        'assigned_to_user': 'assigned_to_user',
        'priority': 'priority',
        'kind': 'kind',
        'summary': 'summary',
        'description': 'description',
        'status': 'status',
        'post_to_incident_timeline': 'post_to_incident_timeline',
        'custom_fields_mapping': 'custom_fields_mapping',
        'post_to_slack_channels': 'post_to_slack_channels'
    }

    def __init__(self, task_type=None, attribute_to_query_by=None, query_value=None, incident_role_id=None, assigned_to_user_id=None, assigned_to_user=None, priority=None, kind=None, summary=None, description=None, status=None, post_to_incident_timeline=None, custom_fields_mapping=None, post_to_slack_channels=None):  # noqa: E501
        """AddActionItemTaskParams - a model defined in Swagger"""  # noqa: E501
        self._task_type = None
        self._attribute_to_query_by = None
        self._query_value = None
        self._incident_role_id = None
        self._assigned_to_user_id = None
        self._assigned_to_user = None
        self._priority = None
        self._kind = None
        self._summary = None
        self._description = None
        self._status = None
        self._post_to_incident_timeline = None
        self._custom_fields_mapping = None
        self._post_to_slack_channels = None
        self.discriminator = None
        if task_type is not None:
            self.task_type = task_type
        if attribute_to_query_by is not None:
            self.attribute_to_query_by = attribute_to_query_by
        if query_value is not None:
            self.query_value = query_value
        if incident_role_id is not None:
            self.incident_role_id = incident_role_id
        if assigned_to_user_id is not None:
            self.assigned_to_user_id = assigned_to_user_id
        if assigned_to_user is not None:
            self.assigned_to_user = assigned_to_user
        self.priority = priority
        if kind is not None:
            self.kind = kind
        self.summary = summary
        if description is not None:
            self.description = description
        self.status = status
        if post_to_incident_timeline is not None:
            self.post_to_incident_timeline = post_to_incident_timeline
        if custom_fields_mapping is not None:
            self.custom_fields_mapping = custom_fields_mapping
        if post_to_slack_channels is not None:
            self.post_to_slack_channels = post_to_slack_channels

    @property
    def task_type(self):
        """Gets the task_type of this AddActionItemTaskParams.  # noqa: E501


        :return: The task_type of this AddActionItemTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this AddActionItemTaskParams.


        :param task_type: The task_type of this AddActionItemTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["add_action_item"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def attribute_to_query_by(self):
        """Gets the attribute_to_query_by of this AddActionItemTaskParams.  # noqa: E501

        Attribute of the Incident to match against  # noqa: E501

        :return: The attribute_to_query_by of this AddActionItemTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._attribute_to_query_by

    @attribute_to_query_by.setter
    def attribute_to_query_by(self, attribute_to_query_by):
        """Sets the attribute_to_query_by of this AddActionItemTaskParams.

        Attribute of the Incident to match against  # noqa: E501

        :param attribute_to_query_by: The attribute_to_query_by of this AddActionItemTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["jira_issue_id"]  # noqa: E501
        if attribute_to_query_by not in allowed_values:
            raise ValueError(
                "Invalid value for `attribute_to_query_by` ({0}), must be one of {1}"  # noqa: E501
                .format(attribute_to_query_by, allowed_values)
            )

        self._attribute_to_query_by = attribute_to_query_by

    @property
    def query_value(self):
        """Gets the query_value of this AddActionItemTaskParams.  # noqa: E501

        Value that attribute_to_query_by to uses to match against  # noqa: E501

        :return: The query_value of this AddActionItemTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._query_value

    @query_value.setter
    def query_value(self, query_value):
        """Sets the query_value of this AddActionItemTaskParams.

        Value that attribute_to_query_by to uses to match against  # noqa: E501

        :param query_value: The query_value of this AddActionItemTaskParams.  # noqa: E501
        :type: str
        """

        self._query_value = query_value

    @property
    def incident_role_id(self):
        """Gets the incident_role_id of this AddActionItemTaskParams.  # noqa: E501

        The role id this action item is associated with  # noqa: E501

        :return: The incident_role_id of this AddActionItemTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_role_id

    @incident_role_id.setter
    def incident_role_id(self, incident_role_id):
        """Sets the incident_role_id of this AddActionItemTaskParams.

        The role id this action item is associated with  # noqa: E501

        :param incident_role_id: The incident_role_id of this AddActionItemTaskParams.  # noqa: E501
        :type: str
        """

        self._incident_role_id = incident_role_id

    @property
    def assigned_to_user_id(self):
        """Gets the assigned_to_user_id of this AddActionItemTaskParams.  # noqa: E501

        [DEPRECATED] Use assigned_to_user attribute instead. The user id this action item is assigned to  # noqa: E501

        :return: The assigned_to_user_id of this AddActionItemTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to_user_id

    @assigned_to_user_id.setter
    def assigned_to_user_id(self, assigned_to_user_id):
        """Sets the assigned_to_user_id of this AddActionItemTaskParams.

        [DEPRECATED] Use assigned_to_user attribute instead. The user id this action item is assigned to  # noqa: E501

        :param assigned_to_user_id: The assigned_to_user_id of this AddActionItemTaskParams.  # noqa: E501
        :type: str
        """

        self._assigned_to_user_id = assigned_to_user_id

    @property
    def assigned_to_user(self):
        """Gets the assigned_to_user of this AddActionItemTaskParams.  # noqa: E501


        :return: The assigned_to_user of this AddActionItemTaskParams.  # noqa: E501
        :rtype: AddActionItemTaskParamsAssignedToUser
        """
        return self._assigned_to_user

    @assigned_to_user.setter
    def assigned_to_user(self, assigned_to_user):
        """Sets the assigned_to_user of this AddActionItemTaskParams.


        :param assigned_to_user: The assigned_to_user of this AddActionItemTaskParams.  # noqa: E501
        :type: AddActionItemTaskParamsAssignedToUser
        """

        self._assigned_to_user = assigned_to_user

    @property
    def priority(self):
        """Gets the priority of this AddActionItemTaskParams.  # noqa: E501

        The action item priority  # noqa: E501

        :return: The priority of this AddActionItemTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AddActionItemTaskParams.

        The action item priority  # noqa: E501

        :param priority: The priority of this AddActionItemTaskParams.  # noqa: E501
        :type: str
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501
        allowed_values = ["high", "medium", "low"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def kind(self):
        """Gets the kind of this AddActionItemTaskParams.  # noqa: E501

        The action item kind  # noqa: E501

        :return: The kind of this AddActionItemTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AddActionItemTaskParams.

        The action item kind  # noqa: E501

        :param kind: The kind of this AddActionItemTaskParams.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def summary(self):
        """Gets the summary of this AddActionItemTaskParams.  # noqa: E501

        The action item summary  # noqa: E501

        :return: The summary of this AddActionItemTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this AddActionItemTaskParams.

        The action item summary  # noqa: E501

        :param summary: The summary of this AddActionItemTaskParams.  # noqa: E501
        :type: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501

        self._summary = summary

    @property
    def description(self):
        """Gets the description of this AddActionItemTaskParams.  # noqa: E501

        The action item description  # noqa: E501

        :return: The description of this AddActionItemTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddActionItemTaskParams.

        The action item description  # noqa: E501

        :param description: The description of this AddActionItemTaskParams.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this AddActionItemTaskParams.  # noqa: E501

        The action item status  # noqa: E501

        :return: The status of this AddActionItemTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AddActionItemTaskParams.

        The action item status  # noqa: E501

        :param status: The status of this AddActionItemTaskParams.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["open", "in_progress", "cancelled", "done"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def post_to_incident_timeline(self):
        """Gets the post_to_incident_timeline of this AddActionItemTaskParams.  # noqa: E501


        :return: The post_to_incident_timeline of this AddActionItemTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._post_to_incident_timeline

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, post_to_incident_timeline):
        """Sets the post_to_incident_timeline of this AddActionItemTaskParams.


        :param post_to_incident_timeline: The post_to_incident_timeline of this AddActionItemTaskParams.  # noqa: E501
        :type: bool
        """

        self._post_to_incident_timeline = post_to_incident_timeline

    @property
    def custom_fields_mapping(self):
        """Gets the custom_fields_mapping of this AddActionItemTaskParams.  # noqa: E501

        Custom field mappings. Can contain liquid markup and need to be valid JSON  # noqa: E501

        :return: The custom_fields_mapping of this AddActionItemTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._custom_fields_mapping

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, custom_fields_mapping):
        """Sets the custom_fields_mapping of this AddActionItemTaskParams.

        Custom field mappings. Can contain liquid markup and need to be valid JSON  # noqa: E501

        :param custom_fields_mapping: The custom_fields_mapping of this AddActionItemTaskParams.  # noqa: E501
        :type: str
        """

        self._custom_fields_mapping = custom_fields_mapping

    @property
    def post_to_slack_channels(self):
        """Gets the post_to_slack_channels of this AddActionItemTaskParams.  # noqa: E501


        :return: The post_to_slack_channels of this AddActionItemTaskParams.  # noqa: E501
        :rtype: list[AddActionItemTaskParamsPostToSlackChannels]
        """
        return self._post_to_slack_channels

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, post_to_slack_channels):
        """Sets the post_to_slack_channels of this AddActionItemTaskParams.


        :param post_to_slack_channels: The post_to_slack_channels of this AddActionItemTaskParams.  # noqa: E501
        :type: list[AddActionItemTaskParamsPostToSlackChannels]
        """

        self._post_to_slack_channels = post_to_slack_channels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddActionItemTaskParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddActionItemTaskParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
