# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateStatusPageTemplateDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'body': 'str',
        'update_status': 'str',
        'kind': 'str',
        'should_notify_subscribers': 'bool',
        'position': 'int',
        'enabled': 'bool'
    }

    attribute_map = {
        'title': 'title',
        'body': 'body',
        'update_status': 'update_status',
        'kind': 'kind',
        'should_notify_subscribers': 'should_notify_subscribers',
        'position': 'position',
        'enabled': 'enabled'
    }

    def __init__(self, title=None, body=None, update_status=None, kind=None, should_notify_subscribers=None, position=None, enabled=None):  # noqa: E501
        """UpdateStatusPageTemplateDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._body = None
        self._update_status = None
        self._kind = None
        self._should_notify_subscribers = None
        self._position = None
        self._enabled = None
        self.discriminator = None
        self.title = title
        self.body = body
        if update_status is not None:
            self.update_status = update_status
        if kind is not None:
            self.kind = kind
        if should_notify_subscribers is not None:
            self.should_notify_subscribers = should_notify_subscribers
        if position is not None:
            self.position = position
        if enabled is not None:
            self.enabled = enabled

    @property
    def title(self):
        """Gets the title of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501

        Title of the template  # noqa: E501

        :return: The title of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UpdateStatusPageTemplateDataAttributes.

        Title of the template  # noqa: E501

        :param title: The title of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def body(self):
        """Gets the body of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501

        Description of the event the template will populate  # noqa: E501

        :return: The body of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this UpdateStatusPageTemplateDataAttributes.

        Description of the event the template will populate  # noqa: E501

        :param body: The body of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def update_status(self):
        """Gets the update_status of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501

        Status of the event the template will populate  # noqa: E501

        :return: The update_status of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._update_status

    @update_status.setter
    def update_status(self, update_status):
        """Sets the update_status of this UpdateStatusPageTemplateDataAttributes.

        Status of the event the template will populate  # noqa: E501

        :param update_status: The update_status of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["investigating", "identified", "monitoring", "resolved", "scheduled", "in_progress", "verifying", "completed"]  # noqa: E501
        if update_status not in allowed_values:
            raise ValueError(
                "Invalid value for `update_status` ({0}), must be one of {1}"  # noqa: E501
                .format(update_status, allowed_values)
            )

        self._update_status = update_status

    @property
    def kind(self):
        """Gets the kind of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501

        The kind of the status page template  # noqa: E501

        :return: The kind of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this UpdateStatusPageTemplateDataAttributes.

        The kind of the status page template  # noqa: E501

        :param kind: The kind of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["normal", "scheduled"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def should_notify_subscribers(self):
        """Gets the should_notify_subscribers of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501

        Controls if incident subscribers should be notified  # noqa: E501

        :return: The should_notify_subscribers of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._should_notify_subscribers

    @should_notify_subscribers.setter
    def should_notify_subscribers(self, should_notify_subscribers):
        """Sets the should_notify_subscribers of this UpdateStatusPageTemplateDataAttributes.

        Controls if incident subscribers should be notified  # noqa: E501

        :param should_notify_subscribers: The should_notify_subscribers of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501
        :type: bool
        """

        self._should_notify_subscribers = should_notify_subscribers

    @property
    def position(self):
        """Gets the position of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501

        Position of the workflow task  # noqa: E501

        :return: The position of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this UpdateStatusPageTemplateDataAttributes.

        Position of the workflow task  # noqa: E501

        :param position: The position of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def enabled(self):
        """Gets the enabled of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501

        Enable / Disable the status page template  # noqa: E501

        :return: The enabled of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateStatusPageTemplateDataAttributes.

        Enable / Disable the status page template  # noqa: E501

        :param enabled: The enabled of this UpdateStatusPageTemplateDataAttributes.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateStatusPageTemplateDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateStatusPageTemplateDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
