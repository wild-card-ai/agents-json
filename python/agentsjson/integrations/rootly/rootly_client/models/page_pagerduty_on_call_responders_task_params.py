# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PagePagerdutyOnCallRespondersTaskParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_type': 'str',
        'service': 'AddActionItemTaskParamsPostToSlackChannels',
        'escalation_policies': 'list[AddActionItemTaskParamsPostToSlackChannels]',
        'users': 'list[AddActionItemTaskParamsPostToSlackChannels]',
        'title': 'str',
        'message': 'str',
        'urgency': 'str',
        'priority': 'str',
        'create_new_incident_on_conflict': 'bool'
    }

    attribute_map = {
        'task_type': 'task_type',
        'service': 'service',
        'escalation_policies': 'escalation_policies',
        'users': 'users',
        'title': 'title',
        'message': 'message',
        'urgency': 'urgency',
        'priority': 'priority',
        'create_new_incident_on_conflict': 'create_new_incident_on_conflict'
    }

    def __init__(self, task_type=None, service=None, escalation_policies=None, users=None, title=None, message=None, urgency='high', priority=None, create_new_incident_on_conflict=False):  # noqa: E501
        """PagePagerdutyOnCallRespondersTaskParams - a model defined in Swagger"""  # noqa: E501
        self._task_type = None
        self._service = None
        self._escalation_policies = None
        self._users = None
        self._title = None
        self._message = None
        self._urgency = None
        self._priority = None
        self._create_new_incident_on_conflict = None
        self.discriminator = None
        if task_type is not None:
            self.task_type = task_type
        self.service = service
        if escalation_policies is not None:
            self.escalation_policies = escalation_policies
        if users is not None:
            self.users = users
        if title is not None:
            self.title = title
        if message is not None:
            self.message = message
        if urgency is not None:
            self.urgency = urgency
        if priority is not None:
            self.priority = priority
        if create_new_incident_on_conflict is not None:
            self.create_new_incident_on_conflict = create_new_incident_on_conflict

    @property
    def task_type(self):
        """Gets the task_type of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501


        :return: The task_type of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this PagePagerdutyOnCallRespondersTaskParams.


        :param task_type: The task_type of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["page_pagerduty_on_call_responders"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def service(self):
        """Gets the service of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501


        :return: The service of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :rtype: AddActionItemTaskParamsPostToSlackChannels
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this PagePagerdutyOnCallRespondersTaskParams.


        :param service: The service of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :type: AddActionItemTaskParamsPostToSlackChannels
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")  # noqa: E501

        self._service = service

    @property
    def escalation_policies(self):
        """Gets the escalation_policies of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501


        :return: The escalation_policies of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :rtype: list[AddActionItemTaskParamsPostToSlackChannels]
        """
        return self._escalation_policies

    @escalation_policies.setter
    def escalation_policies(self, escalation_policies):
        """Sets the escalation_policies of this PagePagerdutyOnCallRespondersTaskParams.


        :param escalation_policies: The escalation_policies of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :type: list[AddActionItemTaskParamsPostToSlackChannels]
        """

        self._escalation_policies = escalation_policies

    @property
    def users(self):
        """Gets the users of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501


        :return: The users of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :rtype: list[AddActionItemTaskParamsPostToSlackChannels]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this PagePagerdutyOnCallRespondersTaskParams.


        :param users: The users of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :type: list[AddActionItemTaskParamsPostToSlackChannels]
        """

        self._users = users

    @property
    def title(self):
        """Gets the title of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501

        Incident title.  # noqa: E501

        :return: The title of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PagePagerdutyOnCallRespondersTaskParams.

        Incident title.  # noqa: E501

        :param title: The title of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def message(self):
        """Gets the message of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501


        :return: The message of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PagePagerdutyOnCallRespondersTaskParams.


        :param message: The message of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def urgency(self):
        """Gets the urgency of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501


        :return: The urgency of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._urgency

    @urgency.setter
    def urgency(self, urgency):
        """Sets the urgency of this PagePagerdutyOnCallRespondersTaskParams.


        :param urgency: The urgency of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["high", "low", "auto"]  # noqa: E501
        if urgency not in allowed_values:
            raise ValueError(
                "Invalid value for `urgency` ({0}), must be one of {1}"  # noqa: E501
                .format(urgency, allowed_values)
            )

        self._urgency = urgency

    @property
    def priority(self):
        """Gets the priority of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501

        PagerDuty incident priority, selecting auto will let Rootly auto map our incident severity  # noqa: E501

        :return: The priority of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PagePagerdutyOnCallRespondersTaskParams.

        PagerDuty incident priority, selecting auto will let Rootly auto map our incident severity  # noqa: E501

        :param priority: The priority of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def create_new_incident_on_conflict(self):
        """Gets the create_new_incident_on_conflict of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501

        Rootly only supports linking to a single PagerDuty incident. If this feature is disabled Rootly will add responders from any additional pages to the existing PagerDuty incident that is linked to the Rootly incident. If enabled, Rootly will create a new PagerDuty incident that is not linked to any Rootly incidents  # noqa: E501

        :return: The create_new_incident_on_conflict of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._create_new_incident_on_conflict

    @create_new_incident_on_conflict.setter
    def create_new_incident_on_conflict(self, create_new_incident_on_conflict):
        """Sets the create_new_incident_on_conflict of this PagePagerdutyOnCallRespondersTaskParams.

        Rootly only supports linking to a single PagerDuty incident. If this feature is disabled Rootly will add responders from any additional pages to the existing PagerDuty incident that is linked to the Rootly incident. If enabled, Rootly will create a new PagerDuty incident that is not linked to any Rootly incidents  # noqa: E501

        :param create_new_incident_on_conflict: The create_new_incident_on_conflict of this PagePagerdutyOnCallRespondersTaskParams.  # noqa: E501
        :type: bool
        """

        self._create_new_incident_on_conflict = create_new_incident_on_conflict

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PagePagerdutyOnCallRespondersTaskParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PagePagerdutyOnCallRespondersTaskParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
