# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Dashboard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team_id': 'int',
        'user_id': 'int',
        'name': 'str',
        'description': 'str',
        'owner': 'str',
        'public': 'bool',
        'range': 'str',
        'period': 'str',
        'auto_refresh': 'bool',
        'color': 'str',
        'icon': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'team_id': 'team_id',
        'user_id': 'user_id',
        'name': 'name',
        'description': 'description',
        'owner': 'owner',
        'public': 'public',
        'range': 'range',
        'period': 'period',
        'auto_refresh': 'auto_refresh',
        'color': 'color',
        'icon': 'icon',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, team_id=None, user_id=None, name=None, description=None, owner=None, public=None, range=None, period=None, auto_refresh=None, color=None, icon=None, created_at=None, updated_at=None):  # noqa: E501
        """Dashboard - a model defined in Swagger"""  # noqa: E501
        self._team_id = None
        self._user_id = None
        self._name = None
        self._description = None
        self._owner = None
        self._public = None
        self._range = None
        self._period = None
        self._auto_refresh = None
        self._color = None
        self._icon = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if team_id is not None:
            self.team_id = team_id
        if user_id is not None:
            self.user_id = user_id
        self.name = name
        if description is not None:
            self.description = description
        self.owner = owner
        self.public = public
        if range is not None:
            self.range = range
        if period is not None:
            self.period = period
        if auto_refresh is not None:
            self.auto_refresh = auto_refresh
        if color is not None:
            self.color = color
        if icon is not None:
            self.icon = icon
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def team_id(self):
        """Gets the team_id of this Dashboard.  # noqa: E501

        The dashboard team  # noqa: E501

        :return: The team_id of this Dashboard.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this Dashboard.

        The dashboard team  # noqa: E501

        :param team_id: The team_id of this Dashboard.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def user_id(self):
        """Gets the user_id of this Dashboard.  # noqa: E501

        The dashboard user owner if owner is of type user  # noqa: E501

        :return: The user_id of this Dashboard.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Dashboard.

        The dashboard user owner if owner is of type user  # noqa: E501

        :param user_id: The user_id of this Dashboard.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def name(self):
        """Gets the name of this Dashboard.  # noqa: E501

        The name of the dashboard  # noqa: E501

        :return: The name of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dashboard.

        The name of the dashboard  # noqa: E501

        :param name: The name of this Dashboard.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Dashboard.  # noqa: E501

        The description of the dashboard  # noqa: E501

        :return: The description of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Dashboard.

        The description of the dashboard  # noqa: E501

        :param description: The description of this Dashboard.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def owner(self):
        """Gets the owner of this Dashboard.  # noqa: E501

        The owner type of the dashboard  # noqa: E501

        :return: The owner of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Dashboard.

        The owner type of the dashboard  # noqa: E501

        :param owner: The owner of this Dashboard.  # noqa: E501
        :type: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501
        allowed_values = ["user", "team"]  # noqa: E501
        if owner not in allowed_values:
            raise ValueError(
                "Invalid value for `owner` ({0}), must be one of {1}"  # noqa: E501
                .format(owner, allowed_values)
            )

        self._owner = owner

    @property
    def public(self):
        """Gets the public of this Dashboard.  # noqa: E501

        Whether the dashboard is public  # noqa: E501

        :return: The public of this Dashboard.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Dashboard.

        Whether the dashboard is public  # noqa: E501

        :param public: The public of this Dashboard.  # noqa: E501
        :type: bool
        """
        if public is None:
            raise ValueError("Invalid value for `public`, must not be `None`")  # noqa: E501

        self._public = public

    @property
    def range(self):
        """Gets the range of this Dashboard.  # noqa: E501

        The date range for dashboard panel data  # noqa: E501

        :return: The range of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this Dashboard.

        The date range for dashboard panel data  # noqa: E501

        :param range: The range of this Dashboard.  # noqa: E501
        :type: str
        """

        self._range = range

    @property
    def period(self):
        """Gets the period of this Dashboard.  # noqa: E501

        The grouping period for dashboard panel data  # noqa: E501

        :return: The period of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Dashboard.

        The grouping period for dashboard panel data  # noqa: E501

        :param period: The period of this Dashboard.  # noqa: E501
        :type: str
        """

        self._period = period

    @property
    def auto_refresh(self):
        """Gets the auto_refresh of this Dashboard.  # noqa: E501

        Whether the dashboard auto-updates the UI with new data.  # noqa: E501

        :return: The auto_refresh of this Dashboard.  # noqa: E501
        :rtype: bool
        """
        return self._auto_refresh

    @auto_refresh.setter
    def auto_refresh(self, auto_refresh):
        """Sets the auto_refresh of this Dashboard.

        Whether the dashboard auto-updates the UI with new data.  # noqa: E501

        :param auto_refresh: The auto_refresh of this Dashboard.  # noqa: E501
        :type: bool
        """

        self._auto_refresh = auto_refresh

    @property
    def color(self):
        """Gets the color of this Dashboard.  # noqa: E501

        The hex color of the dashboard  # noqa: E501

        :return: The color of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Dashboard.

        The hex color of the dashboard  # noqa: E501

        :param color: The color of this Dashboard.  # noqa: E501
        :type: str
        """
        allowed_values = ["#FCF2CF", "#D7F5E1", "#E9E2FF", "#FAE6E8", "#FAEEE6"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"  # noqa: E501
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def icon(self):
        """Gets the icon of this Dashboard.  # noqa: E501

        The emoji icon of the dashboard  # noqa: E501

        :return: The icon of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Dashboard.

        The emoji icon of the dashboard  # noqa: E501

        :param icon: The icon of this Dashboard.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def created_at(self):
        """Gets the created_at of this Dashboard.  # noqa: E501

        Date of creation  # noqa: E501

        :return: The created_at of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Dashboard.

        Date of creation  # noqa: E501

        :param created_at: The created_at of this Dashboard.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Dashboard.  # noqa: E501

        Date of last update  # noqa: E501

        :return: The updated_at of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Dashboard.

        Date of last update  # noqa: E501

        :param updated_at: The updated_at of this Dashboard.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dashboard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dashboard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
