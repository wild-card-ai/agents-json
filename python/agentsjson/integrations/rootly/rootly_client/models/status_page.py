# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatusPage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'public_title': 'str',
        'description': 'str',
        'public_description': 'str',
        'header_color': 'str',
        'footer_color': 'str',
        'allow_search_engine_index': 'bool',
        'show_uptime': 'bool',
        'show_uptime_last_days': 'int',
        'success_message': 'str',
        'failure_message': 'str',
        'authentication_enabled': 'bool',
        'authentication_password': 'str',
        'website_url': 'str',
        'website_privacy_url': 'str',
        'website_support_url': 'str',
        'ga_tracking_id': 'str',
        'time_zone': 'str',
        'public': 'bool',
        'service_ids': 'list[str]',
        'functionality_ids': 'list[str]',
        'enabled': 'bool',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'title': 'title',
        'public_title': 'public_title',
        'description': 'description',
        'public_description': 'public_description',
        'header_color': 'header_color',
        'footer_color': 'footer_color',
        'allow_search_engine_index': 'allow_search_engine_index',
        'show_uptime': 'show_uptime',
        'show_uptime_last_days': 'show_uptime_last_days',
        'success_message': 'success_message',
        'failure_message': 'failure_message',
        'authentication_enabled': 'authentication_enabled',
        'authentication_password': 'authentication_password',
        'website_url': 'website_url',
        'website_privacy_url': 'website_privacy_url',
        'website_support_url': 'website_support_url',
        'ga_tracking_id': 'ga_tracking_id',
        'time_zone': 'time_zone',
        'public': 'public',
        'service_ids': 'service_ids',
        'functionality_ids': 'functionality_ids',
        'enabled': 'enabled',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, title=None, public_title=None, description=None, public_description=None, header_color=None, footer_color=None, allow_search_engine_index=None, show_uptime=None, show_uptime_last_days=None, success_message=None, failure_message=None, authentication_enabled=False, authentication_password=None, website_url=None, website_privacy_url=None, website_support_url=None, ga_tracking_id=None, time_zone='Etc/UTC', public=None, service_ids=None, functionality_ids=None, enabled=None, created_at=None, updated_at=None):  # noqa: E501
        """StatusPage - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._public_title = None
        self._description = None
        self._public_description = None
        self._header_color = None
        self._footer_color = None
        self._allow_search_engine_index = None
        self._show_uptime = None
        self._show_uptime_last_days = None
        self._success_message = None
        self._failure_message = None
        self._authentication_enabled = None
        self._authentication_password = None
        self._website_url = None
        self._website_privacy_url = None
        self._website_support_url = None
        self._ga_tracking_id = None
        self._time_zone = None
        self._public = None
        self._service_ids = None
        self._functionality_ids = None
        self._enabled = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.title = title
        if public_title is not None:
            self.public_title = public_title
        if description is not None:
            self.description = description
        if public_description is not None:
            self.public_description = public_description
        if header_color is not None:
            self.header_color = header_color
        if footer_color is not None:
            self.footer_color = footer_color
        if allow_search_engine_index is not None:
            self.allow_search_engine_index = allow_search_engine_index
        if show_uptime is not None:
            self.show_uptime = show_uptime
        if show_uptime_last_days is not None:
            self.show_uptime_last_days = show_uptime_last_days
        if success_message is not None:
            self.success_message = success_message
        if failure_message is not None:
            self.failure_message = failure_message
        if authentication_enabled is not None:
            self.authentication_enabled = authentication_enabled
        if authentication_password is not None:
            self.authentication_password = authentication_password
        if website_url is not None:
            self.website_url = website_url
        if website_privacy_url is not None:
            self.website_privacy_url = website_privacy_url
        if website_support_url is not None:
            self.website_support_url = website_support_url
        if ga_tracking_id is not None:
            self.ga_tracking_id = ga_tracking_id
        if time_zone is not None:
            self.time_zone = time_zone
        if public is not None:
            self.public = public
        if service_ids is not None:
            self.service_ids = service_ids
        if functionality_ids is not None:
            self.functionality_ids = functionality_ids
        if enabled is not None:
            self.enabled = enabled
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def title(self):
        """Gets the title of this StatusPage.  # noqa: E501

        The title of the status page  # noqa: E501

        :return: The title of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this StatusPage.

        The title of the status page  # noqa: E501

        :param title: The title of this StatusPage.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def public_title(self):
        """Gets the public_title of this StatusPage.  # noqa: E501

        The public title of the status page  # noqa: E501

        :return: The public_title of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._public_title

    @public_title.setter
    def public_title(self, public_title):
        """Sets the public_title of this StatusPage.

        The public title of the status page  # noqa: E501

        :param public_title: The public_title of this StatusPage.  # noqa: E501
        :type: str
        """

        self._public_title = public_title

    @property
    def description(self):
        """Gets the description of this StatusPage.  # noqa: E501

        The description of the status page  # noqa: E501

        :return: The description of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StatusPage.

        The description of the status page  # noqa: E501

        :param description: The description of this StatusPage.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def public_description(self):
        """Gets the public_description of this StatusPage.  # noqa: E501

        The public description of the status page  # noqa: E501

        :return: The public_description of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._public_description

    @public_description.setter
    def public_description(self, public_description):
        """Sets the public_description of this StatusPage.

        The public description of the status page  # noqa: E501

        :param public_description: The public_description of this StatusPage.  # noqa: E501
        :type: str
        """

        self._public_description = public_description

    @property
    def header_color(self):
        """Gets the header_color of this StatusPage.  # noqa: E501

        The color of the header. Eg. \"#0061F2\"  # noqa: E501

        :return: The header_color of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._header_color

    @header_color.setter
    def header_color(self, header_color):
        """Sets the header_color of this StatusPage.

        The color of the header. Eg. \"#0061F2\"  # noqa: E501

        :param header_color: The header_color of this StatusPage.  # noqa: E501
        :type: str
        """

        self._header_color = header_color

    @property
    def footer_color(self):
        """Gets the footer_color of this StatusPage.  # noqa: E501

        The color of the footer. Eg. \"#1F2F41\"  # noqa: E501

        :return: The footer_color of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._footer_color

    @footer_color.setter
    def footer_color(self, footer_color):
        """Sets the footer_color of this StatusPage.

        The color of the footer. Eg. \"#1F2F41\"  # noqa: E501

        :param footer_color: The footer_color of this StatusPage.  # noqa: E501
        :type: str
        """

        self._footer_color = footer_color

    @property
    def allow_search_engine_index(self):
        """Gets the allow_search_engine_index of this StatusPage.  # noqa: E501

        Allow search engines to include your public status page in search results  # noqa: E501

        :return: The allow_search_engine_index of this StatusPage.  # noqa: E501
        :rtype: bool
        """
        return self._allow_search_engine_index

    @allow_search_engine_index.setter
    def allow_search_engine_index(self, allow_search_engine_index):
        """Sets the allow_search_engine_index of this StatusPage.

        Allow search engines to include your public status page in search results  # noqa: E501

        :param allow_search_engine_index: The allow_search_engine_index of this StatusPage.  # noqa: E501
        :type: bool
        """

        self._allow_search_engine_index = allow_search_engine_index

    @property
    def show_uptime(self):
        """Gets the show_uptime of this StatusPage.  # noqa: E501

        Show uptime  # noqa: E501

        :return: The show_uptime of this StatusPage.  # noqa: E501
        :rtype: bool
        """
        return self._show_uptime

    @show_uptime.setter
    def show_uptime(self, show_uptime):
        """Sets the show_uptime of this StatusPage.

        Show uptime  # noqa: E501

        :param show_uptime: The show_uptime of this StatusPage.  # noqa: E501
        :type: bool
        """

        self._show_uptime = show_uptime

    @property
    def show_uptime_last_days(self):
        """Gets the show_uptime_last_days of this StatusPage.  # noqa: E501

        Show uptime over x days  # noqa: E501

        :return: The show_uptime_last_days of this StatusPage.  # noqa: E501
        :rtype: int
        """
        return self._show_uptime_last_days

    @show_uptime_last_days.setter
    def show_uptime_last_days(self, show_uptime_last_days):
        """Sets the show_uptime_last_days of this StatusPage.

        Show uptime over x days  # noqa: E501

        :param show_uptime_last_days: The show_uptime_last_days of this StatusPage.  # noqa: E501
        :type: int
        """
        allowed_values = [30, 60, 90, 180, 360]  # noqa: E501
        if show_uptime_last_days not in allowed_values:
            raise ValueError(
                "Invalid value for `show_uptime_last_days` ({0}), must be one of {1}"  # noqa: E501
                .format(show_uptime_last_days, allowed_values)
            )

        self._show_uptime_last_days = show_uptime_last_days

    @property
    def success_message(self):
        """Gets the success_message of this StatusPage.  # noqa: E501

        Message showing when all components are operational  # noqa: E501

        :return: The success_message of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._success_message

    @success_message.setter
    def success_message(self, success_message):
        """Sets the success_message of this StatusPage.

        Message showing when all components are operational  # noqa: E501

        :param success_message: The success_message of this StatusPage.  # noqa: E501
        :type: str
        """

        self._success_message = success_message

    @property
    def failure_message(self):
        """Gets the failure_message of this StatusPage.  # noqa: E501

        Message showing when at least one component is not operational  # noqa: E501

        :return: The failure_message of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this StatusPage.

        Message showing when at least one component is not operational  # noqa: E501

        :param failure_message: The failure_message of this StatusPage.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def authentication_enabled(self):
        """Gets the authentication_enabled of this StatusPage.  # noqa: E501

        Enable authentication  # noqa: E501

        :return: The authentication_enabled of this StatusPage.  # noqa: E501
        :rtype: bool
        """
        return self._authentication_enabled

    @authentication_enabled.setter
    def authentication_enabled(self, authentication_enabled):
        """Sets the authentication_enabled of this StatusPage.

        Enable authentication  # noqa: E501

        :param authentication_enabled: The authentication_enabled of this StatusPage.  # noqa: E501
        :type: bool
        """

        self._authentication_enabled = authentication_enabled

    @property
    def authentication_password(self):
        """Gets the authentication_password of this StatusPage.  # noqa: E501

        Authentication password  # noqa: E501

        :return: The authentication_password of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._authentication_password

    @authentication_password.setter
    def authentication_password(self, authentication_password):
        """Sets the authentication_password of this StatusPage.

        Authentication password  # noqa: E501

        :param authentication_password: The authentication_password of this StatusPage.  # noqa: E501
        :type: str
        """

        self._authentication_password = authentication_password

    @property
    def website_url(self):
        """Gets the website_url of this StatusPage.  # noqa: E501

        Website URL  # noqa: E501

        :return: The website_url of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this StatusPage.

        Website URL  # noqa: E501

        :param website_url: The website_url of this StatusPage.  # noqa: E501
        :type: str
        """

        self._website_url = website_url

    @property
    def website_privacy_url(self):
        """Gets the website_privacy_url of this StatusPage.  # noqa: E501

        Website Privacy URL  # noqa: E501

        :return: The website_privacy_url of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._website_privacy_url

    @website_privacy_url.setter
    def website_privacy_url(self, website_privacy_url):
        """Sets the website_privacy_url of this StatusPage.

        Website Privacy URL  # noqa: E501

        :param website_privacy_url: The website_privacy_url of this StatusPage.  # noqa: E501
        :type: str
        """

        self._website_privacy_url = website_privacy_url

    @property
    def website_support_url(self):
        """Gets the website_support_url of this StatusPage.  # noqa: E501

        Website Support URL  # noqa: E501

        :return: The website_support_url of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._website_support_url

    @website_support_url.setter
    def website_support_url(self, website_support_url):
        """Sets the website_support_url of this StatusPage.

        Website Support URL  # noqa: E501

        :param website_support_url: The website_support_url of this StatusPage.  # noqa: E501
        :type: str
        """

        self._website_support_url = website_support_url

    @property
    def ga_tracking_id(self):
        """Gets the ga_tracking_id of this StatusPage.  # noqa: E501

        Google Analytics tracking ID  # noqa: E501

        :return: The ga_tracking_id of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._ga_tracking_id

    @ga_tracking_id.setter
    def ga_tracking_id(self, ga_tracking_id):
        """Sets the ga_tracking_id of this StatusPage.

        Google Analytics tracking ID  # noqa: E501

        :param ga_tracking_id: The ga_tracking_id of this StatusPage.  # noqa: E501
        :type: str
        """

        self._ga_tracking_id = ga_tracking_id

    @property
    def time_zone(self):
        """Gets the time_zone of this StatusPage.  # noqa: E501

        A valid IANA time zone name.  # noqa: E501

        :return: The time_zone of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this StatusPage.

        A valid IANA time zone name.  # noqa: E501

        :param time_zone: The time_zone of this StatusPage.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def public(self):
        """Gets the public of this StatusPage.  # noqa: E501

        Make the status page accessible to the public  # noqa: E501

        :return: The public of this StatusPage.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this StatusPage.

        Make the status page accessible to the public  # noqa: E501

        :param public: The public of this StatusPage.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def service_ids(self):
        """Gets the service_ids of this StatusPage.  # noqa: E501

        Services attached to the status page  # noqa: E501

        :return: The service_ids of this StatusPage.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_ids

    @service_ids.setter
    def service_ids(self, service_ids):
        """Sets the service_ids of this StatusPage.

        Services attached to the status page  # noqa: E501

        :param service_ids: The service_ids of this StatusPage.  # noqa: E501
        :type: list[str]
        """

        self._service_ids = service_ids

    @property
    def functionality_ids(self):
        """Gets the functionality_ids of this StatusPage.  # noqa: E501

        Functionalities attached to the status page  # noqa: E501

        :return: The functionality_ids of this StatusPage.  # noqa: E501
        :rtype: list[str]
        """
        return self._functionality_ids

    @functionality_ids.setter
    def functionality_ids(self, functionality_ids):
        """Sets the functionality_ids of this StatusPage.

        Functionalities attached to the status page  # noqa: E501

        :param functionality_ids: The functionality_ids of this StatusPage.  # noqa: E501
        :type: list[str]
        """

        self._functionality_ids = functionality_ids

    @property
    def enabled(self):
        """Gets the enabled of this StatusPage.  # noqa: E501

        Enabled / Disable the status page  # noqa: E501

        :return: The enabled of this StatusPage.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this StatusPage.

        Enabled / Disable the status page  # noqa: E501

        :param enabled: The enabled of this StatusPage.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def created_at(self):
        """Gets the created_at of this StatusPage.  # noqa: E501

        Date of creation  # noqa: E501

        :return: The created_at of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this StatusPage.

        Date of creation  # noqa: E501

        :param created_at: The created_at of this StatusPage.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this StatusPage.  # noqa: E501

        Date of last update  # noqa: E501

        :return: The updated_at of this StatusPage.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this StatusPage.

        Date of last update  # noqa: E501

        :param updated_at: The updated_at of this StatusPage.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusPage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusPage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
