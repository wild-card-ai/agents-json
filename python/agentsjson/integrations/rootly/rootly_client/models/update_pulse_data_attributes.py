# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdatePulseDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'summary': 'str',
        'service_ids': 'list[str]',
        'environment_ids': 'list[str]',
        'started_at': 'datetime',
        'ended_at': 'datetime',
        'external_url': 'str',
        'labels': 'list[NewAlertDataAttributesLabels]',
        'refs': 'list[NewPulseDataAttributesRefs]',
        'data': 'object'
    }

    attribute_map = {
        'source': 'source',
        'summary': 'summary',
        'service_ids': 'service_ids',
        'environment_ids': 'environment_ids',
        'started_at': 'started_at',
        'ended_at': 'ended_at',
        'external_url': 'external_url',
        'labels': 'labels',
        'refs': 'refs',
        'data': 'data'
    }

    def __init__(self, source=None, summary=None, service_ids=None, environment_ids=None, started_at=None, ended_at=None, external_url=None, labels=None, refs=None, data=None):  # noqa: E501
        """UpdatePulseDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._source = None
        self._summary = None
        self._service_ids = None
        self._environment_ids = None
        self._started_at = None
        self._ended_at = None
        self._external_url = None
        self._labels = None
        self._refs = None
        self._data = None
        self.discriminator = None
        if source is not None:
            self.source = source
        if summary is not None:
            self.summary = summary
        if service_ids is not None:
            self.service_ids = service_ids
        if environment_ids is not None:
            self.environment_ids = environment_ids
        if started_at is not None:
            self.started_at = started_at
        if ended_at is not None:
            self.ended_at = ended_at
        if external_url is not None:
            self.external_url = external_url
        if labels is not None:
            self.labels = labels
        if refs is not None:
            self.refs = refs
        if data is not None:
            self.data = data

    @property
    def source(self):
        """Gets the source of this UpdatePulseDataAttributes.  # noqa: E501

        The source of the pulse (eg: k8s)  # noqa: E501

        :return: The source of this UpdatePulseDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this UpdatePulseDataAttributes.

        The source of the pulse (eg: k8s)  # noqa: E501

        :param source: The source of this UpdatePulseDataAttributes.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def summary(self):
        """Gets the summary of this UpdatePulseDataAttributes.  # noqa: E501

        The summary of the pulse  # noqa: E501

        :return: The summary of this UpdatePulseDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this UpdatePulseDataAttributes.

        The summary of the pulse  # noqa: E501

        :param summary: The summary of this UpdatePulseDataAttributes.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def service_ids(self):
        """Gets the service_ids of this UpdatePulseDataAttributes.  # noqa: E501

        The Service ID's to attach to the pulse  # noqa: E501

        :return: The service_ids of this UpdatePulseDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_ids

    @service_ids.setter
    def service_ids(self, service_ids):
        """Sets the service_ids of this UpdatePulseDataAttributes.

        The Service ID's to attach to the pulse  # noqa: E501

        :param service_ids: The service_ids of this UpdatePulseDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._service_ids = service_ids

    @property
    def environment_ids(self):
        """Gets the environment_ids of this UpdatePulseDataAttributes.  # noqa: E501

        The Environment ID's to attach to the pulse  # noqa: E501

        :return: The environment_ids of this UpdatePulseDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._environment_ids

    @environment_ids.setter
    def environment_ids(self, environment_ids):
        """Sets the environment_ids of this UpdatePulseDataAttributes.

        The Environment ID's to attach to the pulse  # noqa: E501

        :param environment_ids: The environment_ids of this UpdatePulseDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._environment_ids = environment_ids

    @property
    def started_at(self):
        """Gets the started_at of this UpdatePulseDataAttributes.  # noqa: E501

        Pulse start datetime  # noqa: E501

        :return: The started_at of this UpdatePulseDataAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this UpdatePulseDataAttributes.

        Pulse start datetime  # noqa: E501

        :param started_at: The started_at of this UpdatePulseDataAttributes.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def ended_at(self):
        """Gets the ended_at of this UpdatePulseDataAttributes.  # noqa: E501

        Pulse end datetime  # noqa: E501

        :return: The ended_at of this UpdatePulseDataAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this UpdatePulseDataAttributes.

        Pulse end datetime  # noqa: E501

        :param ended_at: The ended_at of this UpdatePulseDataAttributes.  # noqa: E501
        :type: datetime
        """

        self._ended_at = ended_at

    @property
    def external_url(self):
        """Gets the external_url of this UpdatePulseDataAttributes.  # noqa: E501

        The external url of the pulse  # noqa: E501

        :return: The external_url of this UpdatePulseDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this UpdatePulseDataAttributes.

        The external url of the pulse  # noqa: E501

        :param external_url: The external_url of this UpdatePulseDataAttributes.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def labels(self):
        """Gets the labels of this UpdatePulseDataAttributes.  # noqa: E501


        :return: The labels of this UpdatePulseDataAttributes.  # noqa: E501
        :rtype: list[NewAlertDataAttributesLabels]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this UpdatePulseDataAttributes.


        :param labels: The labels of this UpdatePulseDataAttributes.  # noqa: E501
        :type: list[NewAlertDataAttributesLabels]
        """

        self._labels = labels

    @property
    def refs(self):
        """Gets the refs of this UpdatePulseDataAttributes.  # noqa: E501


        :return: The refs of this UpdatePulseDataAttributes.  # noqa: E501
        :rtype: list[NewPulseDataAttributesRefs]
        """
        return self._refs

    @refs.setter
    def refs(self, refs):
        """Sets the refs of this UpdatePulseDataAttributes.


        :param refs: The refs of this UpdatePulseDataAttributes.  # noqa: E501
        :type: list[NewPulseDataAttributesRefs]
        """

        self._refs = refs

    @property
    def data(self):
        """Gets the data of this UpdatePulseDataAttributes.  # noqa: E501

        Additional data  # noqa: E501

        :return: The data of this UpdatePulseDataAttributes.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this UpdatePulseDataAttributes.

        Additional data  # noqa: E501

        :param data: The data of this UpdatePulseDataAttributes.  # noqa: E501
        :type: object
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatePulseDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatePulseDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
