# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublishIncidentTaskParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_type': 'str',
        'incident': 'AddActionItemTaskParamsPostToSlackChannels',
        'public_title': 'str',
        'event': 'str',
        'status': 'str',
        'notify_subscribers': 'bool',
        'should_tweet': 'bool',
        'status_page_template': 'AddActionItemTaskParamsPostToSlackChannels',
        'status_page_id': 'str',
        'integration_payload': 'str'
    }

    attribute_map = {
        'task_type': 'task_type',
        'incident': 'incident',
        'public_title': 'public_title',
        'event': 'event',
        'status': 'status',
        'notify_subscribers': 'notify_subscribers',
        'should_tweet': 'should_tweet',
        'status_page_template': 'status_page_template',
        'status_page_id': 'status_page_id',
        'integration_payload': 'integration_payload'
    }

    def __init__(self, task_type=None, incident=None, public_title=None, event=None, status='resolved', notify_subscribers=False, should_tweet=False, status_page_template=None, status_page_id=None, integration_payload=None):  # noqa: E501
        """PublishIncidentTaskParams - a model defined in Swagger"""  # noqa: E501
        self._task_type = None
        self._incident = None
        self._public_title = None
        self._event = None
        self._status = None
        self._notify_subscribers = None
        self._should_tweet = None
        self._status_page_template = None
        self._status_page_id = None
        self._integration_payload = None
        self.discriminator = None
        if task_type is not None:
            self.task_type = task_type
        self.incident = incident
        self.public_title = public_title
        if event is not None:
            self.event = event
        self.status = status
        if notify_subscribers is not None:
            self.notify_subscribers = notify_subscribers
        if should_tweet is not None:
            self.should_tweet = should_tweet
        if status_page_template is not None:
            self.status_page_template = status_page_template
        self.status_page_id = status_page_id
        if integration_payload is not None:
            self.integration_payload = integration_payload

    @property
    def task_type(self):
        """Gets the task_type of this PublishIncidentTaskParams.  # noqa: E501


        :return: The task_type of this PublishIncidentTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this PublishIncidentTaskParams.


        :param task_type: The task_type of this PublishIncidentTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["publish_incident"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def incident(self):
        """Gets the incident of this PublishIncidentTaskParams.  # noqa: E501


        :return: The incident of this PublishIncidentTaskParams.  # noqa: E501
        :rtype: AddActionItemTaskParamsPostToSlackChannels
        """
        return self._incident

    @incident.setter
    def incident(self, incident):
        """Sets the incident of this PublishIncidentTaskParams.


        :param incident: The incident of this PublishIncidentTaskParams.  # noqa: E501
        :type: AddActionItemTaskParamsPostToSlackChannels
        """
        if incident is None:
            raise ValueError("Invalid value for `incident`, must not be `None`")  # noqa: E501

        self._incident = incident

    @property
    def public_title(self):
        """Gets the public_title of this PublishIncidentTaskParams.  # noqa: E501


        :return: The public_title of this PublishIncidentTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._public_title

    @public_title.setter
    def public_title(self, public_title):
        """Sets the public_title of this PublishIncidentTaskParams.


        :param public_title: The public_title of this PublishIncidentTaskParams.  # noqa: E501
        :type: str
        """
        if public_title is None:
            raise ValueError("Invalid value for `public_title`, must not be `None`")  # noqa: E501

        self._public_title = public_title

    @property
    def event(self):
        """Gets the event of this PublishIncidentTaskParams.  # noqa: E501

        Incident event description  # noqa: E501

        :return: The event of this PublishIncidentTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this PublishIncidentTaskParams.

        Incident event description  # noqa: E501

        :param event: The event of this PublishIncidentTaskParams.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def status(self):
        """Gets the status of this PublishIncidentTaskParams.  # noqa: E501


        :return: The status of this PublishIncidentTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PublishIncidentTaskParams.


        :param status: The status of this PublishIncidentTaskParams.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["investigating", "identified", "monitoring", "resolved", "scheduled", "in_progress", "verifying", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def notify_subscribers(self):
        """Gets the notify_subscribers of this PublishIncidentTaskParams.  # noqa: E501

        When true notifies subscribers of the status page by email/text  # noqa: E501

        :return: The notify_subscribers of this PublishIncidentTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._notify_subscribers

    @notify_subscribers.setter
    def notify_subscribers(self, notify_subscribers):
        """Sets the notify_subscribers of this PublishIncidentTaskParams.

        When true notifies subscribers of the status page by email/text  # noqa: E501

        :param notify_subscribers: The notify_subscribers of this PublishIncidentTaskParams.  # noqa: E501
        :type: bool
        """

        self._notify_subscribers = notify_subscribers

    @property
    def should_tweet(self):
        """Gets the should_tweet of this PublishIncidentTaskParams.  # noqa: E501

        For Statuspage.io integrated pages auto publishes a tweet for your update  # noqa: E501

        :return: The should_tweet of this PublishIncidentTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._should_tweet

    @should_tweet.setter
    def should_tweet(self, should_tweet):
        """Sets the should_tweet of this PublishIncidentTaskParams.

        For Statuspage.io integrated pages auto publishes a tweet for your update  # noqa: E501

        :param should_tweet: The should_tweet of this PublishIncidentTaskParams.  # noqa: E501
        :type: bool
        """

        self._should_tweet = should_tweet

    @property
    def status_page_template(self):
        """Gets the status_page_template of this PublishIncidentTaskParams.  # noqa: E501


        :return: The status_page_template of this PublishIncidentTaskParams.  # noqa: E501
        :rtype: AddActionItemTaskParamsPostToSlackChannels
        """
        return self._status_page_template

    @status_page_template.setter
    def status_page_template(self, status_page_template):
        """Sets the status_page_template of this PublishIncidentTaskParams.


        :param status_page_template: The status_page_template of this PublishIncidentTaskParams.  # noqa: E501
        :type: AddActionItemTaskParamsPostToSlackChannels
        """

        self._status_page_template = status_page_template

    @property
    def status_page_id(self):
        """Gets the status_page_id of this PublishIncidentTaskParams.  # noqa: E501


        :return: The status_page_id of this PublishIncidentTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._status_page_id

    @status_page_id.setter
    def status_page_id(self, status_page_id):
        """Sets the status_page_id of this PublishIncidentTaskParams.


        :param status_page_id: The status_page_id of this PublishIncidentTaskParams.  # noqa: E501
        :type: str
        """
        if status_page_id is None:
            raise ValueError("Invalid value for `status_page_id`, must not be `None`")  # noqa: E501

        self._status_page_id = status_page_id

    @property
    def integration_payload(self):
        """Gets the integration_payload of this PublishIncidentTaskParams.  # noqa: E501

        Additional API Payload you can pass to statuspage.io for example. Can contain liquid markup and need to be valid JSON  # noqa: E501

        :return: The integration_payload of this PublishIncidentTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._integration_payload

    @integration_payload.setter
    def integration_payload(self, integration_payload):
        """Sets the integration_payload of this PublishIncidentTaskParams.

        Additional API Payload you can pass to statuspage.io for example. Can contain liquid markup and need to be valid JSON  # noqa: E501

        :param integration_payload: The integration_payload of this PublishIncidentTaskParams.  # noqa: E501
        :type: str
        """

        self._integration_payload = integration_payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublishIncidentTaskParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublishIncidentTaskParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
