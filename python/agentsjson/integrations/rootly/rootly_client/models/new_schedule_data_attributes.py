# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewScheduleDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'all_time_coverage': 'bool',
        'slack_user_group': 'NewScheduleDataAttributesSlackUserGroup',
        'owner_group_ids': 'list[str]',
        'owner_user_id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'all_time_coverage': 'all_time_coverage',
        'slack_user_group': 'slack_user_group',
        'owner_group_ids': 'owner_group_ids',
        'owner_user_id': 'owner_user_id'
    }

    def __init__(self, name=None, description=None, all_time_coverage=None, slack_user_group=None, owner_group_ids=None, owner_user_id=None):  # noqa: E501
        """NewScheduleDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._all_time_coverage = None
        self._slack_user_group = None
        self._owner_group_ids = None
        self._owner_user_id = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        if all_time_coverage is not None:
            self.all_time_coverage = all_time_coverage
        if slack_user_group is not None:
            self.slack_user_group = slack_user_group
        if owner_group_ids is not None:
            self.owner_group_ids = owner_group_ids
        if owner_user_id is not None:
            self.owner_user_id = owner_user_id

    @property
    def name(self):
        """Gets the name of this NewScheduleDataAttributes.  # noqa: E501

        The name of the schedule  # noqa: E501

        :return: The name of this NewScheduleDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewScheduleDataAttributes.

        The name of the schedule  # noqa: E501

        :param name: The name of this NewScheduleDataAttributes.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this NewScheduleDataAttributes.  # noqa: E501

        The description of the schedule  # noqa: E501

        :return: The description of this NewScheduleDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewScheduleDataAttributes.

        The description of the schedule  # noqa: E501

        :param description: The description of this NewScheduleDataAttributes.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def all_time_coverage(self):
        """Gets the all_time_coverage of this NewScheduleDataAttributes.  # noqa: E501

        24/7 coverage of the schedule  # noqa: E501

        :return: The all_time_coverage of this NewScheduleDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._all_time_coverage

    @all_time_coverage.setter
    def all_time_coverage(self, all_time_coverage):
        """Sets the all_time_coverage of this NewScheduleDataAttributes.

        24/7 coverage of the schedule  # noqa: E501

        :param all_time_coverage: The all_time_coverage of this NewScheduleDataAttributes.  # noqa: E501
        :type: bool
        """

        self._all_time_coverage = all_time_coverage

    @property
    def slack_user_group(self):
        """Gets the slack_user_group of this NewScheduleDataAttributes.  # noqa: E501


        :return: The slack_user_group of this NewScheduleDataAttributes.  # noqa: E501
        :rtype: NewScheduleDataAttributesSlackUserGroup
        """
        return self._slack_user_group

    @slack_user_group.setter
    def slack_user_group(self, slack_user_group):
        """Sets the slack_user_group of this NewScheduleDataAttributes.


        :param slack_user_group: The slack_user_group of this NewScheduleDataAttributes.  # noqa: E501
        :type: NewScheduleDataAttributesSlackUserGroup
        """

        self._slack_user_group = slack_user_group

    @property
    def owner_group_ids(self):
        """Gets the owner_group_ids of this NewScheduleDataAttributes.  # noqa: E501

        Owning teams.  # noqa: E501

        :return: The owner_group_ids of this NewScheduleDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner_group_ids

    @owner_group_ids.setter
    def owner_group_ids(self, owner_group_ids):
        """Sets the owner_group_ids of this NewScheduleDataAttributes.

        Owning teams.  # noqa: E501

        :param owner_group_ids: The owner_group_ids of this NewScheduleDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._owner_group_ids = owner_group_ids

    @property
    def owner_user_id(self):
        """Gets the owner_user_id of this NewScheduleDataAttributes.  # noqa: E501

        ID of the owner of the schedule  # noqa: E501

        :return: The owner_user_id of this NewScheduleDataAttributes.  # noqa: E501
        :rtype: int
        """
        return self._owner_user_id

    @owner_user_id.setter
    def owner_user_id(self, owner_user_id):
        """Sets the owner_user_id of this NewScheduleDataAttributes.

        ID of the owner of the schedule  # noqa: E501

        :param owner_user_id: The owner_user_id of this NewScheduleDataAttributes.  # noqa: E501
        :type: int
        """

        self._owner_user_id = owner_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewScheduleDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewScheduleDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
