# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateLiveCallRouterDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'str',
        'enabled': 'bool',
        'name': 'str',
        'country_code': 'str',
        'phone_type': 'str',
        'voicemail_greeting': 'str',
        'caller_greeting': 'str',
        'waiting_music_url': 'str',
        'sent_to_voicemail_delay': 'int',
        'should_redirect_to_voicemail_on_no_answer': 'bool',
        'escalation_level_delay_in_seconds': 'int',
        'should_auto_resolve_alert_on_call_end': 'bool',
        'alert_urgency_id': 'str',
        'escalation_policy_trigger_params': 'UpdateLiveCallRouterDataAttributesEscalationPolicyTriggerParams'
    }

    attribute_map = {
        'kind': 'kind',
        'enabled': 'enabled',
        'name': 'name',
        'country_code': 'country_code',
        'phone_type': 'phone_type',
        'voicemail_greeting': 'voicemail_greeting',
        'caller_greeting': 'caller_greeting',
        'waiting_music_url': 'waiting_music_url',
        'sent_to_voicemail_delay': 'sent_to_voicemail_delay',
        'should_redirect_to_voicemail_on_no_answer': 'should_redirect_to_voicemail_on_no_answer',
        'escalation_level_delay_in_seconds': 'escalation_level_delay_in_seconds',
        'should_auto_resolve_alert_on_call_end': 'should_auto_resolve_alert_on_call_end',
        'alert_urgency_id': 'alert_urgency_id',
        'escalation_policy_trigger_params': 'escalation_policy_trigger_params'
    }

    def __init__(self, kind=None, enabled=None, name=None, country_code=None, phone_type=None, voicemail_greeting=None, caller_greeting=None, waiting_music_url=None, sent_to_voicemail_delay=None, should_redirect_to_voicemail_on_no_answer=None, escalation_level_delay_in_seconds=None, should_auto_resolve_alert_on_call_end=None, alert_urgency_id=None, escalation_policy_trigger_params=None):  # noqa: E501
        """UpdateLiveCallRouterDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._kind = None
        self._enabled = None
        self._name = None
        self._country_code = None
        self._phone_type = None
        self._voicemail_greeting = None
        self._caller_greeting = None
        self._waiting_music_url = None
        self._sent_to_voicemail_delay = None
        self._should_redirect_to_voicemail_on_no_answer = None
        self._escalation_level_delay_in_seconds = None
        self._should_auto_resolve_alert_on_call_end = None
        self._alert_urgency_id = None
        self._escalation_policy_trigger_params = None
        self.discriminator = None
        if kind is not None:
            self.kind = kind
        if enabled is not None:
            self.enabled = enabled
        if name is not None:
            self.name = name
        if country_code is not None:
            self.country_code = country_code
        if phone_type is not None:
            self.phone_type = phone_type
        if voicemail_greeting is not None:
            self.voicemail_greeting = voicemail_greeting
        if caller_greeting is not None:
            self.caller_greeting = caller_greeting
        if waiting_music_url is not None:
            self.waiting_music_url = waiting_music_url
        if sent_to_voicemail_delay is not None:
            self.sent_to_voicemail_delay = sent_to_voicemail_delay
        if should_redirect_to_voicemail_on_no_answer is not None:
            self.should_redirect_to_voicemail_on_no_answer = should_redirect_to_voicemail_on_no_answer
        if escalation_level_delay_in_seconds is not None:
            self.escalation_level_delay_in_seconds = escalation_level_delay_in_seconds
        if should_auto_resolve_alert_on_call_end is not None:
            self.should_auto_resolve_alert_on_call_end = should_auto_resolve_alert_on_call_end
        if alert_urgency_id is not None:
            self.alert_urgency_id = alert_urgency_id
        if escalation_policy_trigger_params is not None:
            self.escalation_policy_trigger_params = escalation_policy_trigger_params

    @property
    def kind(self):
        """Gets the kind of this UpdateLiveCallRouterDataAttributes.  # noqa: E501

        The kind of the live_call_router  # noqa: E501

        :return: The kind of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this UpdateLiveCallRouterDataAttributes.

        The kind of the live_call_router  # noqa: E501

        :param kind: The kind of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["voicemail", "live"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def enabled(self):
        """Gets the enabled of this UpdateLiveCallRouterDataAttributes.  # noqa: E501

        Whether the live_call_router is enabled  # noqa: E501

        :return: The enabled of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateLiveCallRouterDataAttributes.

        Whether the live_call_router is enabled  # noqa: E501

        :param enabled: The enabled of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this UpdateLiveCallRouterDataAttributes.  # noqa: E501

        The name of the live_call_router  # noqa: E501

        :return: The name of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateLiveCallRouterDataAttributes.

        The name of the live_call_router  # noqa: E501

        :param name: The name of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def country_code(self):
        """Gets the country_code of this UpdateLiveCallRouterDataAttributes.  # noqa: E501

        The country code of the live_call_router  # noqa: E501

        :return: The country_code of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this UpdateLiveCallRouterDataAttributes.

        The country code of the live_call_router  # noqa: E501

        :param country_code: The country_code of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["US", "GB", "NZ", "CA", "AU"]  # noqa: E501
        if country_code not in allowed_values:
            raise ValueError(
                "Invalid value for `country_code` ({0}), must be one of {1}"  # noqa: E501
                .format(country_code, allowed_values)
            )

        self._country_code = country_code

    @property
    def phone_type(self):
        """Gets the phone_type of this UpdateLiveCallRouterDataAttributes.  # noqa: E501

        The phone type of the live_call_router  # noqa: E501

        :return: The phone_type of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._phone_type

    @phone_type.setter
    def phone_type(self, phone_type):
        """Sets the phone_type of this UpdateLiveCallRouterDataAttributes.

        The phone type of the live_call_router  # noqa: E501

        :param phone_type: The phone_type of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["local", "toll_free"]  # noqa: E501
        if phone_type not in allowed_values:
            raise ValueError(
                "Invalid value for `phone_type` ({0}), must be one of {1}"  # noqa: E501
                .format(phone_type, allowed_values)
            )

        self._phone_type = phone_type

    @property
    def voicemail_greeting(self):
        """Gets the voicemail_greeting of this UpdateLiveCallRouterDataAttributes.  # noqa: E501

        The voicemail greeting of the live_call_router  # noqa: E501

        :return: The voicemail_greeting of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._voicemail_greeting

    @voicemail_greeting.setter
    def voicemail_greeting(self, voicemail_greeting):
        """Sets the voicemail_greeting of this UpdateLiveCallRouterDataAttributes.

        The voicemail greeting of the live_call_router  # noqa: E501

        :param voicemail_greeting: The voicemail_greeting of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :type: str
        """

        self._voicemail_greeting = voicemail_greeting

    @property
    def caller_greeting(self):
        """Gets the caller_greeting of this UpdateLiveCallRouterDataAttributes.  # noqa: E501

        The caller greeting message of the live_call_router  # noqa: E501

        :return: The caller_greeting of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._caller_greeting

    @caller_greeting.setter
    def caller_greeting(self, caller_greeting):
        """Sets the caller_greeting of this UpdateLiveCallRouterDataAttributes.

        The caller greeting message of the live_call_router  # noqa: E501

        :param caller_greeting: The caller_greeting of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :type: str
        """

        self._caller_greeting = caller_greeting

    @property
    def waiting_music_url(self):
        """Gets the waiting_music_url of this UpdateLiveCallRouterDataAttributes.  # noqa: E501

        The waiting music URL of the live_call_router  # noqa: E501

        :return: The waiting_music_url of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._waiting_music_url

    @waiting_music_url.setter
    def waiting_music_url(self, waiting_music_url):
        """Sets the waiting_music_url of this UpdateLiveCallRouterDataAttributes.

        The waiting music URL of the live_call_router  # noqa: E501

        :param waiting_music_url: The waiting_music_url of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :type: str
        """

        self._waiting_music_url = waiting_music_url

    @property
    def sent_to_voicemail_delay(self):
        """Gets the sent_to_voicemail_delay of this UpdateLiveCallRouterDataAttributes.  # noqa: E501

        The delay (seconds) after which the caller in redirected to voicemail  # noqa: E501

        :return: The sent_to_voicemail_delay of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :rtype: int
        """
        return self._sent_to_voicemail_delay

    @sent_to_voicemail_delay.setter
    def sent_to_voicemail_delay(self, sent_to_voicemail_delay):
        """Sets the sent_to_voicemail_delay of this UpdateLiveCallRouterDataAttributes.

        The delay (seconds) after which the caller in redirected to voicemail  # noqa: E501

        :param sent_to_voicemail_delay: The sent_to_voicemail_delay of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :type: int
        """

        self._sent_to_voicemail_delay = sent_to_voicemail_delay

    @property
    def should_redirect_to_voicemail_on_no_answer(self):
        """Gets the should_redirect_to_voicemail_on_no_answer of this UpdateLiveCallRouterDataAttributes.  # noqa: E501

        This prompts the caller to choose voicemail or connect live  # noqa: E501

        :return: The should_redirect_to_voicemail_on_no_answer of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._should_redirect_to_voicemail_on_no_answer

    @should_redirect_to_voicemail_on_no_answer.setter
    def should_redirect_to_voicemail_on_no_answer(self, should_redirect_to_voicemail_on_no_answer):
        """Sets the should_redirect_to_voicemail_on_no_answer of this UpdateLiveCallRouterDataAttributes.

        This prompts the caller to choose voicemail or connect live  # noqa: E501

        :param should_redirect_to_voicemail_on_no_answer: The should_redirect_to_voicemail_on_no_answer of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :type: bool
        """

        self._should_redirect_to_voicemail_on_no_answer = should_redirect_to_voicemail_on_no_answer

    @property
    def escalation_level_delay_in_seconds(self):
        """Gets the escalation_level_delay_in_seconds of this UpdateLiveCallRouterDataAttributes.  # noqa: E501

        This overrides the delay (seconds) in escalation levels  # noqa: E501

        :return: The escalation_level_delay_in_seconds of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :rtype: int
        """
        return self._escalation_level_delay_in_seconds

    @escalation_level_delay_in_seconds.setter
    def escalation_level_delay_in_seconds(self, escalation_level_delay_in_seconds):
        """Sets the escalation_level_delay_in_seconds of this UpdateLiveCallRouterDataAttributes.

        This overrides the delay (seconds) in escalation levels  # noqa: E501

        :param escalation_level_delay_in_seconds: The escalation_level_delay_in_seconds of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :type: int
        """

        self._escalation_level_delay_in_seconds = escalation_level_delay_in_seconds

    @property
    def should_auto_resolve_alert_on_call_end(self):
        """Gets the should_auto_resolve_alert_on_call_end of this UpdateLiveCallRouterDataAttributes.  # noqa: E501

        This overrides the delay (seconds) in escalation levels  # noqa: E501

        :return: The should_auto_resolve_alert_on_call_end of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._should_auto_resolve_alert_on_call_end

    @should_auto_resolve_alert_on_call_end.setter
    def should_auto_resolve_alert_on_call_end(self, should_auto_resolve_alert_on_call_end):
        """Sets the should_auto_resolve_alert_on_call_end of this UpdateLiveCallRouterDataAttributes.

        This overrides the delay (seconds) in escalation levels  # noqa: E501

        :param should_auto_resolve_alert_on_call_end: The should_auto_resolve_alert_on_call_end of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :type: bool
        """

        self._should_auto_resolve_alert_on_call_end = should_auto_resolve_alert_on_call_end

    @property
    def alert_urgency_id(self):
        """Gets the alert_urgency_id of this UpdateLiveCallRouterDataAttributes.  # noqa: E501

        This is used in escalation paths to determine who to page  # noqa: E501

        :return: The alert_urgency_id of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._alert_urgency_id

    @alert_urgency_id.setter
    def alert_urgency_id(self, alert_urgency_id):
        """Sets the alert_urgency_id of this UpdateLiveCallRouterDataAttributes.

        This is used in escalation paths to determine who to page  # noqa: E501

        :param alert_urgency_id: The alert_urgency_id of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :type: str
        """

        self._alert_urgency_id = alert_urgency_id

    @property
    def escalation_policy_trigger_params(self):
        """Gets the escalation_policy_trigger_params of this UpdateLiveCallRouterDataAttributes.  # noqa: E501


        :return: The escalation_policy_trigger_params of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :rtype: UpdateLiveCallRouterDataAttributesEscalationPolicyTriggerParams
        """
        return self._escalation_policy_trigger_params

    @escalation_policy_trigger_params.setter
    def escalation_policy_trigger_params(self, escalation_policy_trigger_params):
        """Sets the escalation_policy_trigger_params of this UpdateLiveCallRouterDataAttributes.


        :param escalation_policy_trigger_params: The escalation_policy_trigger_params of this UpdateLiveCallRouterDataAttributes.  # noqa: E501
        :type: UpdateLiveCallRouterDataAttributesEscalationPolicyTriggerParams
        """

        self._escalation_policy_trigger_params = escalation_policy_trigger_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateLiveCallRouterDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateLiveCallRouterDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
