# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateFunctionalityDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'public_description': 'str',
        'notify_emails': 'list[str]',
        'color': 'str',
        'position': 'int',
        'backstage_id': 'str',
        'external_id': 'str',
        'pagerduty_id': 'str',
        'opsgenie_id': 'str',
        'opsgenie_team_id': 'str',
        'cortex_id': 'str',
        'service_now_ci_sys_id': 'str',
        'environment_ids': 'list[str]',
        'service_ids': 'list[str]',
        'owners_group_ids': 'list[str]',
        'owners_user_ids': 'list[int]',
        'slack_channels': 'list[NewEnvironmentDataAttributesSlackChannels]',
        'slack_aliases': 'list[NewEnvironmentDataAttributesSlackAliases]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'public_description': 'public_description',
        'notify_emails': 'notify_emails',
        'color': 'color',
        'position': 'position',
        'backstage_id': 'backstage_id',
        'external_id': 'external_id',
        'pagerduty_id': 'pagerduty_id',
        'opsgenie_id': 'opsgenie_id',
        'opsgenie_team_id': 'opsgenie_team_id',
        'cortex_id': 'cortex_id',
        'service_now_ci_sys_id': 'service_now_ci_sys_id',
        'environment_ids': 'environment_ids',
        'service_ids': 'service_ids',
        'owners_group_ids': 'owners_group_ids',
        'owners_user_ids': 'owners_user_ids',
        'slack_channels': 'slack_channels',
        'slack_aliases': 'slack_aliases'
    }

    def __init__(self, name=None, description=None, public_description=None, notify_emails=None, color=None, position=None, backstage_id=None, external_id=None, pagerduty_id=None, opsgenie_id=None, opsgenie_team_id=None, cortex_id=None, service_now_ci_sys_id=None, environment_ids=None, service_ids=None, owners_group_ids=None, owners_user_ids=None, slack_channels=None, slack_aliases=None):  # noqa: E501
        """UpdateFunctionalityDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._public_description = None
        self._notify_emails = None
        self._color = None
        self._position = None
        self._backstage_id = None
        self._external_id = None
        self._pagerduty_id = None
        self._opsgenie_id = None
        self._opsgenie_team_id = None
        self._cortex_id = None
        self._service_now_ci_sys_id = None
        self._environment_ids = None
        self._service_ids = None
        self._owners_group_ids = None
        self._owners_user_ids = None
        self._slack_channels = None
        self._slack_aliases = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if public_description is not None:
            self.public_description = public_description
        if notify_emails is not None:
            self.notify_emails = notify_emails
        if color is not None:
            self.color = color
        if position is not None:
            self.position = position
        if backstage_id is not None:
            self.backstage_id = backstage_id
        if external_id is not None:
            self.external_id = external_id
        if pagerduty_id is not None:
            self.pagerduty_id = pagerduty_id
        if opsgenie_id is not None:
            self.opsgenie_id = opsgenie_id
        if opsgenie_team_id is not None:
            self.opsgenie_team_id = opsgenie_team_id
        if cortex_id is not None:
            self.cortex_id = cortex_id
        if service_now_ci_sys_id is not None:
            self.service_now_ci_sys_id = service_now_ci_sys_id
        if environment_ids is not None:
            self.environment_ids = environment_ids
        if service_ids is not None:
            self.service_ids = service_ids
        if owners_group_ids is not None:
            self.owners_group_ids = owners_group_ids
        if owners_user_ids is not None:
            self.owners_user_ids = owners_user_ids
        if slack_channels is not None:
            self.slack_channels = slack_channels
        if slack_aliases is not None:
            self.slack_aliases = slack_aliases

    @property
    def name(self):
        """Gets the name of this UpdateFunctionalityDataAttributes.  # noqa: E501

        The name of the functionality  # noqa: E501

        :return: The name of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateFunctionalityDataAttributes.

        The name of the functionality  # noqa: E501

        :param name: The name of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateFunctionalityDataAttributes.  # noqa: E501

        The description of the functionality  # noqa: E501

        :return: The description of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateFunctionalityDataAttributes.

        The description of the functionality  # noqa: E501

        :param description: The description of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def public_description(self):
        """Gets the public_description of this UpdateFunctionalityDataAttributes.  # noqa: E501

        The public description of the functionality  # noqa: E501

        :return: The public_description of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._public_description

    @public_description.setter
    def public_description(self, public_description):
        """Sets the public_description of this UpdateFunctionalityDataAttributes.

        The public description of the functionality  # noqa: E501

        :param public_description: The public_description of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: str
        """

        self._public_description = public_description

    @property
    def notify_emails(self):
        """Gets the notify_emails of this UpdateFunctionalityDataAttributes.  # noqa: E501

        Emails to attach to the functionality  # noqa: E501

        :return: The notify_emails of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._notify_emails

    @notify_emails.setter
    def notify_emails(self, notify_emails):
        """Sets the notify_emails of this UpdateFunctionalityDataAttributes.

        Emails to attach to the functionality  # noqa: E501

        :param notify_emails: The notify_emails of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._notify_emails = notify_emails

    @property
    def color(self):
        """Gets the color of this UpdateFunctionalityDataAttributes.  # noqa: E501

        The hex color of the functionality  # noqa: E501

        :return: The color of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this UpdateFunctionalityDataAttributes.

        The hex color of the functionality  # noqa: E501

        :param color: The color of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def position(self):
        """Gets the position of this UpdateFunctionalityDataAttributes.  # noqa: E501

        Position of the functionality  # noqa: E501

        :return: The position of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this UpdateFunctionalityDataAttributes.

        Position of the functionality  # noqa: E501

        :param position: The position of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def backstage_id(self):
        """Gets the backstage_id of this UpdateFunctionalityDataAttributes.  # noqa: E501

        The Backstage entity id associated to this functionality. eg: :namespace/:kind/:entity_name  # noqa: E501

        :return: The backstage_id of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._backstage_id

    @backstage_id.setter
    def backstage_id(self, backstage_id):
        """Sets the backstage_id of this UpdateFunctionalityDataAttributes.

        The Backstage entity id associated to this functionality. eg: :namespace/:kind/:entity_name  # noqa: E501

        :param backstage_id: The backstage_id of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: str
        """

        self._backstage_id = backstage_id

    @property
    def external_id(self):
        """Gets the external_id of this UpdateFunctionalityDataAttributes.  # noqa: E501

        The external id associated to this functionality  # noqa: E501

        :return: The external_id of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this UpdateFunctionalityDataAttributes.

        The external id associated to this functionality  # noqa: E501

        :param external_id: The external_id of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def pagerduty_id(self):
        """Gets the pagerduty_id of this UpdateFunctionalityDataAttributes.  # noqa: E501

        The PagerDuty service id associated to this functionality  # noqa: E501

        :return: The pagerduty_id of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._pagerduty_id

    @pagerduty_id.setter
    def pagerduty_id(self, pagerduty_id):
        """Sets the pagerduty_id of this UpdateFunctionalityDataAttributes.

        The PagerDuty service id associated to this functionality  # noqa: E501

        :param pagerduty_id: The pagerduty_id of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: str
        """

        self._pagerduty_id = pagerduty_id

    @property
    def opsgenie_id(self):
        """Gets the opsgenie_id of this UpdateFunctionalityDataAttributes.  # noqa: E501

        The Opsgenie service id associated to this functionality  # noqa: E501

        :return: The opsgenie_id of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._opsgenie_id

    @opsgenie_id.setter
    def opsgenie_id(self, opsgenie_id):
        """Sets the opsgenie_id of this UpdateFunctionalityDataAttributes.

        The Opsgenie service id associated to this functionality  # noqa: E501

        :param opsgenie_id: The opsgenie_id of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: str
        """

        self._opsgenie_id = opsgenie_id

    @property
    def opsgenie_team_id(self):
        """Gets the opsgenie_team_id of this UpdateFunctionalityDataAttributes.  # noqa: E501

        The Opsgenie team id associated to this functionality  # noqa: E501

        :return: The opsgenie_team_id of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._opsgenie_team_id

    @opsgenie_team_id.setter
    def opsgenie_team_id(self, opsgenie_team_id):
        """Sets the opsgenie_team_id of this UpdateFunctionalityDataAttributes.

        The Opsgenie team id associated to this functionality  # noqa: E501

        :param opsgenie_team_id: The opsgenie_team_id of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: str
        """

        self._opsgenie_team_id = opsgenie_team_id

    @property
    def cortex_id(self):
        """Gets the cortex_id of this UpdateFunctionalityDataAttributes.  # noqa: E501

        The Cortex group id associated to this functionality  # noqa: E501

        :return: The cortex_id of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._cortex_id

    @cortex_id.setter
    def cortex_id(self, cortex_id):
        """Sets the cortex_id of this UpdateFunctionalityDataAttributes.

        The Cortex group id associated to this functionality  # noqa: E501

        :param cortex_id: The cortex_id of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: str
        """

        self._cortex_id = cortex_id

    @property
    def service_now_ci_sys_id(self):
        """Gets the service_now_ci_sys_id of this UpdateFunctionalityDataAttributes.  # noqa: E501

        The Service Now CI sys id associated to this functionality  # noqa: E501

        :return: The service_now_ci_sys_id of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._service_now_ci_sys_id

    @service_now_ci_sys_id.setter
    def service_now_ci_sys_id(self, service_now_ci_sys_id):
        """Sets the service_now_ci_sys_id of this UpdateFunctionalityDataAttributes.

        The Service Now CI sys id associated to this functionality  # noqa: E501

        :param service_now_ci_sys_id: The service_now_ci_sys_id of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: str
        """

        self._service_now_ci_sys_id = service_now_ci_sys_id

    @property
    def environment_ids(self):
        """Gets the environment_ids of this UpdateFunctionalityDataAttributes.  # noqa: E501

        Environments associated with this functionality  # noqa: E501

        :return: The environment_ids of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._environment_ids

    @environment_ids.setter
    def environment_ids(self, environment_ids):
        """Sets the environment_ids of this UpdateFunctionalityDataAttributes.

        Environments associated with this functionality  # noqa: E501

        :param environment_ids: The environment_ids of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._environment_ids = environment_ids

    @property
    def service_ids(self):
        """Gets the service_ids of this UpdateFunctionalityDataAttributes.  # noqa: E501

        Services associated with this functionality  # noqa: E501

        :return: The service_ids of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_ids

    @service_ids.setter
    def service_ids(self, service_ids):
        """Sets the service_ids of this UpdateFunctionalityDataAttributes.

        Services associated with this functionality  # noqa: E501

        :param service_ids: The service_ids of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._service_ids = service_ids

    @property
    def owners_group_ids(self):
        """Gets the owners_group_ids of this UpdateFunctionalityDataAttributes.  # noqa: E501

        Owner Teams associated with this functionality  # noqa: E501

        :return: The owners_group_ids of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._owners_group_ids

    @owners_group_ids.setter
    def owners_group_ids(self, owners_group_ids):
        """Sets the owners_group_ids of this UpdateFunctionalityDataAttributes.

        Owner Teams associated with this functionality  # noqa: E501

        :param owners_group_ids: The owners_group_ids of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._owners_group_ids = owners_group_ids

    @property
    def owners_user_ids(self):
        """Gets the owners_user_ids of this UpdateFunctionalityDataAttributes.  # noqa: E501

        Owner Users associated with this functionality  # noqa: E501

        :return: The owners_user_ids of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: list[int]
        """
        return self._owners_user_ids

    @owners_user_ids.setter
    def owners_user_ids(self, owners_user_ids):
        """Sets the owners_user_ids of this UpdateFunctionalityDataAttributes.

        Owner Users associated with this functionality  # noqa: E501

        :param owners_user_ids: The owners_user_ids of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: list[int]
        """

        self._owners_user_ids = owners_user_ids

    @property
    def slack_channels(self):
        """Gets the slack_channels of this UpdateFunctionalityDataAttributes.  # noqa: E501

        Slack Channels associated with this functionality  # noqa: E501

        :return: The slack_channels of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: list[NewEnvironmentDataAttributesSlackChannels]
        """
        return self._slack_channels

    @slack_channels.setter
    def slack_channels(self, slack_channels):
        """Sets the slack_channels of this UpdateFunctionalityDataAttributes.

        Slack Channels associated with this functionality  # noqa: E501

        :param slack_channels: The slack_channels of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: list[NewEnvironmentDataAttributesSlackChannels]
        """

        self._slack_channels = slack_channels

    @property
    def slack_aliases(self):
        """Gets the slack_aliases of this UpdateFunctionalityDataAttributes.  # noqa: E501

        Slack Aliases associated with this functionality  # noqa: E501

        :return: The slack_aliases of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :rtype: list[NewEnvironmentDataAttributesSlackAliases]
        """
        return self._slack_aliases

    @slack_aliases.setter
    def slack_aliases(self, slack_aliases):
        """Sets the slack_aliases of this UpdateFunctionalityDataAttributes.

        Slack Aliases associated with this functionality  # noqa: E501

        :param slack_aliases: The slack_aliases of this UpdateFunctionalityDataAttributes.  # noqa: E501
        :type: list[NewEnvironmentDataAttributesSlackAliases]
        """

        self._slack_aliases = slack_aliases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateFunctionalityDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateFunctionalityDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
