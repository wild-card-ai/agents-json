# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Workflow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'slug': 'str',
        'description': 'str',
        'command': 'str',
        'command_feedback_enabled': 'bool',
        'wait': 'str',
        'repeat_every_duration': 'str',
        'repeat_condition_duration_since_first_run': 'str',
        'repeat_condition_number_of_repeats': 'int',
        'continuously_repeat': 'bool',
        'repeat_on': 'list[str]',
        'enabled': 'bool',
        'locked': 'bool',
        'position': 'int',
        'workflow_group_id': 'str',
        'trigger_params': 'OneOfworkflowTriggerParams',
        'environment_ids': 'list[str]',
        'severity_ids': 'list[str]',
        'incident_type_ids': 'list[str]',
        'incident_role_ids': 'list[str]',
        'service_ids': 'list[str]',
        'functionality_ids': 'list[str]',
        'group_ids': 'list[str]',
        'cause_ids': 'list[str]',
        'sub_status_ids': 'list[str]',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'name': 'name',
        'slug': 'slug',
        'description': 'description',
        'command': 'command',
        'command_feedback_enabled': 'command_feedback_enabled',
        'wait': 'wait',
        'repeat_every_duration': 'repeat_every_duration',
        'repeat_condition_duration_since_first_run': 'repeat_condition_duration_since_first_run',
        'repeat_condition_number_of_repeats': 'repeat_condition_number_of_repeats',
        'continuously_repeat': 'continuously_repeat',
        'repeat_on': 'repeat_on',
        'enabled': 'enabled',
        'locked': 'locked',
        'position': 'position',
        'workflow_group_id': 'workflow_group_id',
        'trigger_params': 'trigger_params',
        'environment_ids': 'environment_ids',
        'severity_ids': 'severity_ids',
        'incident_type_ids': 'incident_type_ids',
        'incident_role_ids': 'incident_role_ids',
        'service_ids': 'service_ids',
        'functionality_ids': 'functionality_ids',
        'group_ids': 'group_ids',
        'cause_ids': 'cause_ids',
        'sub_status_ids': 'sub_status_ids',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, name=None, slug=None, description=None, command=None, command_feedback_enabled=None, wait=None, repeat_every_duration=None, repeat_condition_duration_since_first_run=None, repeat_condition_number_of_repeats=None, continuously_repeat=None, repeat_on=None, enabled=None, locked=None, position=None, workflow_group_id=None, trigger_params=None, environment_ids=None, severity_ids=None, incident_type_ids=None, incident_role_ids=None, service_ids=None, functionality_ids=None, group_ids=None, cause_ids=None, sub_status_ids=None, created_at=None, updated_at=None):  # noqa: E501
        """Workflow - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._slug = None
        self._description = None
        self._command = None
        self._command_feedback_enabled = None
        self._wait = None
        self._repeat_every_duration = None
        self._repeat_condition_duration_since_first_run = None
        self._repeat_condition_number_of_repeats = None
        self._continuously_repeat = None
        self._repeat_on = None
        self._enabled = None
        self._locked = None
        self._position = None
        self._workflow_group_id = None
        self._trigger_params = None
        self._environment_ids = None
        self._severity_ids = None
        self._incident_type_ids = None
        self._incident_role_ids = None
        self._service_ids = None
        self._functionality_ids = None
        self._group_ids = None
        self._cause_ids = None
        self._sub_status_ids = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.name = name
        if slug is not None:
            self.slug = slug
        if description is not None:
            self.description = description
        if command is not None:
            self.command = command
        if command_feedback_enabled is not None:
            self.command_feedback_enabled = command_feedback_enabled
        if wait is not None:
            self.wait = wait
        if repeat_every_duration is not None:
            self.repeat_every_duration = repeat_every_duration
        if repeat_condition_duration_since_first_run is not None:
            self.repeat_condition_duration_since_first_run = repeat_condition_duration_since_first_run
        if repeat_condition_number_of_repeats is not None:
            self.repeat_condition_number_of_repeats = repeat_condition_number_of_repeats
        if continuously_repeat is not None:
            self.continuously_repeat = continuously_repeat
        if repeat_on is not None:
            self.repeat_on = repeat_on
        if enabled is not None:
            self.enabled = enabled
        if locked is not None:
            self.locked = locked
        if position is not None:
            self.position = position
        if workflow_group_id is not None:
            self.workflow_group_id = workflow_group_id
        if trigger_params is not None:
            self.trigger_params = trigger_params
        if environment_ids is not None:
            self.environment_ids = environment_ids
        if severity_ids is not None:
            self.severity_ids = severity_ids
        if incident_type_ids is not None:
            self.incident_type_ids = incident_type_ids
        if incident_role_ids is not None:
            self.incident_role_ids = incident_role_ids
        if service_ids is not None:
            self.service_ids = service_ids
        if functionality_ids is not None:
            self.functionality_ids = functionality_ids
        if group_ids is not None:
            self.group_ids = group_ids
        if cause_ids is not None:
            self.cause_ids = cause_ids
        if sub_status_ids is not None:
            self.sub_status_ids = sub_status_ids
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def name(self):
        """Gets the name of this Workflow.  # noqa: E501

        The title of the workflow  # noqa: E501

        :return: The name of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workflow.

        The title of the workflow  # noqa: E501

        :param name: The name of this Workflow.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this Workflow.  # noqa: E501

        The slug of the workflow  # noqa: E501

        :return: The slug of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Workflow.

        The slug of the workflow  # noqa: E501

        :param slug: The slug of this Workflow.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def description(self):
        """Gets the description of this Workflow.  # noqa: E501

        The description of the workflow  # noqa: E501

        :return: The description of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Workflow.

        The description of the workflow  # noqa: E501

        :param description: The description of this Workflow.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def command(self):
        """Gets the command of this Workflow.  # noqa: E501

        Workflow command  # noqa: E501

        :return: The command of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this Workflow.

        Workflow command  # noqa: E501

        :param command: The command of this Workflow.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def command_feedback_enabled(self):
        """Gets the command_feedback_enabled of this Workflow.  # noqa: E501

        This will notify you back when the workflow is starting  # noqa: E501

        :return: The command_feedback_enabled of this Workflow.  # noqa: E501
        :rtype: bool
        """
        return self._command_feedback_enabled

    @command_feedback_enabled.setter
    def command_feedback_enabled(self, command_feedback_enabled):
        """Sets the command_feedback_enabled of this Workflow.

        This will notify you back when the workflow is starting  # noqa: E501

        :param command_feedback_enabled: The command_feedback_enabled of this Workflow.  # noqa: E501
        :type: bool
        """

        self._command_feedback_enabled = command_feedback_enabled

    @property
    def wait(self):
        """Gets the wait of this Workflow.  # noqa: E501

        Wait this duration before executing  # noqa: E501

        :return: The wait of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._wait

    @wait.setter
    def wait(self, wait):
        """Sets the wait of this Workflow.

        Wait this duration before executing  # noqa: E501

        :param wait: The wait of this Workflow.  # noqa: E501
        :type: str
        """

        self._wait = wait

    @property
    def repeat_every_duration(self):
        """Gets the repeat_every_duration of this Workflow.  # noqa: E501

        Repeat workflow every duration  # noqa: E501

        :return: The repeat_every_duration of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._repeat_every_duration

    @repeat_every_duration.setter
    def repeat_every_duration(self, repeat_every_duration):
        """Sets the repeat_every_duration of this Workflow.

        Repeat workflow every duration  # noqa: E501

        :param repeat_every_duration: The repeat_every_duration of this Workflow.  # noqa: E501
        :type: str
        """

        self._repeat_every_duration = repeat_every_duration

    @property
    def repeat_condition_duration_since_first_run(self):
        """Gets the repeat_condition_duration_since_first_run of this Workflow.  # noqa: E501

        The workflow will stop repeating if its runtime since it's first workflow run exceeds the duration set in this field  # noqa: E501

        :return: The repeat_condition_duration_since_first_run of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._repeat_condition_duration_since_first_run

    @repeat_condition_duration_since_first_run.setter
    def repeat_condition_duration_since_first_run(self, repeat_condition_duration_since_first_run):
        """Sets the repeat_condition_duration_since_first_run of this Workflow.

        The workflow will stop repeating if its runtime since it's first workflow run exceeds the duration set in this field  # noqa: E501

        :param repeat_condition_duration_since_first_run: The repeat_condition_duration_since_first_run of this Workflow.  # noqa: E501
        :type: str
        """

        self._repeat_condition_duration_since_first_run = repeat_condition_duration_since_first_run

    @property
    def repeat_condition_number_of_repeats(self):
        """Gets the repeat_condition_number_of_repeats of this Workflow.  # noqa: E501

        The workflow will stop repeating if the number of repeats exceeds the value set in this field  # noqa: E501

        :return: The repeat_condition_number_of_repeats of this Workflow.  # noqa: E501
        :rtype: int
        """
        return self._repeat_condition_number_of_repeats

    @repeat_condition_number_of_repeats.setter
    def repeat_condition_number_of_repeats(self, repeat_condition_number_of_repeats):
        """Sets the repeat_condition_number_of_repeats of this Workflow.

        The workflow will stop repeating if the number of repeats exceeds the value set in this field  # noqa: E501

        :param repeat_condition_number_of_repeats: The repeat_condition_number_of_repeats of this Workflow.  # noqa: E501
        :type: int
        """

        self._repeat_condition_number_of_repeats = repeat_condition_number_of_repeats

    @property
    def continuously_repeat(self):
        """Gets the continuously_repeat of this Workflow.  # noqa: E501

        When continuously repeat is true, repeat workflows aren't automatically stopped when conditions aren't met. This setting won't override your conditions set by repeat_condition_duration_since_first_run and repeat_condition_number_of_repeats parameters.  # noqa: E501

        :return: The continuously_repeat of this Workflow.  # noqa: E501
        :rtype: bool
        """
        return self._continuously_repeat

    @continuously_repeat.setter
    def continuously_repeat(self, continuously_repeat):
        """Sets the continuously_repeat of this Workflow.

        When continuously repeat is true, repeat workflows aren't automatically stopped when conditions aren't met. This setting won't override your conditions set by repeat_condition_duration_since_first_run and repeat_condition_number_of_repeats parameters.  # noqa: E501

        :param continuously_repeat: The continuously_repeat of this Workflow.  # noqa: E501
        :type: bool
        """

        self._continuously_repeat = continuously_repeat

    @property
    def repeat_on(self):
        """Gets the repeat_on of this Workflow.  # noqa: E501


        :return: The repeat_on of this Workflow.  # noqa: E501
        :rtype: list[str]
        """
        return self._repeat_on

    @repeat_on.setter
    def repeat_on(self, repeat_on):
        """Sets the repeat_on of this Workflow.


        :param repeat_on: The repeat_on of this Workflow.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["S", "M", "T", "W", "R", "F", "U"]  # noqa: E501
        if not set(repeat_on).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `repeat_on` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(repeat_on) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._repeat_on = repeat_on

    @property
    def enabled(self):
        """Gets the enabled of this Workflow.  # noqa: E501


        :return: The enabled of this Workflow.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Workflow.


        :param enabled: The enabled of this Workflow.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def locked(self):
        """Gets the locked of this Workflow.  # noqa: E501

        Restricts workflow edits to admins when turned on. Only admins can set this field.  # noqa: E501

        :return: The locked of this Workflow.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Workflow.

        Restricts workflow edits to admins when turned on. Only admins can set this field.  # noqa: E501

        :param locked: The locked of this Workflow.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def position(self):
        """Gets the position of this Workflow.  # noqa: E501

        The order which the workflow should run with other workflows.  # noqa: E501

        :return: The position of this Workflow.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Workflow.

        The order which the workflow should run with other workflows.  # noqa: E501

        :param position: The position of this Workflow.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def workflow_group_id(self):
        """Gets the workflow_group_id of this Workflow.  # noqa: E501

        The group this workflow belongs to.  # noqa: E501

        :return: The workflow_group_id of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._workflow_group_id

    @workflow_group_id.setter
    def workflow_group_id(self, workflow_group_id):
        """Sets the workflow_group_id of this Workflow.

        The group this workflow belongs to.  # noqa: E501

        :param workflow_group_id: The workflow_group_id of this Workflow.  # noqa: E501
        :type: str
        """

        self._workflow_group_id = workflow_group_id

    @property
    def trigger_params(self):
        """Gets the trigger_params of this Workflow.  # noqa: E501


        :return: The trigger_params of this Workflow.  # noqa: E501
        :rtype: OneOfworkflowTriggerParams
        """
        return self._trigger_params

    @trigger_params.setter
    def trigger_params(self, trigger_params):
        """Sets the trigger_params of this Workflow.


        :param trigger_params: The trigger_params of this Workflow.  # noqa: E501
        :type: OneOfworkflowTriggerParams
        """

        self._trigger_params = trigger_params

    @property
    def environment_ids(self):
        """Gets the environment_ids of this Workflow.  # noqa: E501


        :return: The environment_ids of this Workflow.  # noqa: E501
        :rtype: list[str]
        """
        return self._environment_ids

    @environment_ids.setter
    def environment_ids(self, environment_ids):
        """Sets the environment_ids of this Workflow.


        :param environment_ids: The environment_ids of this Workflow.  # noqa: E501
        :type: list[str]
        """

        self._environment_ids = environment_ids

    @property
    def severity_ids(self):
        """Gets the severity_ids of this Workflow.  # noqa: E501


        :return: The severity_ids of this Workflow.  # noqa: E501
        :rtype: list[str]
        """
        return self._severity_ids

    @severity_ids.setter
    def severity_ids(self, severity_ids):
        """Sets the severity_ids of this Workflow.


        :param severity_ids: The severity_ids of this Workflow.  # noqa: E501
        :type: list[str]
        """

        self._severity_ids = severity_ids

    @property
    def incident_type_ids(self):
        """Gets the incident_type_ids of this Workflow.  # noqa: E501


        :return: The incident_type_ids of this Workflow.  # noqa: E501
        :rtype: list[str]
        """
        return self._incident_type_ids

    @incident_type_ids.setter
    def incident_type_ids(self, incident_type_ids):
        """Sets the incident_type_ids of this Workflow.


        :param incident_type_ids: The incident_type_ids of this Workflow.  # noqa: E501
        :type: list[str]
        """

        self._incident_type_ids = incident_type_ids

    @property
    def incident_role_ids(self):
        """Gets the incident_role_ids of this Workflow.  # noqa: E501


        :return: The incident_role_ids of this Workflow.  # noqa: E501
        :rtype: list[str]
        """
        return self._incident_role_ids

    @incident_role_ids.setter
    def incident_role_ids(self, incident_role_ids):
        """Sets the incident_role_ids of this Workflow.


        :param incident_role_ids: The incident_role_ids of this Workflow.  # noqa: E501
        :type: list[str]
        """

        self._incident_role_ids = incident_role_ids

    @property
    def service_ids(self):
        """Gets the service_ids of this Workflow.  # noqa: E501


        :return: The service_ids of this Workflow.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_ids

    @service_ids.setter
    def service_ids(self, service_ids):
        """Sets the service_ids of this Workflow.


        :param service_ids: The service_ids of this Workflow.  # noqa: E501
        :type: list[str]
        """

        self._service_ids = service_ids

    @property
    def functionality_ids(self):
        """Gets the functionality_ids of this Workflow.  # noqa: E501


        :return: The functionality_ids of this Workflow.  # noqa: E501
        :rtype: list[str]
        """
        return self._functionality_ids

    @functionality_ids.setter
    def functionality_ids(self, functionality_ids):
        """Sets the functionality_ids of this Workflow.


        :param functionality_ids: The functionality_ids of this Workflow.  # noqa: E501
        :type: list[str]
        """

        self._functionality_ids = functionality_ids

    @property
    def group_ids(self):
        """Gets the group_ids of this Workflow.  # noqa: E501


        :return: The group_ids of this Workflow.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this Workflow.


        :param group_ids: The group_ids of this Workflow.  # noqa: E501
        :type: list[str]
        """

        self._group_ids = group_ids

    @property
    def cause_ids(self):
        """Gets the cause_ids of this Workflow.  # noqa: E501


        :return: The cause_ids of this Workflow.  # noqa: E501
        :rtype: list[str]
        """
        return self._cause_ids

    @cause_ids.setter
    def cause_ids(self, cause_ids):
        """Sets the cause_ids of this Workflow.


        :param cause_ids: The cause_ids of this Workflow.  # noqa: E501
        :type: list[str]
        """

        self._cause_ids = cause_ids

    @property
    def sub_status_ids(self):
        """Gets the sub_status_ids of this Workflow.  # noqa: E501


        :return: The sub_status_ids of this Workflow.  # noqa: E501
        :rtype: list[str]
        """
        return self._sub_status_ids

    @sub_status_ids.setter
    def sub_status_ids(self, sub_status_ids):
        """Sets the sub_status_ids of this Workflow.


        :param sub_status_ids: The sub_status_ids of this Workflow.  # noqa: E501
        :type: list[str]
        """

        self._sub_status_ids = sub_status_ids

    @property
    def created_at(self):
        """Gets the created_at of this Workflow.  # noqa: E501

        Date of creation  # noqa: E501

        :return: The created_at of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Workflow.

        Date of creation  # noqa: E501

        :param created_at: The created_at of this Workflow.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Workflow.  # noqa: E501

        Date of last update  # noqa: E501

        :return: The updated_at of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Workflow.

        Date of last update  # noqa: E501

        :param updated_at: The updated_at of this Workflow.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Workflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Workflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
