# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateIncidentPostMortemDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'status': 'str',
        'started_at': 'str',
        'mitigated_at': 'str',
        'resolved_at': 'str',
        'show_timeline': 'bool',
        'show_timeline_trail': 'bool',
        'show_timeline_genius': 'bool',
        'show_timeline_tasks': 'bool',
        'show_timeline_action_items': 'bool',
        'show_services_impacted': 'bool',
        'show_functionalities_impacted': 'bool',
        'show_groups_impacted': 'bool',
        'show_alerts_attached': 'bool',
        'show_action_items': 'bool',
        'cause_ids': 'list[str]'
    }

    attribute_map = {
        'title': 'title',
        'status': 'status',
        'started_at': 'started_at',
        'mitigated_at': 'mitigated_at',
        'resolved_at': 'resolved_at',
        'show_timeline': 'show_timeline',
        'show_timeline_trail': 'show_timeline_trail',
        'show_timeline_genius': 'show_timeline_genius',
        'show_timeline_tasks': 'show_timeline_tasks',
        'show_timeline_action_items': 'show_timeline_action_items',
        'show_services_impacted': 'show_services_impacted',
        'show_functionalities_impacted': 'show_functionalities_impacted',
        'show_groups_impacted': 'show_groups_impacted',
        'show_alerts_attached': 'show_alerts_attached',
        'show_action_items': 'show_action_items',
        'cause_ids': 'cause_ids'
    }

    def __init__(self, title=None, status=None, started_at=None, mitigated_at=None, resolved_at=None, show_timeline=None, show_timeline_trail=None, show_timeline_genius=None, show_timeline_tasks=None, show_timeline_action_items=None, show_services_impacted=None, show_functionalities_impacted=None, show_groups_impacted=None, show_alerts_attached=None, show_action_items=None, cause_ids=None):  # noqa: E501
        """UpdateIncidentPostMortemDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._status = None
        self._started_at = None
        self._mitigated_at = None
        self._resolved_at = None
        self._show_timeline = None
        self._show_timeline_trail = None
        self._show_timeline_genius = None
        self._show_timeline_tasks = None
        self._show_timeline_action_items = None
        self._show_services_impacted = None
        self._show_functionalities_impacted = None
        self._show_groups_impacted = None
        self._show_alerts_attached = None
        self._show_action_items = None
        self._cause_ids = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if status is not None:
            self.status = status
        if started_at is not None:
            self.started_at = started_at
        if mitigated_at is not None:
            self.mitigated_at = mitigated_at
        if resolved_at is not None:
            self.resolved_at = resolved_at
        if show_timeline is not None:
            self.show_timeline = show_timeline
        if show_timeline_trail is not None:
            self.show_timeline_trail = show_timeline_trail
        if show_timeline_genius is not None:
            self.show_timeline_genius = show_timeline_genius
        if show_timeline_tasks is not None:
            self.show_timeline_tasks = show_timeline_tasks
        if show_timeline_action_items is not None:
            self.show_timeline_action_items = show_timeline_action_items
        if show_services_impacted is not None:
            self.show_services_impacted = show_services_impacted
        if show_functionalities_impacted is not None:
            self.show_functionalities_impacted = show_functionalities_impacted
        if show_groups_impacted is not None:
            self.show_groups_impacted = show_groups_impacted
        if show_alerts_attached is not None:
            self.show_alerts_attached = show_alerts_attached
        if show_action_items is not None:
            self.show_action_items = show_action_items
        if cause_ids is not None:
            self.cause_ids = cause_ids

    @property
    def title(self):
        """Gets the title of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        The title of the incident retrospective  # noqa: E501

        :return: The title of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UpdateIncidentPostMortemDataAttributes.

        The title of the incident retrospective  # noqa: E501

        :param title: The title of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def status(self):
        """Gets the status of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        The status of the incident retrospective  # noqa: E501

        :return: The status of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateIncidentPostMortemDataAttributes.

        The status of the incident retrospective  # noqa: E501

        :param status: The status of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["draft", "published"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def started_at(self):
        """Gets the started_at of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        Date of started at  # noqa: E501

        :return: The started_at of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this UpdateIncidentPostMortemDataAttributes.

        Date of started at  # noqa: E501

        :param started_at: The started_at of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: str
        """

        self._started_at = started_at

    @property
    def mitigated_at(self):
        """Gets the mitigated_at of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        Date of mitigation  # noqa: E501

        :return: The mitigated_at of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._mitigated_at

    @mitigated_at.setter
    def mitigated_at(self, mitigated_at):
        """Sets the mitigated_at of this UpdateIncidentPostMortemDataAttributes.

        Date of mitigation  # noqa: E501

        :param mitigated_at: The mitigated_at of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: str
        """

        self._mitigated_at = mitigated_at

    @property
    def resolved_at(self):
        """Gets the resolved_at of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        Date of resolution  # noqa: E501

        :return: The resolved_at of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._resolved_at

    @resolved_at.setter
    def resolved_at(self, resolved_at):
        """Sets the resolved_at of this UpdateIncidentPostMortemDataAttributes.

        Date of resolution  # noqa: E501

        :param resolved_at: The resolved_at of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: str
        """

        self._resolved_at = resolved_at

    @property
    def show_timeline(self):
        """Gets the show_timeline of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        Show events timeline of the incident retrospective  # noqa: E501

        :return: The show_timeline of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._show_timeline

    @show_timeline.setter
    def show_timeline(self, show_timeline):
        """Sets the show_timeline of this UpdateIncidentPostMortemDataAttributes.

        Show events timeline of the incident retrospective  # noqa: E501

        :param show_timeline: The show_timeline of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: bool
        """

        self._show_timeline = show_timeline

    @property
    def show_timeline_trail(self):
        """Gets the show_timeline_trail of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        Show trail events in the timeline of the incident retrospective  # noqa: E501

        :return: The show_timeline_trail of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._show_timeline_trail

    @show_timeline_trail.setter
    def show_timeline_trail(self, show_timeline_trail):
        """Sets the show_timeline_trail of this UpdateIncidentPostMortemDataAttributes.

        Show trail events in the timeline of the incident retrospective  # noqa: E501

        :param show_timeline_trail: The show_timeline_trail of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: bool
        """

        self._show_timeline_trail = show_timeline_trail

    @property
    def show_timeline_genius(self):
        """Gets the show_timeline_genius of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        Show workflow events in the timeline of the incident retrospective  # noqa: E501

        :return: The show_timeline_genius of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._show_timeline_genius

    @show_timeline_genius.setter
    def show_timeline_genius(self, show_timeline_genius):
        """Sets the show_timeline_genius of this UpdateIncidentPostMortemDataAttributes.

        Show workflow events in the timeline of the incident retrospective  # noqa: E501

        :param show_timeline_genius: The show_timeline_genius of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: bool
        """

        self._show_timeline_genius = show_timeline_genius

    @property
    def show_timeline_tasks(self):
        """Gets the show_timeline_tasks of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        Show tasks in the timeline of the incident retrospective  # noqa: E501

        :return: The show_timeline_tasks of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._show_timeline_tasks

    @show_timeline_tasks.setter
    def show_timeline_tasks(self, show_timeline_tasks):
        """Sets the show_timeline_tasks of this UpdateIncidentPostMortemDataAttributes.

        Show tasks in the timeline of the incident retrospective  # noqa: E501

        :param show_timeline_tasks: The show_timeline_tasks of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: bool
        """

        self._show_timeline_tasks = show_timeline_tasks

    @property
    def show_timeline_action_items(self):
        """Gets the show_timeline_action_items of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        Show action items in the timeline of the incident retrospective  # noqa: E501

        :return: The show_timeline_action_items of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._show_timeline_action_items

    @show_timeline_action_items.setter
    def show_timeline_action_items(self, show_timeline_action_items):
        """Sets the show_timeline_action_items of this UpdateIncidentPostMortemDataAttributes.

        Show action items in the timeline of the incident retrospective  # noqa: E501

        :param show_timeline_action_items: The show_timeline_action_items of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: bool
        """

        self._show_timeline_action_items = show_timeline_action_items

    @property
    def show_services_impacted(self):
        """Gets the show_services_impacted of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        Show functionalities impacted of the incident retrospective  # noqa: E501

        :return: The show_services_impacted of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._show_services_impacted

    @show_services_impacted.setter
    def show_services_impacted(self, show_services_impacted):
        """Sets the show_services_impacted of this UpdateIncidentPostMortemDataAttributes.

        Show functionalities impacted of the incident retrospective  # noqa: E501

        :param show_services_impacted: The show_services_impacted of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: bool
        """

        self._show_services_impacted = show_services_impacted

    @property
    def show_functionalities_impacted(self):
        """Gets the show_functionalities_impacted of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        Show services impacted of the incident retrospective  # noqa: E501

        :return: The show_functionalities_impacted of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._show_functionalities_impacted

    @show_functionalities_impacted.setter
    def show_functionalities_impacted(self, show_functionalities_impacted):
        """Sets the show_functionalities_impacted of this UpdateIncidentPostMortemDataAttributes.

        Show services impacted of the incident retrospective  # noqa: E501

        :param show_functionalities_impacted: The show_functionalities_impacted of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: bool
        """

        self._show_functionalities_impacted = show_functionalities_impacted

    @property
    def show_groups_impacted(self):
        """Gets the show_groups_impacted of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        Show groups impacted of the incident retrospective  # noqa: E501

        :return: The show_groups_impacted of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._show_groups_impacted

    @show_groups_impacted.setter
    def show_groups_impacted(self, show_groups_impacted):
        """Sets the show_groups_impacted of this UpdateIncidentPostMortemDataAttributes.

        Show groups impacted of the incident retrospective  # noqa: E501

        :param show_groups_impacted: The show_groups_impacted of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: bool
        """

        self._show_groups_impacted = show_groups_impacted

    @property
    def show_alerts_attached(self):
        """Gets the show_alerts_attached of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        Show alerts attached to the incident  # noqa: E501

        :return: The show_alerts_attached of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._show_alerts_attached

    @show_alerts_attached.setter
    def show_alerts_attached(self, show_alerts_attached):
        """Sets the show_alerts_attached of this UpdateIncidentPostMortemDataAttributes.

        Show alerts attached to the incident  # noqa: E501

        :param show_alerts_attached: The show_alerts_attached of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: bool
        """

        self._show_alerts_attached = show_alerts_attached

    @property
    def show_action_items(self):
        """Gets the show_action_items of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        Show action items (follow-ups) in the incident retrospective  # noqa: E501

        :return: The show_action_items of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._show_action_items

    @show_action_items.setter
    def show_action_items(self, show_action_items):
        """Sets the show_action_items of this UpdateIncidentPostMortemDataAttributes.

        Show action items (follow-ups) in the incident retrospective  # noqa: E501

        :param show_action_items: The show_action_items of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: bool
        """

        self._show_action_items = show_action_items

    @property
    def cause_ids(self):
        """Gets the cause_ids of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501

        The Cause ID's to attach to the incident retrospective  # noqa: E501

        :return: The cause_ids of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._cause_ids

    @cause_ids.setter
    def cause_ids(self, cause_ids):
        """Sets the cause_ids of this UpdateIncidentPostMortemDataAttributes.

        The Cause ID's to attach to the incident retrospective  # noqa: E501

        :param cause_ids: The cause_ids of this UpdateIncidentPostMortemDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._cause_ids = cause_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateIncidentPostMortemDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateIncidentPostMortemDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
