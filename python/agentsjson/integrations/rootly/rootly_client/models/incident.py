# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Incident(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'kind': 'str',
        'slug': 'str',
        'parent_incident_id': 'str',
        'summary': 'str',
        'private': 'bool',
        'severity': 'AllOfincidentSeverity',
        'environments': 'list[AllOfincidentEnvironmentsItems]',
        'incident_types': 'list[AllOfincidentIncidentTypesItems]',
        'services': 'list[AllOfincidentServicesItems]',
        'functionalities': 'list[AllOfincidentFunctionalitiesItems]',
        'groups': 'list[AllOfincidentGroupsItems]',
        'labels': 'object',
        'slack_channel_id': 'str',
        'slack_channel_name': 'str',
        'slack_channel_url': 'str',
        'mitigation_message': 'str',
        'resolution_message': 'str',
        'cancellation_message': 'str',
        'scheduled_for': 'str',
        'scheduled_until': 'str',
        'retrospective_progress_status': 'str',
        'in_triage_at': 'str',
        'started_at': 'str',
        'detected_at': 'str',
        'acknowledged_at': 'str',
        'mitigated_at': 'str',
        'resolved_at': 'str',
        'cancelled_at': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'title': 'title',
        'kind': 'kind',
        'slug': 'slug',
        'parent_incident_id': 'parent_incident_id',
        'summary': 'summary',
        'private': 'private',
        'severity': 'severity',
        'environments': 'environments',
        'incident_types': 'incident_types',
        'services': 'services',
        'functionalities': 'functionalities',
        'groups': 'groups',
        'labels': 'labels',
        'slack_channel_id': 'slack_channel_id',
        'slack_channel_name': 'slack_channel_name',
        'slack_channel_url': 'slack_channel_url',
        'mitigation_message': 'mitigation_message',
        'resolution_message': 'resolution_message',
        'cancellation_message': 'cancellation_message',
        'scheduled_for': 'scheduled_for',
        'scheduled_until': 'scheduled_until',
        'retrospective_progress_status': 'retrospective_progress_status',
        'in_triage_at': 'in_triage_at',
        'started_at': 'started_at',
        'detected_at': 'detected_at',
        'acknowledged_at': 'acknowledged_at',
        'mitigated_at': 'mitigated_at',
        'resolved_at': 'resolved_at',
        'cancelled_at': 'cancelled_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, title=None, kind=None, slug=None, parent_incident_id=None, summary=None, private=False, severity=None, environments=None, incident_types=None, services=None, functionalities=None, groups=None, labels=None, slack_channel_id=None, slack_channel_name=None, slack_channel_url=None, mitigation_message=None, resolution_message=None, cancellation_message=None, scheduled_for=None, scheduled_until=None, retrospective_progress_status=None, in_triage_at=None, started_at=None, detected_at=None, acknowledged_at=None, mitigated_at=None, resolved_at=None, cancelled_at=None, created_at=None, updated_at=None):  # noqa: E501
        """Incident - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._kind = None
        self._slug = None
        self._parent_incident_id = None
        self._summary = None
        self._private = None
        self._severity = None
        self._environments = None
        self._incident_types = None
        self._services = None
        self._functionalities = None
        self._groups = None
        self._labels = None
        self._slack_channel_id = None
        self._slack_channel_name = None
        self._slack_channel_url = None
        self._mitigation_message = None
        self._resolution_message = None
        self._cancellation_message = None
        self._scheduled_for = None
        self._scheduled_until = None
        self._retrospective_progress_status = None
        self._in_triage_at = None
        self._started_at = None
        self._detected_at = None
        self._acknowledged_at = None
        self._mitigated_at = None
        self._resolved_at = None
        self._cancelled_at = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.title = title
        if kind is not None:
            self.kind = kind
        self.slug = slug
        if parent_incident_id is not None:
            self.parent_incident_id = parent_incident_id
        if summary is not None:
            self.summary = summary
        if private is not None:
            self.private = private
        if severity is not None:
            self.severity = severity
        if environments is not None:
            self.environments = environments
        if incident_types is not None:
            self.incident_types = incident_types
        if services is not None:
            self.services = services
        if functionalities is not None:
            self.functionalities = functionalities
        if groups is not None:
            self.groups = groups
        if labels is not None:
            self.labels = labels
        if slack_channel_id is not None:
            self.slack_channel_id = slack_channel_id
        if slack_channel_name is not None:
            self.slack_channel_name = slack_channel_name
        if slack_channel_url is not None:
            self.slack_channel_url = slack_channel_url
        if mitigation_message is not None:
            self.mitigation_message = mitigation_message
        if resolution_message is not None:
            self.resolution_message = resolution_message
        if cancellation_message is not None:
            self.cancellation_message = cancellation_message
        if scheduled_for is not None:
            self.scheduled_for = scheduled_for
        if scheduled_until is not None:
            self.scheduled_until = scheduled_until
        if retrospective_progress_status is not None:
            self.retrospective_progress_status = retrospective_progress_status
        if in_triage_at is not None:
            self.in_triage_at = in_triage_at
        if started_at is not None:
            self.started_at = started_at
        if detected_at is not None:
            self.detected_at = detected_at
        if acknowledged_at is not None:
            self.acknowledged_at = acknowledged_at
        if mitigated_at is not None:
            self.mitigated_at = mitigated_at
        if resolved_at is not None:
            self.resolved_at = resolved_at
        if cancelled_at is not None:
            self.cancelled_at = cancelled_at
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def title(self):
        """Gets the title of this Incident.  # noqa: E501

        The title of the incident  # noqa: E501

        :return: The title of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Incident.

        The title of the incident  # noqa: E501

        :param title: The title of this Incident.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def kind(self):
        """Gets the kind of this Incident.  # noqa: E501

        The kind of the incident  # noqa: E501

        :return: The kind of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Incident.

        The kind of the incident  # noqa: E501

        :param kind: The kind of this Incident.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def slug(self):
        """Gets the slug of this Incident.  # noqa: E501

        The slug of the incident  # noqa: E501

        :return: The slug of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Incident.

        The slug of the incident  # noqa: E501

        :param slug: The slug of this Incident.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def parent_incident_id(self):
        """Gets the parent_incident_id of this Incident.  # noqa: E501

        ID of parent incident  # noqa: E501

        :return: The parent_incident_id of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._parent_incident_id

    @parent_incident_id.setter
    def parent_incident_id(self, parent_incident_id):
        """Sets the parent_incident_id of this Incident.

        ID of parent incident  # noqa: E501

        :param parent_incident_id: The parent_incident_id of this Incident.  # noqa: E501
        :type: str
        """

        self._parent_incident_id = parent_incident_id

    @property
    def summary(self):
        """Gets the summary of this Incident.  # noqa: E501

        The summary of the incident  # noqa: E501

        :return: The summary of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Incident.

        The summary of the incident  # noqa: E501

        :param summary: The summary of this Incident.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def private(self):
        """Gets the private of this Incident.  # noqa: E501

        Create an incident as private  # noqa: E501

        :return: The private of this Incident.  # noqa: E501
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this Incident.

        Create an incident as private  # noqa: E501

        :param private: The private of this Incident.  # noqa: E501
        :type: bool
        """

        self._private = private

    @property
    def severity(self):
        """Gets the severity of this Incident.  # noqa: E501

        The Severity of the incident  # noqa: E501

        :return: The severity of this Incident.  # noqa: E501
        :rtype: AllOfincidentSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Incident.

        The Severity of the incident  # noqa: E501

        :param severity: The severity of this Incident.  # noqa: E501
        :type: AllOfincidentSeverity
        """

        self._severity = severity

    @property
    def environments(self):
        """Gets the environments of this Incident.  # noqa: E501

        The Environments of the incident  # noqa: E501

        :return: The environments of this Incident.  # noqa: E501
        :rtype: list[AllOfincidentEnvironmentsItems]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this Incident.

        The Environments of the incident  # noqa: E501

        :param environments: The environments of this Incident.  # noqa: E501
        :type: list[AllOfincidentEnvironmentsItems]
        """

        self._environments = environments

    @property
    def incident_types(self):
        """Gets the incident_types of this Incident.  # noqa: E501

        The Incident Types of the incident  # noqa: E501

        :return: The incident_types of this Incident.  # noqa: E501
        :rtype: list[AllOfincidentIncidentTypesItems]
        """
        return self._incident_types

    @incident_types.setter
    def incident_types(self, incident_types):
        """Sets the incident_types of this Incident.

        The Incident Types of the incident  # noqa: E501

        :param incident_types: The incident_types of this Incident.  # noqa: E501
        :type: list[AllOfincidentIncidentTypesItems]
        """

        self._incident_types = incident_types

    @property
    def services(self):
        """Gets the services of this Incident.  # noqa: E501

        The Services of the incident  # noqa: E501

        :return: The services of this Incident.  # noqa: E501
        :rtype: list[AllOfincidentServicesItems]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Incident.

        The Services of the incident  # noqa: E501

        :param services: The services of this Incident.  # noqa: E501
        :type: list[AllOfincidentServicesItems]
        """

        self._services = services

    @property
    def functionalities(self):
        """Gets the functionalities of this Incident.  # noqa: E501

        The Functionalities of the incident  # noqa: E501

        :return: The functionalities of this Incident.  # noqa: E501
        :rtype: list[AllOfincidentFunctionalitiesItems]
        """
        return self._functionalities

    @functionalities.setter
    def functionalities(self, functionalities):
        """Sets the functionalities of this Incident.

        The Functionalities of the incident  # noqa: E501

        :param functionalities: The functionalities of this Incident.  # noqa: E501
        :type: list[AllOfincidentFunctionalitiesItems]
        """

        self._functionalities = functionalities

    @property
    def groups(self):
        """Gets the groups of this Incident.  # noqa: E501

        The Teams of to the incident  # noqa: E501

        :return: The groups of this Incident.  # noqa: E501
        :rtype: list[AllOfincidentGroupsItems]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Incident.

        The Teams of to the incident  # noqa: E501

        :param groups: The groups of this Incident.  # noqa: E501
        :type: list[AllOfincidentGroupsItems]
        """

        self._groups = groups

    @property
    def labels(self):
        """Gets the labels of this Incident.  # noqa: E501

        Labels to attach to the incidents. eg: {\"platform\":\"osx\", \"version\": \"1.29\"}  # noqa: E501

        :return: The labels of this Incident.  # noqa: E501
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Incident.

        Labels to attach to the incidents. eg: {\"platform\":\"osx\", \"version\": \"1.29\"}  # noqa: E501

        :param labels: The labels of this Incident.  # noqa: E501
        :type: object
        """

        self._labels = labels

    @property
    def slack_channel_id(self):
        """Gets the slack_channel_id of this Incident.  # noqa: E501

        Slack channel id  # noqa: E501

        :return: The slack_channel_id of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._slack_channel_id

    @slack_channel_id.setter
    def slack_channel_id(self, slack_channel_id):
        """Sets the slack_channel_id of this Incident.

        Slack channel id  # noqa: E501

        :param slack_channel_id: The slack_channel_id of this Incident.  # noqa: E501
        :type: str
        """

        self._slack_channel_id = slack_channel_id

    @property
    def slack_channel_name(self):
        """Gets the slack_channel_name of this Incident.  # noqa: E501

        Slack channel name  # noqa: E501

        :return: The slack_channel_name of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._slack_channel_name

    @slack_channel_name.setter
    def slack_channel_name(self, slack_channel_name):
        """Sets the slack_channel_name of this Incident.

        Slack channel name  # noqa: E501

        :param slack_channel_name: The slack_channel_name of this Incident.  # noqa: E501
        :type: str
        """

        self._slack_channel_name = slack_channel_name

    @property
    def slack_channel_url(self):
        """Gets the slack_channel_url of this Incident.  # noqa: E501

        Slack channel url  # noqa: E501

        :return: The slack_channel_url of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._slack_channel_url

    @slack_channel_url.setter
    def slack_channel_url(self, slack_channel_url):
        """Sets the slack_channel_url of this Incident.

        Slack channel url  # noqa: E501

        :param slack_channel_url: The slack_channel_url of this Incident.  # noqa: E501
        :type: str
        """

        self._slack_channel_url = slack_channel_url

    @property
    def mitigation_message(self):
        """Gets the mitigation_message of this Incident.  # noqa: E501

        How was the incident mitigated?  # noqa: E501

        :return: The mitigation_message of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._mitigation_message

    @mitigation_message.setter
    def mitigation_message(self, mitigation_message):
        """Sets the mitigation_message of this Incident.

        How was the incident mitigated?  # noqa: E501

        :param mitigation_message: The mitigation_message of this Incident.  # noqa: E501
        :type: str
        """

        self._mitigation_message = mitigation_message

    @property
    def resolution_message(self):
        """Gets the resolution_message of this Incident.  # noqa: E501

        How was the incident resolved?  # noqa: E501

        :return: The resolution_message of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._resolution_message

    @resolution_message.setter
    def resolution_message(self, resolution_message):
        """Sets the resolution_message of this Incident.

        How was the incident resolved?  # noqa: E501

        :param resolution_message: The resolution_message of this Incident.  # noqa: E501
        :type: str
        """

        self._resolution_message = resolution_message

    @property
    def cancellation_message(self):
        """Gets the cancellation_message of this Incident.  # noqa: E501

        Why was the incident cancelled?  # noqa: E501

        :return: The cancellation_message of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._cancellation_message

    @cancellation_message.setter
    def cancellation_message(self, cancellation_message):
        """Sets the cancellation_message of this Incident.

        Why was the incident cancelled?  # noqa: E501

        :param cancellation_message: The cancellation_message of this Incident.  # noqa: E501
        :type: str
        """

        self._cancellation_message = cancellation_message

    @property
    def scheduled_for(self):
        """Gets the scheduled_for of this Incident.  # noqa: E501

        Date of when the maintenance begins  # noqa: E501

        :return: The scheduled_for of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_for

    @scheduled_for.setter
    def scheduled_for(self, scheduled_for):
        """Sets the scheduled_for of this Incident.

        Date of when the maintenance begins  # noqa: E501

        :param scheduled_for: The scheduled_for of this Incident.  # noqa: E501
        :type: str
        """

        self._scheduled_for = scheduled_for

    @property
    def scheduled_until(self):
        """Gets the scheduled_until of this Incident.  # noqa: E501

        Date of when the maintenance ends  # noqa: E501

        :return: The scheduled_until of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_until

    @scheduled_until.setter
    def scheduled_until(self, scheduled_until):
        """Sets the scheduled_until of this Incident.

        Date of when the maintenance ends  # noqa: E501

        :param scheduled_until: The scheduled_until of this Incident.  # noqa: E501
        :type: str
        """

        self._scheduled_until = scheduled_until

    @property
    def retrospective_progress_status(self):
        """Gets the retrospective_progress_status of this Incident.  # noqa: E501

        The status of the retrospective progress  # noqa: E501

        :return: The retrospective_progress_status of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._retrospective_progress_status

    @retrospective_progress_status.setter
    def retrospective_progress_status(self, retrospective_progress_status):
        """Sets the retrospective_progress_status of this Incident.

        The status of the retrospective progress  # noqa: E501

        :param retrospective_progress_status: The retrospective_progress_status of this Incident.  # noqa: E501
        :type: str
        """
        allowed_values = ["not_started", "active", "completed", "skipped"]  # noqa: E501
        if retrospective_progress_status not in allowed_values:
            raise ValueError(
                "Invalid value for `retrospective_progress_status` ({0}), must be one of {1}"  # noqa: E501
                .format(retrospective_progress_status, allowed_values)
            )

        self._retrospective_progress_status = retrospective_progress_status

    @property
    def in_triage_at(self):
        """Gets the in_triage_at of this Incident.  # noqa: E501

        Date of triage  # noqa: E501

        :return: The in_triage_at of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._in_triage_at

    @in_triage_at.setter
    def in_triage_at(self, in_triage_at):
        """Sets the in_triage_at of this Incident.

        Date of triage  # noqa: E501

        :param in_triage_at: The in_triage_at of this Incident.  # noqa: E501
        :type: str
        """

        self._in_triage_at = in_triage_at

    @property
    def started_at(self):
        """Gets the started_at of this Incident.  # noqa: E501

        Date of start  # noqa: E501

        :return: The started_at of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Incident.

        Date of start  # noqa: E501

        :param started_at: The started_at of this Incident.  # noqa: E501
        :type: str
        """

        self._started_at = started_at

    @property
    def detected_at(self):
        """Gets the detected_at of this Incident.  # noqa: E501

        Date of detection  # noqa: E501

        :return: The detected_at of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._detected_at

    @detected_at.setter
    def detected_at(self, detected_at):
        """Sets the detected_at of this Incident.

        Date of detection  # noqa: E501

        :param detected_at: The detected_at of this Incident.  # noqa: E501
        :type: str
        """

        self._detected_at = detected_at

    @property
    def acknowledged_at(self):
        """Gets the acknowledged_at of this Incident.  # noqa: E501

        Date of acknowledgment  # noqa: E501

        :return: The acknowledged_at of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._acknowledged_at

    @acknowledged_at.setter
    def acknowledged_at(self, acknowledged_at):
        """Sets the acknowledged_at of this Incident.

        Date of acknowledgment  # noqa: E501

        :param acknowledged_at: The acknowledged_at of this Incident.  # noqa: E501
        :type: str
        """

        self._acknowledged_at = acknowledged_at

    @property
    def mitigated_at(self):
        """Gets the mitigated_at of this Incident.  # noqa: E501

        Date of mitigation  # noqa: E501

        :return: The mitigated_at of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._mitigated_at

    @mitigated_at.setter
    def mitigated_at(self, mitigated_at):
        """Sets the mitigated_at of this Incident.

        Date of mitigation  # noqa: E501

        :param mitigated_at: The mitigated_at of this Incident.  # noqa: E501
        :type: str
        """

        self._mitigated_at = mitigated_at

    @property
    def resolved_at(self):
        """Gets the resolved_at of this Incident.  # noqa: E501

        Date of resolution  # noqa: E501

        :return: The resolved_at of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._resolved_at

    @resolved_at.setter
    def resolved_at(self, resolved_at):
        """Sets the resolved_at of this Incident.

        Date of resolution  # noqa: E501

        :param resolved_at: The resolved_at of this Incident.  # noqa: E501
        :type: str
        """

        self._resolved_at = resolved_at

    @property
    def cancelled_at(self):
        """Gets the cancelled_at of this Incident.  # noqa: E501

        Date of cancellation  # noqa: E501

        :return: The cancelled_at of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._cancelled_at

    @cancelled_at.setter
    def cancelled_at(self, cancelled_at):
        """Sets the cancelled_at of this Incident.

        Date of cancellation  # noqa: E501

        :param cancelled_at: The cancelled_at of this Incident.  # noqa: E501
        :type: str
        """

        self._cancelled_at = cancelled_at

    @property
    def created_at(self):
        """Gets the created_at of this Incident.  # noqa: E501

        Date of creation  # noqa: E501

        :return: The created_at of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Incident.

        Date of creation  # noqa: E501

        :param created_at: The created_at of this Incident.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Incident.  # noqa: E501

        Date of last update  # noqa: E501

        :return: The updated_at of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Incident.

        Date of last update  # noqa: E501

        :param updated_at: The updated_at of this Incident.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Incident, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Incident):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
