# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewWorkflowFormFieldConditionDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workflow_id': 'str',
        'form_field_id': 'str',
        'incident_condition': 'str',
        'values': 'list[str]',
        'selected_catalog_entity_ids': 'list[str]',
        'selected_functionality_ids': 'list[str]',
        'selected_group_ids': 'list[str]',
        'selected_option_ids': 'list[str]',
        'selected_service_ids': 'list[str]',
        'selected_user_ids': 'list[int]'
    }

    attribute_map = {
        'workflow_id': 'workflow_id',
        'form_field_id': 'form_field_id',
        'incident_condition': 'incident_condition',
        'values': 'values',
        'selected_catalog_entity_ids': 'selected_catalog_entity_ids',
        'selected_functionality_ids': 'selected_functionality_ids',
        'selected_group_ids': 'selected_group_ids',
        'selected_option_ids': 'selected_option_ids',
        'selected_service_ids': 'selected_service_ids',
        'selected_user_ids': 'selected_user_ids'
    }

    def __init__(self, workflow_id=None, form_field_id=None, incident_condition='ANY', values=None, selected_catalog_entity_ids=None, selected_functionality_ids=None, selected_group_ids=None, selected_option_ids=None, selected_service_ids=None, selected_user_ids=None):  # noqa: E501
        """NewWorkflowFormFieldConditionDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._workflow_id = None
        self._form_field_id = None
        self._incident_condition = None
        self._values = None
        self._selected_catalog_entity_ids = None
        self._selected_functionality_ids = None
        self._selected_group_ids = None
        self._selected_option_ids = None
        self._selected_service_ids = None
        self._selected_user_ids = None
        self.discriminator = None
        if workflow_id is not None:
            self.workflow_id = workflow_id
        self.form_field_id = form_field_id
        self.incident_condition = incident_condition
        if values is not None:
            self.values = values
        if selected_catalog_entity_ids is not None:
            self.selected_catalog_entity_ids = selected_catalog_entity_ids
        if selected_functionality_ids is not None:
            self.selected_functionality_ids = selected_functionality_ids
        if selected_group_ids is not None:
            self.selected_group_ids = selected_group_ids
        if selected_option_ids is not None:
            self.selected_option_ids = selected_option_ids
        if selected_service_ids is not None:
            self.selected_service_ids = selected_service_ids
        if selected_user_ids is not None:
            self.selected_user_ids = selected_user_ids

    @property
    def workflow_id(self):
        """Gets the workflow_id of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501

        The workflow for this condition  # noqa: E501

        :return: The workflow_id of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this NewWorkflowFormFieldConditionDataAttributes.

        The workflow for this condition  # noqa: E501

        :param workflow_id: The workflow_id of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :type: str
        """

        self._workflow_id = workflow_id

    @property
    def form_field_id(self):
        """Gets the form_field_id of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501

        The custom field for this condition  # noqa: E501

        :return: The form_field_id of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._form_field_id

    @form_field_id.setter
    def form_field_id(self, form_field_id):
        """Sets the form_field_id of this NewWorkflowFormFieldConditionDataAttributes.

        The custom field for this condition  # noqa: E501

        :param form_field_id: The form_field_id of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :type: str
        """
        if form_field_id is None:
            raise ValueError("Invalid value for `form_field_id`, must not be `None`")  # noqa: E501

        self._form_field_id = form_field_id

    @property
    def incident_condition(self):
        """Gets the incident_condition of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501

        The trigger condition  # noqa: E501

        :return: The incident_condition of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._incident_condition

    @incident_condition.setter
    def incident_condition(self, incident_condition):
        """Sets the incident_condition of this NewWorkflowFormFieldConditionDataAttributes.

        The trigger condition  # noqa: E501

        :param incident_condition: The incident_condition of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :type: str
        """
        if incident_condition is None:
            raise ValueError("Invalid value for `incident_condition`, must not be `None`")  # noqa: E501
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if incident_condition not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_condition` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_condition, allowed_values)
            )

        self._incident_condition = incident_condition

    @property
    def values(self):
        """Gets the values of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501


        :return: The values of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this NewWorkflowFormFieldConditionDataAttributes.


        :param values: The values of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    @property
    def selected_catalog_entity_ids(self):
        """Gets the selected_catalog_entity_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501


        :return: The selected_catalog_entity_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_catalog_entity_ids

    @selected_catalog_entity_ids.setter
    def selected_catalog_entity_ids(self, selected_catalog_entity_ids):
        """Sets the selected_catalog_entity_ids of this NewWorkflowFormFieldConditionDataAttributes.


        :param selected_catalog_entity_ids: The selected_catalog_entity_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._selected_catalog_entity_ids = selected_catalog_entity_ids

    @property
    def selected_functionality_ids(self):
        """Gets the selected_functionality_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501


        :return: The selected_functionality_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_functionality_ids

    @selected_functionality_ids.setter
    def selected_functionality_ids(self, selected_functionality_ids):
        """Sets the selected_functionality_ids of this NewWorkflowFormFieldConditionDataAttributes.


        :param selected_functionality_ids: The selected_functionality_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._selected_functionality_ids = selected_functionality_ids

    @property
    def selected_group_ids(self):
        """Gets the selected_group_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501


        :return: The selected_group_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_group_ids

    @selected_group_ids.setter
    def selected_group_ids(self, selected_group_ids):
        """Sets the selected_group_ids of this NewWorkflowFormFieldConditionDataAttributes.


        :param selected_group_ids: The selected_group_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._selected_group_ids = selected_group_ids

    @property
    def selected_option_ids(self):
        """Gets the selected_option_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501


        :return: The selected_option_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_option_ids

    @selected_option_ids.setter
    def selected_option_ids(self, selected_option_ids):
        """Sets the selected_option_ids of this NewWorkflowFormFieldConditionDataAttributes.


        :param selected_option_ids: The selected_option_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._selected_option_ids = selected_option_ids

    @property
    def selected_service_ids(self):
        """Gets the selected_service_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501


        :return: The selected_service_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_service_ids

    @selected_service_ids.setter
    def selected_service_ids(self, selected_service_ids):
        """Sets the selected_service_ids of this NewWorkflowFormFieldConditionDataAttributes.


        :param selected_service_ids: The selected_service_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._selected_service_ids = selected_service_ids

    @property
    def selected_user_ids(self):
        """Gets the selected_user_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501


        :return: The selected_user_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :rtype: list[int]
        """
        return self._selected_user_ids

    @selected_user_ids.setter
    def selected_user_ids(self, selected_user_ids):
        """Sets the selected_user_ids of this NewWorkflowFormFieldConditionDataAttributes.


        :param selected_user_ids: The selected_user_ids of this NewWorkflowFormFieldConditionDataAttributes.  # noqa: E501
        :type: list[int]
        """

        self._selected_user_ids = selected_user_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewWorkflowFormFieldConditionDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewWorkflowFormFieldConditionDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
