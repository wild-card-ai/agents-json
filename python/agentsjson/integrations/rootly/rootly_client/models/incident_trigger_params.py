# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IncidentTriggerParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trigger_type': 'str',
        'triggers': 'list[str]',
        'incident_visibilities': 'list[bool]',
        'incident_kinds': 'list[str]',
        'incident_statuses': 'list[str]',
        'incident_inactivity_duration': 'AnyOfincidentTriggerParamsIncidentInactivityDuration',
        'incident_condition': 'str',
        'incident_condition_visibility': 'str',
        'incident_condition_kind': 'str',
        'incident_condition_status': 'str',
        'incident_condition_sub_status': 'str',
        'incident_condition_environment': 'str',
        'incident_condition_severity': 'str',
        'incident_condition_incident_type': 'str',
        'incident_condition_incident_roles': 'str',
        'incident_condition_service': 'str',
        'incident_condition_functionality': 'str',
        'incident_condition_group': 'str',
        'incident_condition_cause': 'str',
        'incident_post_mortem_condition_cause': 'str',
        'incident_condition_summary': 'AnyOfincidentTriggerParamsIncidentConditionSummary',
        'incident_condition_started_at': 'AnyOfincidentTriggerParamsIncidentConditionStartedAt',
        'incident_condition_detected_at': 'AnyOfincidentTriggerParamsIncidentConditionDetectedAt',
        'incident_condition_acknowledged_at': 'AnyOfincidentTriggerParamsIncidentConditionAcknowledgedAt',
        'incident_condition_mitigated_at': 'AnyOfincidentTriggerParamsIncidentConditionMitigatedAt',
        'incident_condition_resolved_at': 'AnyOfincidentTriggerParamsIncidentConditionResolvedAt',
        'incident_conditional_inactivity': 'AnyOfincidentTriggerParamsIncidentConditionalInactivity'
    }

    attribute_map = {
        'trigger_type': 'trigger_type',
        'triggers': 'triggers',
        'incident_visibilities': 'incident_visibilities',
        'incident_kinds': 'incident_kinds',
        'incident_statuses': 'incident_statuses',
        'incident_inactivity_duration': 'incident_inactivity_duration',
        'incident_condition': 'incident_condition',
        'incident_condition_visibility': 'incident_condition_visibility',
        'incident_condition_kind': 'incident_condition_kind',
        'incident_condition_status': 'incident_condition_status',
        'incident_condition_sub_status': 'incident_condition_sub_status',
        'incident_condition_environment': 'incident_condition_environment',
        'incident_condition_severity': 'incident_condition_severity',
        'incident_condition_incident_type': 'incident_condition_incident_type',
        'incident_condition_incident_roles': 'incident_condition_incident_roles',
        'incident_condition_service': 'incident_condition_service',
        'incident_condition_functionality': 'incident_condition_functionality',
        'incident_condition_group': 'incident_condition_group',
        'incident_condition_cause': 'incident_condition_cause',
        'incident_post_mortem_condition_cause': 'incident_post_mortem_condition_cause',
        'incident_condition_summary': 'incident_condition_summary',
        'incident_condition_started_at': 'incident_condition_started_at',
        'incident_condition_detected_at': 'incident_condition_detected_at',
        'incident_condition_acknowledged_at': 'incident_condition_acknowledged_at',
        'incident_condition_mitigated_at': 'incident_condition_mitigated_at',
        'incident_condition_resolved_at': 'incident_condition_resolved_at',
        'incident_conditional_inactivity': 'incident_conditional_inactivity'
    }

    def __init__(self, trigger_type=None, triggers=None, incident_visibilities=None, incident_kinds=None, incident_statuses=None, incident_inactivity_duration=None, incident_condition='ALL', incident_condition_visibility='ANY', incident_condition_kind='IS', incident_condition_status='ANY', incident_condition_sub_status='ANY', incident_condition_environment='ANY', incident_condition_severity='ANY', incident_condition_incident_type='ANY', incident_condition_incident_roles='ANY', incident_condition_service='ANY', incident_condition_functionality='ANY', incident_condition_group='ANY', incident_condition_cause='ANY', incident_post_mortem_condition_cause='ANY', incident_condition_summary=None, incident_condition_started_at=None, incident_condition_detected_at=None, incident_condition_acknowledged_at=None, incident_condition_mitigated_at=None, incident_condition_resolved_at=None, incident_conditional_inactivity=None):  # noqa: E501
        """IncidentTriggerParams - a model defined in Swagger"""  # noqa: E501
        self._trigger_type = None
        self._triggers = None
        self._incident_visibilities = None
        self._incident_kinds = None
        self._incident_statuses = None
        self._incident_inactivity_duration = None
        self._incident_condition = None
        self._incident_condition_visibility = None
        self._incident_condition_kind = None
        self._incident_condition_status = None
        self._incident_condition_sub_status = None
        self._incident_condition_environment = None
        self._incident_condition_severity = None
        self._incident_condition_incident_type = None
        self._incident_condition_incident_roles = None
        self._incident_condition_service = None
        self._incident_condition_functionality = None
        self._incident_condition_group = None
        self._incident_condition_cause = None
        self._incident_post_mortem_condition_cause = None
        self._incident_condition_summary = None
        self._incident_condition_started_at = None
        self._incident_condition_detected_at = None
        self._incident_condition_acknowledged_at = None
        self._incident_condition_mitigated_at = None
        self._incident_condition_resolved_at = None
        self._incident_conditional_inactivity = None
        self.discriminator = None
        self.trigger_type = trigger_type
        if triggers is not None:
            self.triggers = triggers
        if incident_visibilities is not None:
            self.incident_visibilities = incident_visibilities
        if incident_kinds is not None:
            self.incident_kinds = incident_kinds
        if incident_statuses is not None:
            self.incident_statuses = incident_statuses
        if incident_inactivity_duration is not None:
            self.incident_inactivity_duration = incident_inactivity_duration
        if incident_condition is not None:
            self.incident_condition = incident_condition
        if incident_condition_visibility is not None:
            self.incident_condition_visibility = incident_condition_visibility
        if incident_condition_kind is not None:
            self.incident_condition_kind = incident_condition_kind
        if incident_condition_status is not None:
            self.incident_condition_status = incident_condition_status
        if incident_condition_sub_status is not None:
            self.incident_condition_sub_status = incident_condition_sub_status
        if incident_condition_environment is not None:
            self.incident_condition_environment = incident_condition_environment
        if incident_condition_severity is not None:
            self.incident_condition_severity = incident_condition_severity
        if incident_condition_incident_type is not None:
            self.incident_condition_incident_type = incident_condition_incident_type
        if incident_condition_incident_roles is not None:
            self.incident_condition_incident_roles = incident_condition_incident_roles
        if incident_condition_service is not None:
            self.incident_condition_service = incident_condition_service
        if incident_condition_functionality is not None:
            self.incident_condition_functionality = incident_condition_functionality
        if incident_condition_group is not None:
            self.incident_condition_group = incident_condition_group
        if incident_condition_cause is not None:
            self.incident_condition_cause = incident_condition_cause
        if incident_post_mortem_condition_cause is not None:
            self.incident_post_mortem_condition_cause = incident_post_mortem_condition_cause
        if incident_condition_summary is not None:
            self.incident_condition_summary = incident_condition_summary
        if incident_condition_started_at is not None:
            self.incident_condition_started_at = incident_condition_started_at
        if incident_condition_detected_at is not None:
            self.incident_condition_detected_at = incident_condition_detected_at
        if incident_condition_acknowledged_at is not None:
            self.incident_condition_acknowledged_at = incident_condition_acknowledged_at
        if incident_condition_mitigated_at is not None:
            self.incident_condition_mitigated_at = incident_condition_mitigated_at
        if incident_condition_resolved_at is not None:
            self.incident_condition_resolved_at = incident_condition_resolved_at
        if incident_conditional_inactivity is not None:
            self.incident_conditional_inactivity = incident_conditional_inactivity

    @property
    def trigger_type(self):
        """Gets the trigger_type of this IncidentTriggerParams.  # noqa: E501


        :return: The trigger_type of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this IncidentTriggerParams.


        :param trigger_type: The trigger_type of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        if trigger_type is None:
            raise ValueError("Invalid value for `trigger_type`, must not be `None`")  # noqa: E501
        allowed_values = ["incident"]  # noqa: E501
        if trigger_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_type, allowed_values)
            )

        self._trigger_type = trigger_type

    @property
    def triggers(self):
        """Gets the triggers of this IncidentTriggerParams.  # noqa: E501


        :return: The triggers of this IncidentTriggerParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this IncidentTriggerParams.


        :param triggers: The triggers of this IncidentTriggerParams.  # noqa: E501
        :type: list[str]
        """

        self._triggers = triggers

    @property
    def incident_visibilities(self):
        """Gets the incident_visibilities of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_visibilities of this IncidentTriggerParams.  # noqa: E501
        :rtype: list[bool]
        """
        return self._incident_visibilities

    @incident_visibilities.setter
    def incident_visibilities(self, incident_visibilities):
        """Sets the incident_visibilities of this IncidentTriggerParams.


        :param incident_visibilities: The incident_visibilities of this IncidentTriggerParams.  # noqa: E501
        :type: list[bool]
        """

        self._incident_visibilities = incident_visibilities

    @property
    def incident_kinds(self):
        """Gets the incident_kinds of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_kinds of this IncidentTriggerParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._incident_kinds

    @incident_kinds.setter
    def incident_kinds(self, incident_kinds):
        """Sets the incident_kinds of this IncidentTriggerParams.


        :param incident_kinds: The incident_kinds of this IncidentTriggerParams.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["test", "test_sub", "example", "example_sub", "normal", "normal_sub", "backfilled", "scheduled"]  # noqa: E501
        if not set(incident_kinds).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `incident_kinds` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(incident_kinds) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._incident_kinds = incident_kinds

    @property
    def incident_statuses(self):
        """Gets the incident_statuses of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_statuses of this IncidentTriggerParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._incident_statuses

    @incident_statuses.setter
    def incident_statuses(self, incident_statuses):
        """Sets the incident_statuses of this IncidentTriggerParams.


        :param incident_statuses: The incident_statuses of this IncidentTriggerParams.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["in_triage", "started", "detected", "acknowledged", "mitigated", "resolved", "closed", "cancelled", "scheduled", "in_progress", "completed"]  # noqa: E501
        if not set(incident_statuses).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `incident_statuses` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(incident_statuses) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._incident_statuses = incident_statuses

    @property
    def incident_inactivity_duration(self):
        """Gets the incident_inactivity_duration of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_inactivity_duration of this IncidentTriggerParams.  # noqa: E501
        :rtype: AnyOfincidentTriggerParamsIncidentInactivityDuration
        """
        return self._incident_inactivity_duration

    @incident_inactivity_duration.setter
    def incident_inactivity_duration(self, incident_inactivity_duration):
        """Sets the incident_inactivity_duration of this IncidentTriggerParams.


        :param incident_inactivity_duration: The incident_inactivity_duration of this IncidentTriggerParams.  # noqa: E501
        :type: AnyOfincidentTriggerParamsIncidentInactivityDuration
        """

        self._incident_inactivity_duration = incident_inactivity_duration

    @property
    def incident_condition(self):
        """Gets the incident_condition of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_condition

    @incident_condition.setter
    def incident_condition(self, incident_condition):
        """Sets the incident_condition of this IncidentTriggerParams.


        :param incident_condition: The incident_condition of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "ANY", "NONE"]  # noqa: E501
        if incident_condition not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_condition` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_condition, allowed_values)
            )

        self._incident_condition = incident_condition

    @property
    def incident_condition_visibility(self):
        """Gets the incident_condition_visibility of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_visibility of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_condition_visibility

    @incident_condition_visibility.setter
    def incident_condition_visibility(self, incident_condition_visibility):
        """Sets the incident_condition_visibility of this IncidentTriggerParams.


        :param incident_condition_visibility: The incident_condition_visibility of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if incident_condition_visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_condition_visibility` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_condition_visibility, allowed_values)
            )

        self._incident_condition_visibility = incident_condition_visibility

    @property
    def incident_condition_kind(self):
        """Gets the incident_condition_kind of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_kind of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_condition_kind

    @incident_condition_kind.setter
    def incident_condition_kind(self, incident_condition_kind):
        """Sets the incident_condition_kind of this IncidentTriggerParams.


        :param incident_condition_kind: The incident_condition_kind of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if incident_condition_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_condition_kind` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_condition_kind, allowed_values)
            )

        self._incident_condition_kind = incident_condition_kind

    @property
    def incident_condition_status(self):
        """Gets the incident_condition_status of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_status of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_condition_status

    @incident_condition_status.setter
    def incident_condition_status(self, incident_condition_status):
        """Sets the incident_condition_status of this IncidentTriggerParams.


        :param incident_condition_status: The incident_condition_status of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if incident_condition_status not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_condition_status` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_condition_status, allowed_values)
            )

        self._incident_condition_status = incident_condition_status

    @property
    def incident_condition_sub_status(self):
        """Gets the incident_condition_sub_status of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_sub_status of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_condition_sub_status

    @incident_condition_sub_status.setter
    def incident_condition_sub_status(self, incident_condition_sub_status):
        """Sets the incident_condition_sub_status of this IncidentTriggerParams.


        :param incident_condition_sub_status: The incident_condition_sub_status of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if incident_condition_sub_status not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_condition_sub_status` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_condition_sub_status, allowed_values)
            )

        self._incident_condition_sub_status = incident_condition_sub_status

    @property
    def incident_condition_environment(self):
        """Gets the incident_condition_environment of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_environment of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_condition_environment

    @incident_condition_environment.setter
    def incident_condition_environment(self, incident_condition_environment):
        """Sets the incident_condition_environment of this IncidentTriggerParams.


        :param incident_condition_environment: The incident_condition_environment of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if incident_condition_environment not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_condition_environment` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_condition_environment, allowed_values)
            )

        self._incident_condition_environment = incident_condition_environment

    @property
    def incident_condition_severity(self):
        """Gets the incident_condition_severity of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_severity of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_condition_severity

    @incident_condition_severity.setter
    def incident_condition_severity(self, incident_condition_severity):
        """Sets the incident_condition_severity of this IncidentTriggerParams.


        :param incident_condition_severity: The incident_condition_severity of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if incident_condition_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_condition_severity` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_condition_severity, allowed_values)
            )

        self._incident_condition_severity = incident_condition_severity

    @property
    def incident_condition_incident_type(self):
        """Gets the incident_condition_incident_type of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_incident_type of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_condition_incident_type

    @incident_condition_incident_type.setter
    def incident_condition_incident_type(self, incident_condition_incident_type):
        """Sets the incident_condition_incident_type of this IncidentTriggerParams.


        :param incident_condition_incident_type: The incident_condition_incident_type of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if incident_condition_incident_type not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_condition_incident_type` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_condition_incident_type, allowed_values)
            )

        self._incident_condition_incident_type = incident_condition_incident_type

    @property
    def incident_condition_incident_roles(self):
        """Gets the incident_condition_incident_roles of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_incident_roles of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_condition_incident_roles

    @incident_condition_incident_roles.setter
    def incident_condition_incident_roles(self, incident_condition_incident_roles):
        """Sets the incident_condition_incident_roles of this IncidentTriggerParams.


        :param incident_condition_incident_roles: The incident_condition_incident_roles of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if incident_condition_incident_roles not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_condition_incident_roles` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_condition_incident_roles, allowed_values)
            )

        self._incident_condition_incident_roles = incident_condition_incident_roles

    @property
    def incident_condition_service(self):
        """Gets the incident_condition_service of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_service of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_condition_service

    @incident_condition_service.setter
    def incident_condition_service(self, incident_condition_service):
        """Sets the incident_condition_service of this IncidentTriggerParams.


        :param incident_condition_service: The incident_condition_service of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if incident_condition_service not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_condition_service` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_condition_service, allowed_values)
            )

        self._incident_condition_service = incident_condition_service

    @property
    def incident_condition_functionality(self):
        """Gets the incident_condition_functionality of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_functionality of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_condition_functionality

    @incident_condition_functionality.setter
    def incident_condition_functionality(self, incident_condition_functionality):
        """Sets the incident_condition_functionality of this IncidentTriggerParams.


        :param incident_condition_functionality: The incident_condition_functionality of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if incident_condition_functionality not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_condition_functionality` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_condition_functionality, allowed_values)
            )

        self._incident_condition_functionality = incident_condition_functionality

    @property
    def incident_condition_group(self):
        """Gets the incident_condition_group of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_group of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_condition_group

    @incident_condition_group.setter
    def incident_condition_group(self, incident_condition_group):
        """Sets the incident_condition_group of this IncidentTriggerParams.


        :param incident_condition_group: The incident_condition_group of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if incident_condition_group not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_condition_group` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_condition_group, allowed_values)
            )

        self._incident_condition_group = incident_condition_group

    @property
    def incident_condition_cause(self):
        """Gets the incident_condition_cause of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_cause of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_condition_cause

    @incident_condition_cause.setter
    def incident_condition_cause(self, incident_condition_cause):
        """Sets the incident_condition_cause of this IncidentTriggerParams.


        :param incident_condition_cause: The incident_condition_cause of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if incident_condition_cause not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_condition_cause` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_condition_cause, allowed_values)
            )

        self._incident_condition_cause = incident_condition_cause

    @property
    def incident_post_mortem_condition_cause(self):
        """Gets the incident_post_mortem_condition_cause of this IncidentTriggerParams.  # noqa: E501

        [DEPRECATED] Use incident_condition_cause instead  # noqa: E501

        :return: The incident_post_mortem_condition_cause of this IncidentTriggerParams.  # noqa: E501
        :rtype: str
        """
        return self._incident_post_mortem_condition_cause

    @incident_post_mortem_condition_cause.setter
    def incident_post_mortem_condition_cause(self, incident_post_mortem_condition_cause):
        """Sets the incident_post_mortem_condition_cause of this IncidentTriggerParams.

        [DEPRECATED] Use incident_condition_cause instead  # noqa: E501

        :param incident_post_mortem_condition_cause: The incident_post_mortem_condition_cause of this IncidentTriggerParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"]  # noqa: E501
        if incident_post_mortem_condition_cause not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_post_mortem_condition_cause` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_post_mortem_condition_cause, allowed_values)
            )

        self._incident_post_mortem_condition_cause = incident_post_mortem_condition_cause

    @property
    def incident_condition_summary(self):
        """Gets the incident_condition_summary of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_summary of this IncidentTriggerParams.  # noqa: E501
        :rtype: AnyOfincidentTriggerParamsIncidentConditionSummary
        """
        return self._incident_condition_summary

    @incident_condition_summary.setter
    def incident_condition_summary(self, incident_condition_summary):
        """Sets the incident_condition_summary of this IncidentTriggerParams.


        :param incident_condition_summary: The incident_condition_summary of this IncidentTriggerParams.  # noqa: E501
        :type: AnyOfincidentTriggerParamsIncidentConditionSummary
        """

        self._incident_condition_summary = incident_condition_summary

    @property
    def incident_condition_started_at(self):
        """Gets the incident_condition_started_at of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_started_at of this IncidentTriggerParams.  # noqa: E501
        :rtype: AnyOfincidentTriggerParamsIncidentConditionStartedAt
        """
        return self._incident_condition_started_at

    @incident_condition_started_at.setter
    def incident_condition_started_at(self, incident_condition_started_at):
        """Sets the incident_condition_started_at of this IncidentTriggerParams.


        :param incident_condition_started_at: The incident_condition_started_at of this IncidentTriggerParams.  # noqa: E501
        :type: AnyOfincidentTriggerParamsIncidentConditionStartedAt
        """

        self._incident_condition_started_at = incident_condition_started_at

    @property
    def incident_condition_detected_at(self):
        """Gets the incident_condition_detected_at of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_detected_at of this IncidentTriggerParams.  # noqa: E501
        :rtype: AnyOfincidentTriggerParamsIncidentConditionDetectedAt
        """
        return self._incident_condition_detected_at

    @incident_condition_detected_at.setter
    def incident_condition_detected_at(self, incident_condition_detected_at):
        """Sets the incident_condition_detected_at of this IncidentTriggerParams.


        :param incident_condition_detected_at: The incident_condition_detected_at of this IncidentTriggerParams.  # noqa: E501
        :type: AnyOfincidentTriggerParamsIncidentConditionDetectedAt
        """

        self._incident_condition_detected_at = incident_condition_detected_at

    @property
    def incident_condition_acknowledged_at(self):
        """Gets the incident_condition_acknowledged_at of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_acknowledged_at of this IncidentTriggerParams.  # noqa: E501
        :rtype: AnyOfincidentTriggerParamsIncidentConditionAcknowledgedAt
        """
        return self._incident_condition_acknowledged_at

    @incident_condition_acknowledged_at.setter
    def incident_condition_acknowledged_at(self, incident_condition_acknowledged_at):
        """Sets the incident_condition_acknowledged_at of this IncidentTriggerParams.


        :param incident_condition_acknowledged_at: The incident_condition_acknowledged_at of this IncidentTriggerParams.  # noqa: E501
        :type: AnyOfincidentTriggerParamsIncidentConditionAcknowledgedAt
        """

        self._incident_condition_acknowledged_at = incident_condition_acknowledged_at

    @property
    def incident_condition_mitigated_at(self):
        """Gets the incident_condition_mitigated_at of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_mitigated_at of this IncidentTriggerParams.  # noqa: E501
        :rtype: AnyOfincidentTriggerParamsIncidentConditionMitigatedAt
        """
        return self._incident_condition_mitigated_at

    @incident_condition_mitigated_at.setter
    def incident_condition_mitigated_at(self, incident_condition_mitigated_at):
        """Sets the incident_condition_mitigated_at of this IncidentTriggerParams.


        :param incident_condition_mitigated_at: The incident_condition_mitigated_at of this IncidentTriggerParams.  # noqa: E501
        :type: AnyOfincidentTriggerParamsIncidentConditionMitigatedAt
        """

        self._incident_condition_mitigated_at = incident_condition_mitigated_at

    @property
    def incident_condition_resolved_at(self):
        """Gets the incident_condition_resolved_at of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_condition_resolved_at of this IncidentTriggerParams.  # noqa: E501
        :rtype: AnyOfincidentTriggerParamsIncidentConditionResolvedAt
        """
        return self._incident_condition_resolved_at

    @incident_condition_resolved_at.setter
    def incident_condition_resolved_at(self, incident_condition_resolved_at):
        """Sets the incident_condition_resolved_at of this IncidentTriggerParams.


        :param incident_condition_resolved_at: The incident_condition_resolved_at of this IncidentTriggerParams.  # noqa: E501
        :type: AnyOfincidentTriggerParamsIncidentConditionResolvedAt
        """

        self._incident_condition_resolved_at = incident_condition_resolved_at

    @property
    def incident_conditional_inactivity(self):
        """Gets the incident_conditional_inactivity of this IncidentTriggerParams.  # noqa: E501


        :return: The incident_conditional_inactivity of this IncidentTriggerParams.  # noqa: E501
        :rtype: AnyOfincidentTriggerParamsIncidentConditionalInactivity
        """
        return self._incident_conditional_inactivity

    @incident_conditional_inactivity.setter
    def incident_conditional_inactivity(self, incident_conditional_inactivity):
        """Sets the incident_conditional_inactivity of this IncidentTriggerParams.


        :param incident_conditional_inactivity: The incident_conditional_inactivity of this IncidentTriggerParams.  # noqa: E501
        :type: AnyOfincidentTriggerParamsIncidentConditionalInactivity
        """

        self._incident_conditional_inactivity = incident_conditional_inactivity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncidentTriggerParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncidentTriggerParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
