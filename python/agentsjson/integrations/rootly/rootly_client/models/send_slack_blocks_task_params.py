# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SendSlackBlocksTaskParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_type': 'str',
        'message': 'str',
        'blocks': 'str',
        'attachments': 'str',
        'channels': 'list[AddActionItemTaskParamsPostToSlackChannels]',
        'slack_users': 'list[AddActionItemTaskParamsPostToSlackChannels]',
        'slack_user_groups': 'list[AddActionItemTaskParamsPostToSlackChannels]',
        'broadcast_thread_reply_to_channel': 'bool',
        'send_as_ephemeral': 'bool',
        'pin_to_channel': 'bool',
        'update_parent_message': 'bool',
        'parent_message_thread_task': 'GetPulsesTaskParamsParentMessageThreadTask',
        'send_only_as_threaded_message': 'bool'
    }

    attribute_map = {
        'task_type': 'task_type',
        'message': 'message',
        'blocks': 'blocks',
        'attachments': 'attachments',
        'channels': 'channels',
        'slack_users': 'slack_users',
        'slack_user_groups': 'slack_user_groups',
        'broadcast_thread_reply_to_channel': 'broadcast_thread_reply_to_channel',
        'send_as_ephemeral': 'send_as_ephemeral',
        'pin_to_channel': 'pin_to_channel',
        'update_parent_message': 'update_parent_message',
        'parent_message_thread_task': 'parent_message_thread_task',
        'send_only_as_threaded_message': 'send_only_as_threaded_message'
    }

    def __init__(self, task_type=None, message=None, blocks=None, attachments=None, channels=None, slack_users=None, slack_user_groups=None, broadcast_thread_reply_to_channel=None, send_as_ephemeral=None, pin_to_channel=None, update_parent_message=None, parent_message_thread_task=None, send_only_as_threaded_message=None):  # noqa: E501
        """SendSlackBlocksTaskParams - a model defined in Swagger"""  # noqa: E501
        self._task_type = None
        self._message = None
        self._blocks = None
        self._attachments = None
        self._channels = None
        self._slack_users = None
        self._slack_user_groups = None
        self._broadcast_thread_reply_to_channel = None
        self._send_as_ephemeral = None
        self._pin_to_channel = None
        self._update_parent_message = None
        self._parent_message_thread_task = None
        self._send_only_as_threaded_message = None
        self.discriminator = None
        if task_type is not None:
            self.task_type = task_type
        if message is not None:
            self.message = message
        self.blocks = blocks
        if attachments is not None:
            self.attachments = attachments
        if channels is not None:
            self.channels = channels
        if slack_users is not None:
            self.slack_users = slack_users
        if slack_user_groups is not None:
            self.slack_user_groups = slack_user_groups
        if broadcast_thread_reply_to_channel is not None:
            self.broadcast_thread_reply_to_channel = broadcast_thread_reply_to_channel
        if send_as_ephemeral is not None:
            self.send_as_ephemeral = send_as_ephemeral
        if pin_to_channel is not None:
            self.pin_to_channel = pin_to_channel
        if update_parent_message is not None:
            self.update_parent_message = update_parent_message
        if parent_message_thread_task is not None:
            self.parent_message_thread_task = parent_message_thread_task
        if send_only_as_threaded_message is not None:
            self.send_only_as_threaded_message = send_only_as_threaded_message

    @property
    def task_type(self):
        """Gets the task_type of this SendSlackBlocksTaskParams.  # noqa: E501


        :return: The task_type of this SendSlackBlocksTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this SendSlackBlocksTaskParams.


        :param task_type: The task_type of this SendSlackBlocksTaskParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["send_slack_blocks"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def message(self):
        """Gets the message of this SendSlackBlocksTaskParams.  # noqa: E501


        :return: The message of this SendSlackBlocksTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SendSlackBlocksTaskParams.


        :param message: The message of this SendSlackBlocksTaskParams.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def blocks(self):
        """Gets the blocks of this SendSlackBlocksTaskParams.  # noqa: E501

        Support liquid markup. Needs to be a valid JSON string after liquid is parsed  # noqa: E501

        :return: The blocks of this SendSlackBlocksTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this SendSlackBlocksTaskParams.

        Support liquid markup. Needs to be a valid JSON string after liquid is parsed  # noqa: E501

        :param blocks: The blocks of this SendSlackBlocksTaskParams.  # noqa: E501
        :type: str
        """
        if blocks is None:
            raise ValueError("Invalid value for `blocks`, must not be `None`")  # noqa: E501

        self._blocks = blocks

    @property
    def attachments(self):
        """Gets the attachments of this SendSlackBlocksTaskParams.  # noqa: E501

        Support liquid markup. Needs to be a valid JSON string after liquid is parsed  # noqa: E501

        :return: The attachments of this SendSlackBlocksTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this SendSlackBlocksTaskParams.

        Support liquid markup. Needs to be a valid JSON string after liquid is parsed  # noqa: E501

        :param attachments: The attachments of this SendSlackBlocksTaskParams.  # noqa: E501
        :type: str
        """

        self._attachments = attachments

    @property
    def channels(self):
        """Gets the channels of this SendSlackBlocksTaskParams.  # noqa: E501


        :return: The channels of this SendSlackBlocksTaskParams.  # noqa: E501
        :rtype: list[AddActionItemTaskParamsPostToSlackChannels]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this SendSlackBlocksTaskParams.


        :param channels: The channels of this SendSlackBlocksTaskParams.  # noqa: E501
        :type: list[AddActionItemTaskParamsPostToSlackChannels]
        """

        self._channels = channels

    @property
    def slack_users(self):
        """Gets the slack_users of this SendSlackBlocksTaskParams.  # noqa: E501


        :return: The slack_users of this SendSlackBlocksTaskParams.  # noqa: E501
        :rtype: list[AddActionItemTaskParamsPostToSlackChannels]
        """
        return self._slack_users

    @slack_users.setter
    def slack_users(self, slack_users):
        """Sets the slack_users of this SendSlackBlocksTaskParams.


        :param slack_users: The slack_users of this SendSlackBlocksTaskParams.  # noqa: E501
        :type: list[AddActionItemTaskParamsPostToSlackChannels]
        """

        self._slack_users = slack_users

    @property
    def slack_user_groups(self):
        """Gets the slack_user_groups of this SendSlackBlocksTaskParams.  # noqa: E501


        :return: The slack_user_groups of this SendSlackBlocksTaskParams.  # noqa: E501
        :rtype: list[AddActionItemTaskParamsPostToSlackChannels]
        """
        return self._slack_user_groups

    @slack_user_groups.setter
    def slack_user_groups(self, slack_user_groups):
        """Sets the slack_user_groups of this SendSlackBlocksTaskParams.


        :param slack_user_groups: The slack_user_groups of this SendSlackBlocksTaskParams.  # noqa: E501
        :type: list[AddActionItemTaskParamsPostToSlackChannels]
        """

        self._slack_user_groups = slack_user_groups

    @property
    def broadcast_thread_reply_to_channel(self):
        """Gets the broadcast_thread_reply_to_channel of this SendSlackBlocksTaskParams.  # noqa: E501


        :return: The broadcast_thread_reply_to_channel of this SendSlackBlocksTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._broadcast_thread_reply_to_channel

    @broadcast_thread_reply_to_channel.setter
    def broadcast_thread_reply_to_channel(self, broadcast_thread_reply_to_channel):
        """Sets the broadcast_thread_reply_to_channel of this SendSlackBlocksTaskParams.


        :param broadcast_thread_reply_to_channel: The broadcast_thread_reply_to_channel of this SendSlackBlocksTaskParams.  # noqa: E501
        :type: bool
        """

        self._broadcast_thread_reply_to_channel = broadcast_thread_reply_to_channel

    @property
    def send_as_ephemeral(self):
        """Gets the send_as_ephemeral of this SendSlackBlocksTaskParams.  # noqa: E501


        :return: The send_as_ephemeral of this SendSlackBlocksTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._send_as_ephemeral

    @send_as_ephemeral.setter
    def send_as_ephemeral(self, send_as_ephemeral):
        """Sets the send_as_ephemeral of this SendSlackBlocksTaskParams.


        :param send_as_ephemeral: The send_as_ephemeral of this SendSlackBlocksTaskParams.  # noqa: E501
        :type: bool
        """

        self._send_as_ephemeral = send_as_ephemeral

    @property
    def pin_to_channel(self):
        """Gets the pin_to_channel of this SendSlackBlocksTaskParams.  # noqa: E501


        :return: The pin_to_channel of this SendSlackBlocksTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._pin_to_channel

    @pin_to_channel.setter
    def pin_to_channel(self, pin_to_channel):
        """Sets the pin_to_channel of this SendSlackBlocksTaskParams.


        :param pin_to_channel: The pin_to_channel of this SendSlackBlocksTaskParams.  # noqa: E501
        :type: bool
        """

        self._pin_to_channel = pin_to_channel

    @property
    def update_parent_message(self):
        """Gets the update_parent_message of this SendSlackBlocksTaskParams.  # noqa: E501


        :return: The update_parent_message of this SendSlackBlocksTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._update_parent_message

    @update_parent_message.setter
    def update_parent_message(self, update_parent_message):
        """Sets the update_parent_message of this SendSlackBlocksTaskParams.


        :param update_parent_message: The update_parent_message of this SendSlackBlocksTaskParams.  # noqa: E501
        :type: bool
        """

        self._update_parent_message = update_parent_message

    @property
    def parent_message_thread_task(self):
        """Gets the parent_message_thread_task of this SendSlackBlocksTaskParams.  # noqa: E501


        :return: The parent_message_thread_task of this SendSlackBlocksTaskParams.  # noqa: E501
        :rtype: GetPulsesTaskParamsParentMessageThreadTask
        """
        return self._parent_message_thread_task

    @parent_message_thread_task.setter
    def parent_message_thread_task(self, parent_message_thread_task):
        """Sets the parent_message_thread_task of this SendSlackBlocksTaskParams.


        :param parent_message_thread_task: The parent_message_thread_task of this SendSlackBlocksTaskParams.  # noqa: E501
        :type: GetPulsesTaskParamsParentMessageThreadTask
        """

        self._parent_message_thread_task = parent_message_thread_task

    @property
    def send_only_as_threaded_message(self):
        """Gets the send_only_as_threaded_message of this SendSlackBlocksTaskParams.  # noqa: E501

        When set to true, if the parent for this threaded message cannot be found the message will be skipped.  # noqa: E501

        :return: The send_only_as_threaded_message of this SendSlackBlocksTaskParams.  # noqa: E501
        :rtype: bool
        """
        return self._send_only_as_threaded_message

    @send_only_as_threaded_message.setter
    def send_only_as_threaded_message(self, send_only_as_threaded_message):
        """Sets the send_only_as_threaded_message of this SendSlackBlocksTaskParams.

        When set to true, if the parent for this threaded message cannot be found the message will be skipped.  # noqa: E501

        :param send_only_as_threaded_message: The send_only_as_threaded_message of this SendSlackBlocksTaskParams.  # noqa: E501
        :type: bool
        """

        self._send_only_as_threaded_message = send_only_as_threaded_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendSlackBlocksTaskParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendSlackBlocksTaskParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
