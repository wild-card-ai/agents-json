# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewTeamDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'notify_emails': 'list[str]',
        'color': 'str',
        'position': 'int',
        'backstage_id': 'str',
        'external_id': 'str',
        'pagerduty_id': 'str',
        'pagerduty_service_id': 'str',
        'opsgenie_id': 'str',
        'opsgenie_team_id': 'str',
        'victor_ops_id': 'str',
        'pagertree_id': 'str',
        'cortex_id': 'str',
        'service_now_ci_sys_id': 'str',
        'user_ids': 'list[int]',
        'admin_ids': 'list[int]',
        'alerts_email_enabled': 'bool',
        'alert_urgency_id': 'str',
        'slack_channels': 'list[NewEnvironmentDataAttributesSlackChannels]',
        'slack_aliases': 'list[NewEnvironmentDataAttributesSlackAliases]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'notify_emails': 'notify_emails',
        'color': 'color',
        'position': 'position',
        'backstage_id': 'backstage_id',
        'external_id': 'external_id',
        'pagerduty_id': 'pagerduty_id',
        'pagerduty_service_id': 'pagerduty_service_id',
        'opsgenie_id': 'opsgenie_id',
        'opsgenie_team_id': 'opsgenie_team_id',
        'victor_ops_id': 'victor_ops_id',
        'pagertree_id': 'pagertree_id',
        'cortex_id': 'cortex_id',
        'service_now_ci_sys_id': 'service_now_ci_sys_id',
        'user_ids': 'user_ids',
        'admin_ids': 'admin_ids',
        'alerts_email_enabled': 'alerts_email_enabled',
        'alert_urgency_id': 'alert_urgency_id',
        'slack_channels': 'slack_channels',
        'slack_aliases': 'slack_aliases'
    }

    def __init__(self, name=None, description=None, notify_emails=None, color=None, position=None, backstage_id=None, external_id=None, pagerduty_id=None, pagerduty_service_id=None, opsgenie_id=None, opsgenie_team_id=None, victor_ops_id=None, pagertree_id=None, cortex_id=None, service_now_ci_sys_id=None, user_ids=None, admin_ids=None, alerts_email_enabled=None, alert_urgency_id=None, slack_channels=None, slack_aliases=None):  # noqa: E501
        """NewTeamDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._notify_emails = None
        self._color = None
        self._position = None
        self._backstage_id = None
        self._external_id = None
        self._pagerduty_id = None
        self._pagerduty_service_id = None
        self._opsgenie_id = None
        self._opsgenie_team_id = None
        self._victor_ops_id = None
        self._pagertree_id = None
        self._cortex_id = None
        self._service_now_ci_sys_id = None
        self._user_ids = None
        self._admin_ids = None
        self._alerts_email_enabled = None
        self._alert_urgency_id = None
        self._slack_channels = None
        self._slack_aliases = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        if notify_emails is not None:
            self.notify_emails = notify_emails
        if color is not None:
            self.color = color
        if position is not None:
            self.position = position
        if backstage_id is not None:
            self.backstage_id = backstage_id
        if external_id is not None:
            self.external_id = external_id
        if pagerduty_id is not None:
            self.pagerduty_id = pagerduty_id
        if pagerduty_service_id is not None:
            self.pagerduty_service_id = pagerduty_service_id
        if opsgenie_id is not None:
            self.opsgenie_id = opsgenie_id
        if opsgenie_team_id is not None:
            self.opsgenie_team_id = opsgenie_team_id
        if victor_ops_id is not None:
            self.victor_ops_id = victor_ops_id
        if pagertree_id is not None:
            self.pagertree_id = pagertree_id
        if cortex_id is not None:
            self.cortex_id = cortex_id
        if service_now_ci_sys_id is not None:
            self.service_now_ci_sys_id = service_now_ci_sys_id
        if user_ids is not None:
            self.user_ids = user_ids
        if admin_ids is not None:
            self.admin_ids = admin_ids
        if alerts_email_enabled is not None:
            self.alerts_email_enabled = alerts_email_enabled
        if alert_urgency_id is not None:
            self.alert_urgency_id = alert_urgency_id
        if slack_channels is not None:
            self.slack_channels = slack_channels
        if slack_aliases is not None:
            self.slack_aliases = slack_aliases

    @property
    def name(self):
        """Gets the name of this NewTeamDataAttributes.  # noqa: E501

        The name of the team  # noqa: E501

        :return: The name of this NewTeamDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewTeamDataAttributes.

        The name of the team  # noqa: E501

        :param name: The name of this NewTeamDataAttributes.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this NewTeamDataAttributes.  # noqa: E501

        The description of the team  # noqa: E501

        :return: The description of this NewTeamDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewTeamDataAttributes.

        The description of the team  # noqa: E501

        :param description: The description of this NewTeamDataAttributes.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def notify_emails(self):
        """Gets the notify_emails of this NewTeamDataAttributes.  # noqa: E501

        Emails to attach to the team  # noqa: E501

        :return: The notify_emails of this NewTeamDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._notify_emails

    @notify_emails.setter
    def notify_emails(self, notify_emails):
        """Sets the notify_emails of this NewTeamDataAttributes.

        Emails to attach to the team  # noqa: E501

        :param notify_emails: The notify_emails of this NewTeamDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._notify_emails = notify_emails

    @property
    def color(self):
        """Gets the color of this NewTeamDataAttributes.  # noqa: E501

        The hex color of the team  # noqa: E501

        :return: The color of this NewTeamDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this NewTeamDataAttributes.

        The hex color of the team  # noqa: E501

        :param color: The color of this NewTeamDataAttributes.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def position(self):
        """Gets the position of this NewTeamDataAttributes.  # noqa: E501

        Position of the team  # noqa: E501

        :return: The position of this NewTeamDataAttributes.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this NewTeamDataAttributes.

        Position of the team  # noqa: E501

        :param position: The position of this NewTeamDataAttributes.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def backstage_id(self):
        """Gets the backstage_id of this NewTeamDataAttributes.  # noqa: E501

        The Backstage entity id associated to this team. eg: :namespace/:kind/:entity_name  # noqa: E501

        :return: The backstage_id of this NewTeamDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._backstage_id

    @backstage_id.setter
    def backstage_id(self, backstage_id):
        """Sets the backstage_id of this NewTeamDataAttributes.

        The Backstage entity id associated to this team. eg: :namespace/:kind/:entity_name  # noqa: E501

        :param backstage_id: The backstage_id of this NewTeamDataAttributes.  # noqa: E501
        :type: str
        """

        self._backstage_id = backstage_id

    @property
    def external_id(self):
        """Gets the external_id of this NewTeamDataAttributes.  # noqa: E501

        The external id associated to this team  # noqa: E501

        :return: The external_id of this NewTeamDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this NewTeamDataAttributes.

        The external id associated to this team  # noqa: E501

        :param external_id: The external_id of this NewTeamDataAttributes.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def pagerduty_id(self):
        """Gets the pagerduty_id of this NewTeamDataAttributes.  # noqa: E501

        The PagerDuty group id associated to this team  # noqa: E501

        :return: The pagerduty_id of this NewTeamDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._pagerduty_id

    @pagerduty_id.setter
    def pagerduty_id(self, pagerduty_id):
        """Sets the pagerduty_id of this NewTeamDataAttributes.

        The PagerDuty group id associated to this team  # noqa: E501

        :param pagerduty_id: The pagerduty_id of this NewTeamDataAttributes.  # noqa: E501
        :type: str
        """

        self._pagerduty_id = pagerduty_id

    @property
    def pagerduty_service_id(self):
        """Gets the pagerduty_service_id of this NewTeamDataAttributes.  # noqa: E501

        The PagerDuty service id associated to this team  # noqa: E501

        :return: The pagerduty_service_id of this NewTeamDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._pagerduty_service_id

    @pagerduty_service_id.setter
    def pagerduty_service_id(self, pagerduty_service_id):
        """Sets the pagerduty_service_id of this NewTeamDataAttributes.

        The PagerDuty service id associated to this team  # noqa: E501

        :param pagerduty_service_id: The pagerduty_service_id of this NewTeamDataAttributes.  # noqa: E501
        :type: str
        """

        self._pagerduty_service_id = pagerduty_service_id

    @property
    def opsgenie_id(self):
        """Gets the opsgenie_id of this NewTeamDataAttributes.  # noqa: E501

        The Opsgenie group id associated to this team  # noqa: E501

        :return: The opsgenie_id of this NewTeamDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._opsgenie_id

    @opsgenie_id.setter
    def opsgenie_id(self, opsgenie_id):
        """Sets the opsgenie_id of this NewTeamDataAttributes.

        The Opsgenie group id associated to this team  # noqa: E501

        :param opsgenie_id: The opsgenie_id of this NewTeamDataAttributes.  # noqa: E501
        :type: str
        """

        self._opsgenie_id = opsgenie_id

    @property
    def opsgenie_team_id(self):
        """Gets the opsgenie_team_id of this NewTeamDataAttributes.  # noqa: E501

        The Opsgenie team id associated to this team  # noqa: E501

        :return: The opsgenie_team_id of this NewTeamDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._opsgenie_team_id

    @opsgenie_team_id.setter
    def opsgenie_team_id(self, opsgenie_team_id):
        """Sets the opsgenie_team_id of this NewTeamDataAttributes.

        The Opsgenie team id associated to this team  # noqa: E501

        :param opsgenie_team_id: The opsgenie_team_id of this NewTeamDataAttributes.  # noqa: E501
        :type: str
        """

        self._opsgenie_team_id = opsgenie_team_id

    @property
    def victor_ops_id(self):
        """Gets the victor_ops_id of this NewTeamDataAttributes.  # noqa: E501

        The VictorOps group id associated to this team  # noqa: E501

        :return: The victor_ops_id of this NewTeamDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._victor_ops_id

    @victor_ops_id.setter
    def victor_ops_id(self, victor_ops_id):
        """Sets the victor_ops_id of this NewTeamDataAttributes.

        The VictorOps group id associated to this team  # noqa: E501

        :param victor_ops_id: The victor_ops_id of this NewTeamDataAttributes.  # noqa: E501
        :type: str
        """

        self._victor_ops_id = victor_ops_id

    @property
    def pagertree_id(self):
        """Gets the pagertree_id of this NewTeamDataAttributes.  # noqa: E501

        The PagerTree group id associated to this team  # noqa: E501

        :return: The pagertree_id of this NewTeamDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._pagertree_id

    @pagertree_id.setter
    def pagertree_id(self, pagertree_id):
        """Sets the pagertree_id of this NewTeamDataAttributes.

        The PagerTree group id associated to this team  # noqa: E501

        :param pagertree_id: The pagertree_id of this NewTeamDataAttributes.  # noqa: E501
        :type: str
        """

        self._pagertree_id = pagertree_id

    @property
    def cortex_id(self):
        """Gets the cortex_id of this NewTeamDataAttributes.  # noqa: E501

        The Cortex group id associated to this team  # noqa: E501

        :return: The cortex_id of this NewTeamDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._cortex_id

    @cortex_id.setter
    def cortex_id(self, cortex_id):
        """Sets the cortex_id of this NewTeamDataAttributes.

        The Cortex group id associated to this team  # noqa: E501

        :param cortex_id: The cortex_id of this NewTeamDataAttributes.  # noqa: E501
        :type: str
        """

        self._cortex_id = cortex_id

    @property
    def service_now_ci_sys_id(self):
        """Gets the service_now_ci_sys_id of this NewTeamDataAttributes.  # noqa: E501

        The Service Now CI sys id associated to this team  # noqa: E501

        :return: The service_now_ci_sys_id of this NewTeamDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._service_now_ci_sys_id

    @service_now_ci_sys_id.setter
    def service_now_ci_sys_id(self, service_now_ci_sys_id):
        """Sets the service_now_ci_sys_id of this NewTeamDataAttributes.

        The Service Now CI sys id associated to this team  # noqa: E501

        :param service_now_ci_sys_id: The service_now_ci_sys_id of this NewTeamDataAttributes.  # noqa: E501
        :type: str
        """

        self._service_now_ci_sys_id = service_now_ci_sys_id

    @property
    def user_ids(self):
        """Gets the user_ids of this NewTeamDataAttributes.  # noqa: E501

        The user ids of the members of this team.  # noqa: E501

        :return: The user_ids of this NewTeamDataAttributes.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this NewTeamDataAttributes.

        The user ids of the members of this team.  # noqa: E501

        :param user_ids: The user_ids of this NewTeamDataAttributes.  # noqa: E501
        :type: list[int]
        """

        self._user_ids = user_ids

    @property
    def admin_ids(self):
        """Gets the admin_ids of this NewTeamDataAttributes.  # noqa: E501

        The user ids of the admins of this team. These users must also be present in user_ids attribute.  # noqa: E501

        :return: The admin_ids of this NewTeamDataAttributes.  # noqa: E501
        :rtype: list[int]
        """
        return self._admin_ids

    @admin_ids.setter
    def admin_ids(self, admin_ids):
        """Sets the admin_ids of this NewTeamDataAttributes.

        The user ids of the admins of this team. These users must also be present in user_ids attribute.  # noqa: E501

        :param admin_ids: The admin_ids of this NewTeamDataAttributes.  # noqa: E501
        :type: list[int]
        """

        self._admin_ids = admin_ids

    @property
    def alerts_email_enabled(self):
        """Gets the alerts_email_enabled of this NewTeamDataAttributes.  # noqa: E501

        Enable alerts through email  # noqa: E501

        :return: The alerts_email_enabled of this NewTeamDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._alerts_email_enabled

    @alerts_email_enabled.setter
    def alerts_email_enabled(self, alerts_email_enabled):
        """Sets the alerts_email_enabled of this NewTeamDataAttributes.

        Enable alerts through email  # noqa: E501

        :param alerts_email_enabled: The alerts_email_enabled of this NewTeamDataAttributes.  # noqa: E501
        :type: bool
        """

        self._alerts_email_enabled = alerts_email_enabled

    @property
    def alert_urgency_id(self):
        """Gets the alert_urgency_id of this NewTeamDataAttributes.  # noqa: E501

        The alert urgency id of the team  # noqa: E501

        :return: The alert_urgency_id of this NewTeamDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._alert_urgency_id

    @alert_urgency_id.setter
    def alert_urgency_id(self, alert_urgency_id):
        """Sets the alert_urgency_id of this NewTeamDataAttributes.

        The alert urgency id of the team  # noqa: E501

        :param alert_urgency_id: The alert_urgency_id of this NewTeamDataAttributes.  # noqa: E501
        :type: str
        """

        self._alert_urgency_id = alert_urgency_id

    @property
    def slack_channels(self):
        """Gets the slack_channels of this NewTeamDataAttributes.  # noqa: E501

        Slack Channels associated with this team  # noqa: E501

        :return: The slack_channels of this NewTeamDataAttributes.  # noqa: E501
        :rtype: list[NewEnvironmentDataAttributesSlackChannels]
        """
        return self._slack_channels

    @slack_channels.setter
    def slack_channels(self, slack_channels):
        """Sets the slack_channels of this NewTeamDataAttributes.

        Slack Channels associated with this team  # noqa: E501

        :param slack_channels: The slack_channels of this NewTeamDataAttributes.  # noqa: E501
        :type: list[NewEnvironmentDataAttributesSlackChannels]
        """

        self._slack_channels = slack_channels

    @property
    def slack_aliases(self):
        """Gets the slack_aliases of this NewTeamDataAttributes.  # noqa: E501

        Slack Aliases associated with this team  # noqa: E501

        :return: The slack_aliases of this NewTeamDataAttributes.  # noqa: E501
        :rtype: list[NewEnvironmentDataAttributesSlackAliases]
        """
        return self._slack_aliases

    @slack_aliases.setter
    def slack_aliases(self, slack_aliases):
        """Sets the slack_aliases of this NewTeamDataAttributes.

        Slack Aliases associated with this team  # noqa: E501

        :param slack_aliases: The slack_aliases of this NewTeamDataAttributes.  # noqa: E501
        :type: list[NewEnvironmentDataAttributesSlackAliases]
        """

        self._slack_aliases = slack_aliases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewTeamDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewTeamDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
