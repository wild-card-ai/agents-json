# coding: utf-8

"""
    Rootly API v1

    # How to generate an API Key? - **Account** > **Manage API keys** > **Generate New API Key**  # JSON:API Specification Rootly is using **JSON:API** (https://jsonapi.org) specification: - JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. - JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. - JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.  # Authentication and Requests We use standard HTTP Authentication over HTTPS to authorize your requests. ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents ```  <br/>  # Rate limiting - There is a default limit of approximately **3000** **GET** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - There is a default limit of approximately **3000** **PUT**, **POST**, **PATCH** or **DELETE** calls **per API key** every **60 seconds**. The limit is calculated over a **60-second sliding window** looking back from the current time. While the limit can be configured to support higher thresholds, you must first contact your **Rootly Customer Success Manager** to make any adjustments. - The response to the API call will return 429 HTTP status code - Request Limit Exceeded and Rootly will not ingest the event. - Additional headers will be returned giving you information about the limit:   - **RateLimit-Limit** - The maximum number of requests that the consumer is permitted to make.   - **RateLimit-Remaining** - The number of requests remaining in the current rate limit window.   - **RateLimit-Reset** - The time at which the current rate limit window resets in UTC epoch seconds.  # Pagination - Pagination is supported for all endpoints that return a collection of items. - Pagination is controlled by the **page** query parameter  ## Example ```   curl --request GET \\ --header 'Content-Type: application/vnd.api+json' \\ --header 'Authorization: Bearer YOUR-TOKEN' \\ --url https://api.rootly.com/v1/incidents?page[number]=1&page[size]=10 ```    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewIncidentDataAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'kind': 'str',
        'parent_incident_id': 'str',
        'private': 'bool',
        'summary': 'str',
        'user_id': 'str',
        'severity_id': 'str',
        'environment_ids': 'list[str]',
        'incident_type_ids': 'list[str]',
        'service_ids': 'list[str]',
        'functionality_ids': 'list[str]',
        'group_ids': 'list[str]',
        'cause_ids': 'list[str]',
        'labels': 'object',
        'slack_channel_name': 'str',
        'notify_emails': 'list[str]',
        'status': 'str',
        'url': 'str',
        'scheduled_for': 'str',
        'scheduled_until': 'str',
        'in_triage_at': 'str',
        'started_at': 'str',
        'detected_at': 'str',
        'acknowledged_at': 'str',
        'mitigated_at': 'str',
        'resolved_at': 'str',
        'cancelled_at': 'str'
    }

    attribute_map = {
        'title': 'title',
        'kind': 'kind',
        'parent_incident_id': 'parent_incident_id',
        'private': 'private',
        'summary': 'summary',
        'user_id': 'user_id',
        'severity_id': 'severity_id',
        'environment_ids': 'environment_ids',
        'incident_type_ids': 'incident_type_ids',
        'service_ids': 'service_ids',
        'functionality_ids': 'functionality_ids',
        'group_ids': 'group_ids',
        'cause_ids': 'cause_ids',
        'labels': 'labels',
        'slack_channel_name': 'slack_channel_name',
        'notify_emails': 'notify_emails',
        'status': 'status',
        'url': 'url',
        'scheduled_for': 'scheduled_for',
        'scheduled_until': 'scheduled_until',
        'in_triage_at': 'in_triage_at',
        'started_at': 'started_at',
        'detected_at': 'detected_at',
        'acknowledged_at': 'acknowledged_at',
        'mitigated_at': 'mitigated_at',
        'resolved_at': 'resolved_at',
        'cancelled_at': 'cancelled_at'
    }

    def __init__(self, title=None, kind='normal', parent_incident_id=None, private=False, summary=None, user_id=None, severity_id=None, environment_ids=None, incident_type_ids=None, service_ids=None, functionality_ids=None, group_ids=None, cause_ids=None, labels=None, slack_channel_name=None, notify_emails=None, status=None, url=None, scheduled_for=None, scheduled_until=None, in_triage_at=None, started_at=None, detected_at=None, acknowledged_at=None, mitigated_at=None, resolved_at=None, cancelled_at=None):  # noqa: E501
        """NewIncidentDataAttributes - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._kind = None
        self._parent_incident_id = None
        self._private = None
        self._summary = None
        self._user_id = None
        self._severity_id = None
        self._environment_ids = None
        self._incident_type_ids = None
        self._service_ids = None
        self._functionality_ids = None
        self._group_ids = None
        self._cause_ids = None
        self._labels = None
        self._slack_channel_name = None
        self._notify_emails = None
        self._status = None
        self._url = None
        self._scheduled_for = None
        self._scheduled_until = None
        self._in_triage_at = None
        self._started_at = None
        self._detected_at = None
        self._acknowledged_at = None
        self._mitigated_at = None
        self._resolved_at = None
        self._cancelled_at = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if kind is not None:
            self.kind = kind
        if parent_incident_id is not None:
            self.parent_incident_id = parent_incident_id
        if private is not None:
            self.private = private
        if summary is not None:
            self.summary = summary
        if user_id is not None:
            self.user_id = user_id
        if severity_id is not None:
            self.severity_id = severity_id
        if environment_ids is not None:
            self.environment_ids = environment_ids
        if incident_type_ids is not None:
            self.incident_type_ids = incident_type_ids
        if service_ids is not None:
            self.service_ids = service_ids
        if functionality_ids is not None:
            self.functionality_ids = functionality_ids
        if group_ids is not None:
            self.group_ids = group_ids
        if cause_ids is not None:
            self.cause_ids = cause_ids
        if labels is not None:
            self.labels = labels
        if slack_channel_name is not None:
            self.slack_channel_name = slack_channel_name
        if notify_emails is not None:
            self.notify_emails = notify_emails
        if status is not None:
            self.status = status
        if url is not None:
            self.url = url
        if scheduled_for is not None:
            self.scheduled_for = scheduled_for
        if scheduled_until is not None:
            self.scheduled_until = scheduled_until
        if in_triage_at is not None:
            self.in_triage_at = in_triage_at
        if started_at is not None:
            self.started_at = started_at
        if detected_at is not None:
            self.detected_at = detected_at
        if acknowledged_at is not None:
            self.acknowledged_at = acknowledged_at
        if mitigated_at is not None:
            self.mitigated_at = mitigated_at
        if resolved_at is not None:
            self.resolved_at = resolved_at
        if cancelled_at is not None:
            self.cancelled_at = cancelled_at

    @property
    def title(self):
        """Gets the title of this NewIncidentDataAttributes.  # noqa: E501

        The title of the incident. We will autogenerate one if null  # noqa: E501

        :return: The title of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NewIncidentDataAttributes.

        The title of the incident. We will autogenerate one if null  # noqa: E501

        :param title: The title of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def kind(self):
        """Gets the kind of this NewIncidentDataAttributes.  # noqa: E501

        The kind of the incident  # noqa: E501

        :return: The kind of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this NewIncidentDataAttributes.

        The kind of the incident  # noqa: E501

        :param kind: The kind of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["test", "test_sub", "example", "example_sub", "normal", "normal_sub", "backfilled", "scheduled"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def parent_incident_id(self):
        """Gets the parent_incident_id of this NewIncidentDataAttributes.  # noqa: E501

        ID of parent incident  # noqa: E501

        :return: The parent_incident_id of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._parent_incident_id

    @parent_incident_id.setter
    def parent_incident_id(self, parent_incident_id):
        """Sets the parent_incident_id of this NewIncidentDataAttributes.

        ID of parent incident  # noqa: E501

        :param parent_incident_id: The parent_incident_id of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._parent_incident_id = parent_incident_id

    @property
    def private(self):
        """Gets the private of this NewIncidentDataAttributes.  # noqa: E501

        Create an incident as private. Once an incident is made as private it cannot be undone  # noqa: E501

        :return: The private of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this NewIncidentDataAttributes.

        Create an incident as private. Once an incident is made as private it cannot be undone  # noqa: E501

        :param private: The private of this NewIncidentDataAttributes.  # noqa: E501
        :type: bool
        """

        self._private = private

    @property
    def summary(self):
        """Gets the summary of this NewIncidentDataAttributes.  # noqa: E501

        The summary of the incident  # noqa: E501

        :return: The summary of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this NewIncidentDataAttributes.

        The summary of the incident  # noqa: E501

        :param summary: The summary of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def user_id(self):
        """Gets the user_id of this NewIncidentDataAttributes.  # noqa: E501

        User ID of the creator of the incident. Default to the user attached to the Api Key  # noqa: E501

        :return: The user_id of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this NewIncidentDataAttributes.

        User ID of the creator of the incident. Default to the user attached to the Api Key  # noqa: E501

        :param user_id: The user_id of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def severity_id(self):
        """Gets the severity_id of this NewIncidentDataAttributes.  # noqa: E501

        The Severity ID to attach to the incident  # noqa: E501

        :return: The severity_id of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._severity_id

    @severity_id.setter
    def severity_id(self, severity_id):
        """Sets the severity_id of this NewIncidentDataAttributes.

        The Severity ID to attach to the incident  # noqa: E501

        :param severity_id: The severity_id of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._severity_id = severity_id

    @property
    def environment_ids(self):
        """Gets the environment_ids of this NewIncidentDataAttributes.  # noqa: E501

        The Environment ID's to attach to the incident  # noqa: E501

        :return: The environment_ids of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._environment_ids

    @environment_ids.setter
    def environment_ids(self, environment_ids):
        """Sets the environment_ids of this NewIncidentDataAttributes.

        The Environment ID's to attach to the incident  # noqa: E501

        :param environment_ids: The environment_ids of this NewIncidentDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._environment_ids = environment_ids

    @property
    def incident_type_ids(self):
        """Gets the incident_type_ids of this NewIncidentDataAttributes.  # noqa: E501

        The Incident Type ID's to attach to the incident  # noqa: E501

        :return: The incident_type_ids of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._incident_type_ids

    @incident_type_ids.setter
    def incident_type_ids(self, incident_type_ids):
        """Sets the incident_type_ids of this NewIncidentDataAttributes.

        The Incident Type ID's to attach to the incident  # noqa: E501

        :param incident_type_ids: The incident_type_ids of this NewIncidentDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._incident_type_ids = incident_type_ids

    @property
    def service_ids(self):
        """Gets the service_ids of this NewIncidentDataAttributes.  # noqa: E501

        The Service ID's to attach to the incident  # noqa: E501

        :return: The service_ids of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_ids

    @service_ids.setter
    def service_ids(self, service_ids):
        """Sets the service_ids of this NewIncidentDataAttributes.

        The Service ID's to attach to the incident  # noqa: E501

        :param service_ids: The service_ids of this NewIncidentDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._service_ids = service_ids

    @property
    def functionality_ids(self):
        """Gets the functionality_ids of this NewIncidentDataAttributes.  # noqa: E501

        The Functionality ID's to attach to the incident  # noqa: E501

        :return: The functionality_ids of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._functionality_ids

    @functionality_ids.setter
    def functionality_ids(self, functionality_ids):
        """Sets the functionality_ids of this NewIncidentDataAttributes.

        The Functionality ID's to attach to the incident  # noqa: E501

        :param functionality_ids: The functionality_ids of this NewIncidentDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._functionality_ids = functionality_ids

    @property
    def group_ids(self):
        """Gets the group_ids of this NewIncidentDataAttributes.  # noqa: E501

        The Team ID's to attach to the incident  # noqa: E501

        :return: The group_ids of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this NewIncidentDataAttributes.

        The Team ID's to attach to the incident  # noqa: E501

        :param group_ids: The group_ids of this NewIncidentDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._group_ids = group_ids

    @property
    def cause_ids(self):
        """Gets the cause_ids of this NewIncidentDataAttributes.  # noqa: E501

        The Cause ID's to attach to the incident  # noqa: E501

        :return: The cause_ids of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._cause_ids

    @cause_ids.setter
    def cause_ids(self, cause_ids):
        """Sets the cause_ids of this NewIncidentDataAttributes.

        The Cause ID's to attach to the incident  # noqa: E501

        :param cause_ids: The cause_ids of this NewIncidentDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._cause_ids = cause_ids

    @property
    def labels(self):
        """Gets the labels of this NewIncidentDataAttributes.  # noqa: E501

        Labels to attach to the incidents. eg: {\"platform\":\"osx\", \"version\": \"1.29\"}  # noqa: E501

        :return: The labels of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this NewIncidentDataAttributes.

        Labels to attach to the incidents. eg: {\"platform\":\"osx\", \"version\": \"1.29\"}  # noqa: E501

        :param labels: The labels of this NewIncidentDataAttributes.  # noqa: E501
        :type: object
        """

        self._labels = labels

    @property
    def slack_channel_name(self):
        """Gets the slack_channel_name of this NewIncidentDataAttributes.  # noqa: E501

        Slack channel name  # noqa: E501

        :return: The slack_channel_name of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._slack_channel_name

    @slack_channel_name.setter
    def slack_channel_name(self, slack_channel_name):
        """Sets the slack_channel_name of this NewIncidentDataAttributes.

        Slack channel name  # noqa: E501

        :param slack_channel_name: The slack_channel_name of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._slack_channel_name = slack_channel_name

    @property
    def notify_emails(self):
        """Gets the notify_emails of this NewIncidentDataAttributes.  # noqa: E501

        Emails you want to notify  # noqa: E501

        :return: The notify_emails of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._notify_emails

    @notify_emails.setter
    def notify_emails(self, notify_emails):
        """Sets the notify_emails of this NewIncidentDataAttributes.

        Emails you want to notify  # noqa: E501

        :param notify_emails: The notify_emails of this NewIncidentDataAttributes.  # noqa: E501
        :type: list[str]
        """

        self._notify_emails = notify_emails

    @property
    def status(self):
        """Gets the status of this NewIncidentDataAttributes.  # noqa: E501

        The status of the incident  # noqa: E501

        :return: The status of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NewIncidentDataAttributes.

        The status of the incident  # noqa: E501

        :param status: The status of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["in_triage", "started", "detected", "acknowledged", "mitigated", "resolved", "closed", "cancelled", "scheduled", "in_progress", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def url(self):
        """Gets the url of this NewIncidentDataAttributes.  # noqa: E501

        The url to the incident  # noqa: E501

        :return: The url of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NewIncidentDataAttributes.

        The url to the incident  # noqa: E501

        :param url: The url of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def scheduled_for(self):
        """Gets the scheduled_for of this NewIncidentDataAttributes.  # noqa: E501

        Date of when the maintenance begins  # noqa: E501

        :return: The scheduled_for of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_for

    @scheduled_for.setter
    def scheduled_for(self, scheduled_for):
        """Sets the scheduled_for of this NewIncidentDataAttributes.

        Date of when the maintenance begins  # noqa: E501

        :param scheduled_for: The scheduled_for of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._scheduled_for = scheduled_for

    @property
    def scheduled_until(self):
        """Gets the scheduled_until of this NewIncidentDataAttributes.  # noqa: E501

        Date of when the maintenance ends  # noqa: E501

        :return: The scheduled_until of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_until

    @scheduled_until.setter
    def scheduled_until(self, scheduled_until):
        """Sets the scheduled_until of this NewIncidentDataAttributes.

        Date of when the maintenance ends  # noqa: E501

        :param scheduled_until: The scheduled_until of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._scheduled_until = scheduled_until

    @property
    def in_triage_at(self):
        """Gets the in_triage_at of this NewIncidentDataAttributes.  # noqa: E501

        Date of triage  # noqa: E501

        :return: The in_triage_at of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._in_triage_at

    @in_triage_at.setter
    def in_triage_at(self, in_triage_at):
        """Sets the in_triage_at of this NewIncidentDataAttributes.

        Date of triage  # noqa: E501

        :param in_triage_at: The in_triage_at of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._in_triage_at = in_triage_at

    @property
    def started_at(self):
        """Gets the started_at of this NewIncidentDataAttributes.  # noqa: E501

        Date of start  # noqa: E501

        :return: The started_at of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this NewIncidentDataAttributes.

        Date of start  # noqa: E501

        :param started_at: The started_at of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._started_at = started_at

    @property
    def detected_at(self):
        """Gets the detected_at of this NewIncidentDataAttributes.  # noqa: E501

        Date of detection  # noqa: E501

        :return: The detected_at of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._detected_at

    @detected_at.setter
    def detected_at(self, detected_at):
        """Sets the detected_at of this NewIncidentDataAttributes.

        Date of detection  # noqa: E501

        :param detected_at: The detected_at of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._detected_at = detected_at

    @property
    def acknowledged_at(self):
        """Gets the acknowledged_at of this NewIncidentDataAttributes.  # noqa: E501

        Date of acknowledgment  # noqa: E501

        :return: The acknowledged_at of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._acknowledged_at

    @acknowledged_at.setter
    def acknowledged_at(self, acknowledged_at):
        """Sets the acknowledged_at of this NewIncidentDataAttributes.

        Date of acknowledgment  # noqa: E501

        :param acknowledged_at: The acknowledged_at of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._acknowledged_at = acknowledged_at

    @property
    def mitigated_at(self):
        """Gets the mitigated_at of this NewIncidentDataAttributes.  # noqa: E501

        Date of mitigation  # noqa: E501

        :return: The mitigated_at of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._mitigated_at

    @mitigated_at.setter
    def mitigated_at(self, mitigated_at):
        """Sets the mitigated_at of this NewIncidentDataAttributes.

        Date of mitigation  # noqa: E501

        :param mitigated_at: The mitigated_at of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._mitigated_at = mitigated_at

    @property
    def resolved_at(self):
        """Gets the resolved_at of this NewIncidentDataAttributes.  # noqa: E501

        Date of resolution  # noqa: E501

        :return: The resolved_at of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._resolved_at

    @resolved_at.setter
    def resolved_at(self, resolved_at):
        """Sets the resolved_at of this NewIncidentDataAttributes.

        Date of resolution  # noqa: E501

        :param resolved_at: The resolved_at of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._resolved_at = resolved_at

    @property
    def cancelled_at(self):
        """Gets the cancelled_at of this NewIncidentDataAttributes.  # noqa: E501

        Date of cancellation  # noqa: E501

        :return: The cancelled_at of this NewIncidentDataAttributes.  # noqa: E501
        :rtype: str
        """
        return self._cancelled_at

    @cancelled_at.setter
    def cancelled_at(self, cancelled_at):
        """Sets the cancelled_at of this NewIncidentDataAttributes.

        Date of cancellation  # noqa: E501

        :param cancelled_at: The cancelled_at of this NewIncidentDataAttributes.  # noqa: E501
        :type: str
        """

        self._cancelled_at = cancelled_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewIncidentDataAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewIncidentDataAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
