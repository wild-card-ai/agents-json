# coding: utf-8

"""
    Linkup API

    The Linkup API allows you to retrieve web content. Use the `/search` endpoint to query the web for answers or search results, and the `/content` endpoint to retrieve webpage content from premium source partners.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SourcedAnswer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'answer': 'object',
        'sources': 'object'
    }

    attribute_map = {
        'answer': 'answer',
        'sources': 'sources'
    }

    def __init__(self, answer=None, sources=None):  # noqa: E501
        """SourcedAnswer - a model defined in Swagger"""  # noqa: E501
        self._answer = None
        self._sources = None
        self.discriminator = None
        if answer is not None:
            self.answer = answer
        if sources is not None:
            self.sources = sources

    @property
    def answer(self):
        """Gets the answer of this SourcedAnswer.  # noqa: E501

        The answer to your question.  # noqa: E501

        :return: The answer of this SourcedAnswer.  # noqa: E501
        :rtype: object
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this SourcedAnswer.

        The answer to your question.  # noqa: E501

        :param answer: The answer of this SourcedAnswer.  # noqa: E501
        :type: object
        """

        self._answer = answer

    @property
    def sources(self):
        """Gets the sources of this SourcedAnswer.  # noqa: E501


        :return: The sources of this SourcedAnswer.  # noqa: E501
        :rtype: object
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this SourcedAnswer.


        :param sources: The sources of this SourcedAnswer.  # noqa: E501
        :type: object
        """

        self._sources = sources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SourcedAnswer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SourcedAnswer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
