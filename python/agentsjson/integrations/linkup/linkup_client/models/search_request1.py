# coding: utf-8

"""
    Linkup API

    The Linkup API allows you to retrieve web content. Use the `/search` endpoint to query the web for answers or search results, and the `/content` endpoint to retrieve webpage content from premium source partners.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchRequest1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'q': 'object',
        'depth': 'object',
        'output_type': 'object',
        'structured_output_schema': 'object',
        'include_images': 'object'
    }

    attribute_map = {
        'q': 'q',
        'depth': 'depth',
        'output_type': 'outputType',
        'structured_output_schema': 'structuredOutputSchema',
        'include_images': 'includeImages'
    }

    def __init__(self, q=None, depth=None, output_type=None, structured_output_schema=None, include_images=None):  # noqa: E501
        """SearchRequest1 - a model defined in Swagger"""  # noqa: E501
        self._q = None
        self._depth = None
        self._output_type = None
        self._structured_output_schema = None
        self._include_images = None
        self.discriminator = None
        self.q = q
        self.depth = depth
        self.output_type = output_type
        if structured_output_schema is not None:
            self.structured_output_schema = structured_output_schema
        if include_images is not None:
            self.include_images = include_images

    @property
    def q(self):
        """Gets the q of this SearchRequest1.  # noqa: E501

        The natural language question for which you want to retrieve context.  # noqa: E501

        :return: The q of this SearchRequest1.  # noqa: E501
        :rtype: object
        """
        return self._q

    @q.setter
    def q(self, q):
        """Sets the q of this SearchRequest1.

        The natural language question for which you want to retrieve context.  # noqa: E501

        :param q: The q of this SearchRequest1.  # noqa: E501
        :type: object
        """
        if q is None:
            raise ValueError("Invalid value for `q`, must not be `None`")  # noqa: E501

        self._q = q

    @property
    def depth(self):
        """Gets the depth of this SearchRequest1.  # noqa: E501

        Defines the precision of the search. `standard` returns results quickly; `deep` takes longer but yields more complete results.  # noqa: E501

        :return: The depth of this SearchRequest1.  # noqa: E501
        :rtype: object
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this SearchRequest1.

        Defines the precision of the search. `standard` returns results quickly; `deep` takes longer but yields more complete results.  # noqa: E501

        :param depth: The depth of this SearchRequest1.  # noqa: E501
        :type: object
        """
        if depth is None:
            raise ValueError("Invalid value for `depth`, must not be `None`")  # noqa: E501

        self._depth = depth

    @property
    def output_type(self):
        """Gets the output_type of this SearchRequest1.  # noqa: E501

        The type of output you want to get. Use `structured` for a custom-formatted response defined by `structuredOutputSchema`.  # noqa: E501

        :return: The output_type of this SearchRequest1.  # noqa: E501
        :rtype: object
        """
        return self._output_type

    @output_type.setter
    def output_type(self, output_type):
        """Sets the output_type of this SearchRequest1.

        The type of output you want to get. Use `structured` for a custom-formatted response defined by `structuredOutputSchema`.  # noqa: E501

        :param output_type: The output_type of this SearchRequest1.  # noqa: E501
        :type: object
        """
        if output_type is None:
            raise ValueError("Invalid value for `output_type`, must not be `None`")  # noqa: E501

        self._output_type = output_type

    @property
    def structured_output_schema(self):
        """Gets the structured_output_schema of this SearchRequest1.  # noqa: E501

        Required only when `outputType` is `structured`. Provide a JSON schema (as a string) representing the desired response format. The root must be of type `object`.  # noqa: E501

        :return: The structured_output_schema of this SearchRequest1.  # noqa: E501
        :rtype: object
        """
        return self._structured_output_schema

    @structured_output_schema.setter
    def structured_output_schema(self, structured_output_schema):
        """Sets the structured_output_schema of this SearchRequest1.

        Required only when `outputType` is `structured`. Provide a JSON schema (as a string) representing the desired response format. The root must be of type `object`.  # noqa: E501

        :param structured_output_schema: The structured_output_schema of this SearchRequest1.  # noqa: E501
        :type: object
        """

        self._structured_output_schema = structured_output_schema

    @property
    def include_images(self):
        """Gets the include_images of this SearchRequest1.  # noqa: E501

        Defines whether the API should include images in its results.  # noqa: E501

        :return: The include_images of this SearchRequest1.  # noqa: E501
        :rtype: object
        """
        return self._include_images

    @include_images.setter
    def include_images(self, include_images):
        """Sets the include_images of this SearchRequest1.

        Defines whether the API should include images in its results.  # noqa: E501

        :param include_images: The include_images of this SearchRequest1.  # noqa: E501
        :type: object
        """

        self._include_images = include_images

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchRequest1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchRequest1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
